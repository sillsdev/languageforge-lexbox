# yaml-language-server: $schema=https://taskfile.dev/schema.json
# https://taskfile.dev

version: '3'
vars:
  TESTING_DIR: './backend/Testing'
  HG_REPO_DIR: './hgweb/repos'
includes:
  k8s:
    taskfile: ./deployment/Taskfile.yml
    dir: ./deployment
  gh:
    taskfile: ./.github/Taskfile.yml

tasks:
  setup:
    deps: [ setup-win, setup-unix ]
    cmds:
      - git config blame.ignoreRevsFile .git-blame-ignore-revs
      - echo HONEYCOMB_API_KEY=__REPLACE__ >> deployment\dev\local.env
  setup-win:
    platforms: [ windows ]
    cmds:
      - cmd: powershell rm -r {{.HG_REPO_DIR}}/sena-3
        ignore_error: true
        silent: true
      - powershell -Command "Invoke-WebRequest 'https://drive.google.com/uc?export=download&id=1I-hwc0RHoQqW774gbS5qR-GHa1E7BlsS' -OutFile sena-3.zip"
      - powershell -Command "Expand-Archive sena-3.zip -DestinationPath {{.HG_REPO_DIR}}"
      - powershell rm sena-3.zip
  setup-unix:
    platforms: [ linux, darwin ]
    cmds:
      - cmd: rm -rf {{.HG_REPO_DIR}}/sena-3
        ignore_error: true
        silent: true
      - wget -O sena-3.zip 'https://drive.google.com/uc?export=download&id=1I-hwc0RHoQqW774gbS5qR-GHa1E7BlsS'
      - unzip -q sena-3.zip -d {{.HG_REPO_DIR}}/
      - rm sena-3.zip

  # docker
  up:
    desc: 'E.g.: task up -- otel-collector --build'
    cmds:
      - docker compose up --wait {{.CLI_ARGS}}
  down:
    cmds:
      - docker compose down
  restart:
    desc: E.g. task restart -- lexbox-api
    cmds:
      - docker compose restart {{.CLI_ARGS}}

  # tests
  test:
    dir: '{{.TESTING_DIR}}'
    cmds:
      - dotnet test --filter=Category!=Integration
  test-sr:
    dir: '{{.TESTING_DIR}}'
    deps: [ up ]
    cmds:
      - dotnet test --filter=SendReceive
  test-integration:
    dir: '{{.TESTING_DIR}}'
    deps: [ up ]
    cmds:
      - dotnet test --filter Category=Integration
  test-integration-staging:
    cmds:
      - dotnet test --filter Category=Integration  -s .\backend\Testing\staging.runsettings.xml

      # dev
  infra-up:
    desc: Starts infrastructure for our ui and api
    vars:
      WAIT: '{{default true .WAIT}}'
    cmds:
      - docker compose up maildev db hgweb otel-collector hgresumable -d --wait={{.WAIT}}

  backend-up:
    cmds:
      # GraphQL breaks if changes are made while running in docker, so a restart is handy
      - task: api-stop
      - task: api-up

  dev: # Currently broken (because the ui doesn't wait for the api), but probably no one uses it.
    deps: [ api-dev, ui-only]
    interactive: true

  # ui
  ui-dev:
    aliases: [ ui ]
    desc: The single command for local ui development
    dir: ./frontend
    deps: [ backend-up, ui-down ]
    interactive: true
    cmds:
      - task: ui-only
  ui-only:
    aliases: [ uio ]
    dir: ./frontend
    deps: [ ui-install ]
    interactive: true
    cmds:
      - pnpm run dev
  ui-install:
    dir: ./frontend
    method: checksum
    sources:
      - package.json
      - pnpm-lock.yaml
    cmds:
      - corepack enable || true
      - pnpm install
  ui-down:
    cmds:
      - docker compose stop ui

  playwright-generate-tests:
    cmds:
      - pnpm dlx playwright codegen staging.languagedepot.org
      # api
  api-dev:
    aliases: [ api ]
    desc: The single command for local api development
    deps: [ infra-up, api-stop ]
    interactive: true
    cmd: task api-only
  api-only:
    aliases: [ apio ]
    dir: ./backend/LexBoxApi
    interactive: true
    cmds:
      - dotnet watch
  api-up:
    vars:
      WAIT: '{{default true .WAIT}}'
    cmds:
      - docker compose up lexbox-api --wait={{.WAIT}}
  api-stop:
    cmds:
      - docker compose stop lexbox-api

  migrate-db:
    dir: ./backend/LexBoxApi
    cmds:
      - dotnet run migrate --environment "Development"

  add-migration:
    desc: 'usage: task add-migration -- "migration name". Often followed by `task database-update`.'
    dir: ./backend/LexBoxApi
    cmds:
      - dotnet ef migrations add --project ../LexData/LexData.csproj --startup-project LexBoxApi.csproj --context LexData.LexBoxDbContext --output-dir Migrations {{.CLI_ARGS}}

  remove-last-migration:
    desc: "This will remove the last migration, don't remove migrations that have been pushed to production, but you can remove ones you created locally."
    dir: ./backend/LexBoxApi
    cmds:
      - dotnet ef migrations remove --project ../LexData/LexData.csproj --startup-project LexBoxApi.csproj --context LexData.LexBoxDbContext

  db-update:
    desc: "Runs any migrations that haven't yet been applied."
    dir: ./backend/LexBoxApi
    cmds:
      - dotnet ef database update --project ../LexData/LexData.csproj --startup-project LexBoxApi.csproj --context LexData.LexBoxDbContext

  svelte-check:
    desc: "Runs the frontend code checks done in CI. Note: the app must be built."
    aliases: [ sc ]
    dir: ./frontend
    cmds:
      - pnpm run check
      - pnpm run lint

  svelte:
    desc: "Directory independent access to pnpm. E.g. `task svelte -- install`"
    aliases: [ s ]
    dir: ./frontend
    cmd: pnpm {{.CLI_ARGS}}

  dotnet:
    desc: "Directory independent access to api dotnet. E.g. `task dotnet -- restore`"
    aliases: [ dn ]
    dir: ./backend/LexBoxApi
    cmd: dotnet {{.CLI_ARGS}}
