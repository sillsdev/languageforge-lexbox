name: lexbox

services:
  lexbox-api:
    tty: true # for dev tools
    stdin_open: true # for dev tools
    init: true
    build:
      context: backend
      dockerfile: LexBoxApi/dev.Dockerfile
      args:
        AppVersion: docker-dev
    ports:
      - "5158:5158" # 5158 exposed here for dev tools, and the runtime should only expose 80
    # https://docs.docker.com/compose/compose-file/#depends_on
    depends_on:
      db:
        condition: service_healthy
      hgweb:
        condition: service_started
      hgresume:
        condition: service_started
      otel-collector:
        condition: service_started
      maildev:
        condition: service_started
    volumes:
      - hg-repos:/hg-repos

      # for dev convenience
      - ./backend:/src/backend
      - nuget-cache:/root/.nuget/packages
    env_file: .env
    environment:
      DbConfig__LexBoxConnectionString: Host=db;Port=5432;Username=postgres;Password=${POSTGRES_PASSWORD};Database=${POSTGRES_DB}
      HasuraConfig__HasuraUrl: http://hasura:8080/v1/graphql
      HasuraConfig__HasuraSecret: ${HASURA_GRAPHQL_ADMIN_SECRET}
      Otel__Endpoint: http://otel-collector:4317
      HgConfig__RepoPath: /hg-repos
      HgConfig__HgWebUrl: http://hgweb:80
      Clusters__hg-web__Destinations__hg-web-server__Address: http://hgweb:80
      Clusters__resumable-web__Destinations__resumable-web-server__Address: http://hg-resumable:80
      Authentication__Jwt__Secret: dev-secret_but-it-must-be-32-characters-long
      # always passes key, more info here: https://developers.cloudflare.com/turnstile/reference/testing
      CloudFlare__TurnstileKey: 1x0000000000000000000000000000000AA
      Email__SmtpHost: maildev
      Email__SmtpPort: 1025
      Email__SmtpUser: ${SMTP_USER}
      Email__SmtpPassword: ${SMTP_PASSWORD}
      Email__From: "Language Depot <no-reply@test.org>"
      Email__EmailRenderHost: ui:3000

      # for dev convenience
      ASPNETCORE_ENVIRONMENT: Development

    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5158/api/healthz"]
      interval: 5s
      timeout: 5s
      retries: 5
  maildev: 
    image: maildev/maildev # https://github.com/maildev/maildev/blob/master/README.md#usage
    ports:
      - "1080:1080" # ui port
      - "1025:1025" # smtp port
    environment:
      MAILDEV_INCOMING_USER: maildev
      MAILDEV_INCOMING_PASS: maildev_pass

  hasura:
    build: ./hasura
    init: true
    ports:
      - "8081:8080" # 8081 exposed here for dev tools
    depends_on:
      db:
        condition: service_healthy
      lexbox-api:
        condition: service_healthy
    env_file: .env
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      PG_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}

      # supported variables for hasura https://hasura.io/docs/latest/deployment/graphql-engine-flags/reference/
      # for dev convenience
      HASURA_GRAPHQL_ENABLE_CONSOLE: true
      HASURA_GRAPHQL_WEBSOCKET_KEEPALIVE: 20
      HASURA_GRAPHQL_DEV_MODE: "true"

  db:
    image: postgres:15-alpine
    restart: unless-stopped
    ports:
      - "5433:5432" # 5433 exposed here for dev tools
    volumes:
      - db-data:/var/lib/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    env_file: .env

  redmine-db:
    image: mysql:5.7.41
    platform:  linux/amd64
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: the_password
    volumes:
      - redmine_db_data:/var/lib/mysql

  hgweb:
    build: ./hgweb
    ports:
      - "8088:80" # 8080 exposed here for dev tools
    volumes:
      - hg-repos:/var/hg/repos

  hgresume:
    image: ghcr.io/sillsdev/hgresume:v2023-02-24
    platform:  linux/amd64
    ports:
      - "8034:80" # 8034 exposed here for dev tools
    volumes:
      - hg-repos:/var/vcs/public
      - hgresume-cache:/var/cache/hgresume

  otel-collector:
    build: ./otel
    volumes:
      # for dev convenience
      - ./otel/collector-config.yaml:/etc/collector-config.yaml
    ports:
      # TODO: determine why these are exposed to the host.
      - 4317:4317 # OTLP gRPC receiver - only required when running backend locally
      - 4318:4318 # OTLP http receiver
      #- 13133:13133 # health_check extension - only required when running backend locally
    env_file: .env
    # TODO: need to figure out how to keep otel from making fully qualified requests to the 4318:, it's generating CORS issues.
    # environment:
    #   - HTTPS_PROXY='proxy:80'


  ui:
    build: ./frontend
    ports:
      - "3000:3000" # 3000 exposed here for development
    env_file: ./frontend/.env
    environment:
      BACKEND_HOST: http://lexbox-api:5158
      OTEL_ENDPOINT: http://otel-collector:4318

  proxy:
    image: nginx
    ports:
      - "80:80"
    volumes:
      - ./proxy/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - ui
      - lexbox-api
      - otel-collector
      - hasura

volumes:
    db-data:
    hg-repos:
      # wanted this shared volume to get loaded from local filesystem during dev only
      driver: local
      driver_opts:
        device: ./hgweb/repos
        o: bind
        type: none
    redmine_db_data:
    hgresume-cache:
    nuget-cache:
