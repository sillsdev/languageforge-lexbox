@import './lib/entry-editor/field.postcss';
@tailwind base;
@tailwind components;
@tailwind utilities;

:host {
  flex-grow: 1;
}

:host, :root, html, body, .app, .project-view {
  @apply block min-h-full h-full;
  scroll-behavior: smooth;
  @apply bg-surface-100;
  color: var(--base-text);
}

.dialog {
  height: 100vh;
  width: 700px;
  @apply md:max-h-[50rem];
  @apply flex flex-col;

  .actions {
    @apply bg-surface-200;
    position: sticky;
    bottom: 0;
    z-index: 2;
  }
}

.Checkbox *, label:has(.Switch) {
  cursor: pointer;
}

[id^=entry], [id^=sense] {
  scroll-margin-top: 1rem;
  scroll-margin-bottom: 4rem;
}

[id^=example] {
  /* under the sticky sense header */
  scroll-margin-top: 4rem;
  scroll-margin-bottom: 4rem;
}

@layer components {
  .editor-grid {
    display: grid;
    grid-template-columns: 170px fit-content(80px) 1fr;
  }

  .collapsible-col {
    overflow-x: hidden;
    transition: opacity 0.2s ease-out;
  }

  .side-scroller {
    height: calc(var(--space-for-editor, 100vh) - 32px);
    transition: height 0.1s ease-out, opacity 0.2s ease-out;
    position: sticky;
    top: 16px;
  }

  .collapsible-col.collapse-col {
    max-height: 0 !important;
    width: 0 !important;
    max-width: 0 !important;
    opacity: 0 !important;
  }

  .text-field-sibling-button {
    @apply h-[37.6px] p-1.5 aspect-square text-[0.9em] text-surface-content;
  }

  .key {
    display: inline-block;
    padding: 0.15em 0.4em;
    margin: 0 0.1em;
    font-size: 0.8em;
    @apply border border-surface-content rounded-md shadow-md;
  }
}

.Popover .menu-items {
  max-height: 40vh;
}

.grid-layer {
    display: grid;
    grid-template-columns: subgrid;
    @apply col-span-full;
}

.ListItem > * {
  max-width: 100%;
  overflow: hidden;
}

/* These styles belong in EntryOrSensePicker.svelte, but the mixture of global and feature like :dark and :is, are buggy if they're there 😞 */
.entry-sense-picker {
  .Collapse {
    @apply border-2 !border-t-2 border-surface-100 rounded overflow-hidden elevation-0 m-0 transition-none;

    &:hover {
      @apply border-surface-300;

      button:hover {
        @apply bg-surface-300;
        & * {
          @apply bg-transparent;
        }
      }
    }

    &[aria-expanded="true"] {
      @apply border-surface-200;
    }

    .Content .ListItem {
      @apply !rounded-none;
    }

    /* Selected entry */
    &.selected.entry-list-item:is(:not(.disabled-list-item), :has(.selected)) {
      @apply border-accent-500;

      /* Selected sense or entry if no sense is selected */
      .selected.sense-list-item, &.entry-list-item:not(.disabled-list-item):not(:has(.selected)) button {
        @apply bg-accent-100;
        @apply dark:bg-accent-900;

        & > * {
          @apply bg-transparent;
        }
      }
    }
  }

  .disabled-list-item {
    &.entry-list-item [slot="trigger"] {
      @apply brightness-50 bg-surface-100;
    }

    &.sense-list-item {
      @apply brightness-50 pointer-events-none;
    }
  }
}
