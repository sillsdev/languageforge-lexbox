/* eslint-disable */
//     This code was generated by a Reinforced.Typings tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

import type {IWritingSystems} from './Models/IWritingSystems';
import type {IComplexFormType} from './Models/IComplexFormType';
import type {IQueryOptions} from './IQueryOptions';
import type {IEntry} from './Models/IEntry';
import type {IPartOfSpeech} from './Models/IPartOfSpeech';
import type {ISemanticDomain} from './Models/ISemanticDomain';
import type {IExampleSentence} from './Models/IExampleSentence';
import type {IWritingSystem} from './Models/IWritingSystem';
import type {WritingSystemType} from './Models/WritingSystemType';
import type {IComplexFormComponent} from './Models/IComplexFormComponent';
import type {ISense} from './Models/ISense';

export interface IMiniLcmApi
{
	getWritingSystems() : Promise<IWritingSystems>;
	getPartsOfSpeech() : any;
	getSemanticDomains() : any;
	getComplexFormTypes() : any;
	getComplexFormType(id: string) : Promise<IComplexFormType>;
	getEntries(options?: IQueryOptions) : any;
	searchEntries(query: string, options?: IQueryOptions) : any;
	getEntry(id: string) : Promise<IEntry>;
	getPartOfSpeech(id: string) : Promise<IPartOfSpeech>;
	getSemanticDomain(id: string) : Promise<ISemanticDomain>;
	getExampleSentence(entryId: string, senseId: string, id: string) : Promise<IExampleSentence>;
	createWritingSystem(type: WritingSystemType, writingSystem: IWritingSystem) : Promise<IWritingSystem>;
	updateWritingSystem(before: IWritingSystem, after: IWritingSystem) : Promise<IWritingSystem>;
	createPartOfSpeech(partOfSpeech: IPartOfSpeech) : Promise<IPartOfSpeech>;
	updatePartOfSpeech(before: IPartOfSpeech, after: IPartOfSpeech) : Promise<IPartOfSpeech>;
	deletePartOfSpeech(id: string) : Promise<void>;
	createSemanticDomain(semanticDomain: ISemanticDomain) : Promise<ISemanticDomain>;
	updateSemanticDomain(before: ISemanticDomain, after: ISemanticDomain) : Promise<ISemanticDomain>;
	deleteSemanticDomain(id: string) : Promise<void>;
	createComplexFormType(complexFormType: IComplexFormType) : Promise<IComplexFormType>;
	updateComplexFormType(before: IComplexFormType, after: IComplexFormType) : Promise<IComplexFormType>;
	deleteComplexFormType(id: string) : Promise<void>;
	createEntry(entry: IEntry) : Promise<IEntry>;
	updateEntry(before: IEntry, after: IEntry) : Promise<IEntry>;
	deleteEntry(id: string) : Promise<void>;
	createComplexFormComponent(complexFormComponent: IComplexFormComponent) : Promise<IComplexFormComponent>;
	deleteComplexFormComponent(complexFormComponent: IComplexFormComponent) : Promise<void>;
	addComplexFormType(entryId: string, complexFormTypeId: string) : Promise<void>;
	removeComplexFormType(entryId: string, complexFormTypeId: string) : Promise<void>;
	createSense(entryId: string, sense: ISense) : Promise<ISense>;
	deleteSense(entryId: string, senseId: string) : Promise<void>;
	addSemanticDomainToSense(senseId: string, semanticDomain: ISemanticDomain) : Promise<void>;
	removeSemanticDomainFromSense(senseId: string, semanticDomainId: string) : Promise<void>;
	createExampleSentence(entryId: string, senseId: string, exampleSentence: IExampleSentence) : Promise<IExampleSentence>;
	updateExampleSentence(entryId: string, senseId: string, before: IExampleSentence, after: IExampleSentence) : Promise<IExampleSentence>;
	deleteExampleSentence(entryId: string, senseId: string, exampleSentenceId: string) : Promise<void>;
}
/* eslint-enable */
