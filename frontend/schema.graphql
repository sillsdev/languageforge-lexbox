schema {
  query: Query
  mutation: Mutation
}

interface Error {
  message: String!
}

type AddProjectMemberPayload {
  project: Project
  errors: [AddProjectMemberError!]
}

type AddProjectToOrgPayload {
  organization: Organization
  errors: [AddProjectToOrgError!]
}

type AlreadyExistsError implements Error {
  message: String!
}

type AskToJoinProjectPayload {
  project: Project
  errors: [AskToJoinProjectError!]
}

type AuthUserOrg {
  role: OrgRole!
  orgId: UUID!
}

type AuthUserProject {
  role: ProjectRole!
  projectId: UUID!
}

type BulkAddOrgMembersPayload {
  bulkAddOrgMembersResult: BulkAddOrgMembersResult
  errors: [BulkAddOrgMembersError!]
}

type BulkAddOrgMembersResult {
  addedMembers: [OrgMemberRole!]!
  notFoundMembers: [OrgMemberRole!]!
  existingMembers: [OrgMemberRole!]!
}

type BulkAddProjectMembersPayload {
  bulkAddProjectMembersResult: BulkAddProjectMembersResult
  errors: [BulkAddProjectMembersError!]
}

type BulkAddProjectMembersResult {
  addedMembers: [UserProjectRole!]!
  createdMembers: [UserProjectRole!]!
  existingMembers: [UserProjectRole!]!
}

type ChangeOrgMemberRolePayload {
  organization: Organization
  errors: [ChangeOrgMemberRoleError!]
}

type ChangeOrgNamePayload {
  organization: Organization
  errors: [ChangeOrgNameError!]
}

type ChangeProjectDescriptionPayload {
  project: Project
  errors: [ChangeProjectDescriptionError!]
}

type ChangeProjectMemberRolePayload {
  projectUsers: ProjectUsers
  errors: [ChangeProjectMemberRoleError!]
}

type ChangeProjectNamePayload {
  project: Project
  errors: [ChangeProjectNameError!]
}

type ChangeUserAccountByAdminPayload {
  user: User
  errors: [ChangeUserAccountByAdminError!]
}

type ChangeUserAccountBySelfPayload {
  meDto: MeDto
  errors: [ChangeUserAccountBySelfError!]
}

type Changeset {
  node: String!
  rev: Int!
  date: [Float!]!
  desc: String!
  branch: String!
  tags: [String!]!
  user: String!
  phase: String!
  parents: [String!]!
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

type CreateGuestUserByAdminPayload {
  lexAuthUser: LexAuthUser
  errors: [CreateGuestUserByAdminError!]
}

type CreateOrganizationPayload {
  organization: Organization
  errors: [CreateOrganizationError!]
}

type CreateProjectPayload {
  createProjectResponse: CreateProjectResponse
  errors: [CreateProjectError!]
}

type CreateProjectResponse {
  id: UUID
  result: CreateProjectResult!
}

type DbError implements Error {
  message: String!
  code: DbErrorCode!
}

type DeleteDraftProjectPayload {
  draftProject: DraftProject
  errors: [DeleteDraftProjectError!]
}

type DeleteOrgPayload {
  organization: Organization
  errors: [DeleteOrgError!]
}

type DeleteUserByAdminOrSelfPayload {
  user: User
  errors: [DeleteUserByAdminOrSelfError!]
}

type DraftProject {
  name: String!
  description: String!
  code: String!
  type: ProjectType!
  retentionPolicy: RetentionPolicy!
  projectManager: User
  projectManagerId: UUID
  orgId: UUID
  isConfidential: Boolean
  id: UUID!
  createdDate: DateTime!
  updatedDate: DateTime!
}

type FLExWsId {
  tag: String!
  isActive: Boolean!
  isDefault: Boolean!
}

type FlexProjectMetadata {
  projectId: UUID!
  lexEntryCount: Int
  langProjectId: UUID
  writingSystems: ProjectWritingSystems
}

type InvalidEmailError implements Error {
  message: String!
  address: String!
}

type IsAdminResponse {
  value: Boolean!
}

type LastMemberCantLeaveError implements Error {
  message: String!
}

type LeaveProjectPayload {
  project: Project
  errors: [LeaveProjectError!]
}

type LexAuthUser {
  id: UUID!
  updatedDate: Long!
  audience: LexboxAudience!
  email: String
  username: String
  name: String!
  role: UserRole!
  isAdmin: Boolean!
  projects: [AuthUserProject!]!
  orgs: [AuthUserOrg!]!
  projectsJson: String!
  locked: Boolean
  emailVerificationRequired: Boolean
  canCreateProjects: Boolean
  createdByAdmin: Boolean
  locale: String!
}

type MeDto {
  id: UUID!
  name: String!
  email: String
  locale: String!
}

type Mutation {
  createOrganization(input: CreateOrganizationInput!): CreateOrganizationPayload!
  deleteOrg(input: DeleteOrgInput!): DeleteOrgPayload! @authorize(policy: "AdminRequiredPolicy")
  addProjectToOrg(input: AddProjectToOrgInput!): AddProjectToOrgPayload!
  removeProjectFromOrg(input: RemoveProjectFromOrgInput!): RemoveProjectFromOrgPayload!
  setOrgMemberRole(input: SetOrgMemberRoleInput!): SetOrgMemberRolePayload!
  changeOrgMemberRole(input: ChangeOrgMemberRoleInput!): ChangeOrgMemberRolePayload!
  bulkAddOrgMembers(input: BulkAddOrgMembersInput!): BulkAddOrgMembersPayload!
  changeOrgName(input: ChangeOrgNameInput!): ChangeOrgNamePayload!
  createProject(input: CreateProjectInput!): CreateProjectPayload! @authorize(policy: "VerifiedEmailRequiredPolicy")
  addProjectMember(input: AddProjectMemberInput!): AddProjectMemberPayload!
  bulkAddProjectMembers(input: BulkAddProjectMembersInput!): BulkAddProjectMembersPayload! @authorize(policy: "AdminRequiredPolicy")
  changeProjectMemberRole(input: ChangeProjectMemberRoleInput!): ChangeProjectMemberRolePayload!
  askToJoinProject(input: AskToJoinProjectInput!): AskToJoinProjectPayload!
  changeProjectName(input: ChangeProjectNameInput!): ChangeProjectNamePayload!
  changeProjectDescription(input: ChangeProjectDescriptionInput!): ChangeProjectDescriptionPayload!
  setProjectConfidentiality(input: SetProjectConfidentialityInput!): SetProjectConfidentialityPayload!
  setRetentionPolicy(input: SetRetentionPolicyInput!): SetRetentionPolicyPayload!
  updateProjectLexEntryCount(input: UpdateProjectLexEntryCountInput!): UpdateProjectLexEntryCountPayload!
  updateProjectLanguageList(input: UpdateProjectLanguageListInput!): UpdateProjectLanguageListPayload!
  updateLangProjectId(input: UpdateLangProjectIdInput!): UpdateLangProjectIdPayload!
  leaveProject(input: LeaveProjectInput!): LeaveProjectPayload!
  removeProjectMember(input: RemoveProjectMemberInput!): RemoveProjectMemberPayload!
  deleteDraftProject(input: DeleteDraftProjectInput!): DeleteDraftProjectPayload! @authorize(policy: "AdminRequiredPolicy")
  softDeleteProject(input: SoftDeleteProjectInput!): SoftDeleteProjectPayload!
  changeUserAccountBySelf(input: ChangeUserAccountBySelfInput!): ChangeUserAccountBySelfPayload!
  changeUserAccountByAdmin(input: ChangeUserAccountByAdminInput!): ChangeUserAccountByAdminPayload! @authorize(policy: "AdminRequiredPolicy")
  createGuestUserByAdmin(input: CreateGuestUserByAdminInput!): CreateGuestUserByAdminPayload! @authorize(policy: "AdminRequiredPolicy")
  deleteUserByAdminOrSelf(input: DeleteUserByAdminOrSelfInput!): DeleteUserByAdminOrSelfPayload!
  setUserLocked(input: SetUserLockedInput!): SetUserLockedPayload! @authorize(policy: "AdminRequiredPolicy")
}

type NotFoundError implements Error {
  message: String!
  type: String!
}

type OrgById {
  members: [OrgByIdMember!]!
  name: String!
  projects: [Project!]!
  memberCount: Int!
  projectCount: Int!
  id: UUID!
  createdDate: DateTime!
  updatedDate: DateTime!
}

type OrgByIdMember {
  user: OrgByIdUser!
  userId: UUID!
  orgId: UUID!
  role: OrgRole!
  organization: Organization
  id: UUID!
  createdDate: DateTime!
  updatedDate: DateTime!
}

type OrgByIdUser {
  id: UUID!
  name: String!
  username: String
  email: String
}

type OrgMember {
  user: User!
  organization: Project!
  userId: UUID!
  orgId: UUID!
  role: OrgRole!
  id: UUID!
  createdDate: DateTime!
  updatedDate: DateTime!
}

type OrgMemberDto {
  id: UUID!
  createdDate: DateTime!
  updatedDate: DateTime!
  lastActive: DateTime!
  name: String!
  email: String
  username: String
  localizationCode: String!
  emailVerified: Boolean!
  isAdmin: Boolean!
  locked: Boolean!
  canCreateProjects: Boolean!
  createdBy: OrgMemberDtoCreatedBy
}

type OrgMemberDtoCreatedBy {
  id: UUID!
  name: String!
}

type OrgMemberInvitedByEmail implements Error {
  message: String!
}

type OrgMemberRole {
  username: String!
  role: OrgRole!
}

type OrgProjects {
  org: Organization!
  project: Project!
  orgId: UUID!
  projectId: UUID!
  id: UUID!
  createdDate: DateTime!
  updatedDate: DateTime!
}

type Organization {
  createdDate: DateTime!
  id: UUID!
  members: [OrgMember!]! @authorize(policy: "AdminRequiredPolicy")
  projects: [Project!]! @authorize(policy: "AdminRequiredPolicy")
  name: String!
  memberCount: Int!
  projectCount: Int!
  updatedDate: DateTime!
}

type Project {
  code: String!
  createdDate: DateTime!
  id: UUID!
  users: [ProjectUsers!]!
  changesets: [Changeset!]!
  hasAbandonedTransactions: Boolean!
  isLanguageForgeProject: Boolean!
  parentId: UUID
  name: String!
  description: String
  retentionPolicy: RetentionPolicy!
  type: ProjectType!
  isConfidential: Boolean
  flexProjectMetadata: FlexProjectMetadata
  organizations: [Organization!]!
  lastCommit: DateTime
  deletedDate: DateTime
  resetStatus: ResetStatus!
  projectOrigin: ProjectMigrationStatus!
  migratedDate: DateTime
  userCount: Int!
  updatedDate: DateTime!
}

type ProjectCreatorsMustHaveEmail implements Error {
  message: String!
}

type ProjectMemberInvitedByEmail implements Error {
  message: String!
}

type ProjectMembersMustBeVerified implements Error {
  message: String!
}

type ProjectMembersMustBeVerifiedForRole implements Error {
  message: String!
}

type ProjectUsers {
  user: User!
  project: Project!
  userId: UUID!
  projectId: UUID!
  role: ProjectRole!
  id: UUID!
  createdDate: DateTime!
  updatedDate: DateTime!
}

type ProjectWritingSystems {
  vernacularWss: [FLExWsId!]!
  analysisWss: [FLExWsId!]!
}

type Query {
  myProjects(orderBy: [ProjectSortInput!]): [Project!]!
  projects(withDeleted: Boolean! = false where: ProjectFilterInput orderBy: [ProjectSortInput!]): [Project!]! @authorize(policy: "AdminRequiredPolicy")
  myDraftProjects(orderBy: [DraftProjectSortInput!]): [DraftProject!]!
  draftProjects(where: DraftProjectFilterInput orderBy: [DraftProjectSortInput!]): [DraftProject!]! @authorize(policy: "AdminRequiredPolicy")
  projectsByLangCodeAndOrg(input: ProjectsByLangCodeAndOrgInput! orderBy: [ProjectSortInput!]): [Project!]!
  projectsInMyOrg(input: ProjectsInMyOrgInput! where: ProjectFilterInput orderBy: [ProjectSortInput!]): [Project!]!
  projectById(projectId: UUID!): Project
  projectByCode(code: String!): Project
  draftProjectByCode(code: String!): DraftProject @authorize(policy: "AdminRequiredPolicy")
  orgs(where: OrganizationFilterInput orderBy: [OrganizationSortInput!]): [Organization!]!
  myOrgs(where: OrganizationFilterInput orderBy: [OrganizationSortInput!]): [Organization!]!
  usersInMyOrg(skip: Int take: Int where: UserFilterInput orderBy: [UserSortInput!]): UsersInMyOrgCollectionSegment
  orgById(orgId: UUID!): OrgById
  users(skip: Int take: Int where: UserFilterInput orderBy: [UserSortInput!]): UsersCollectionSegment @authorize(policy: "AdminRequiredPolicy")
  me: MeDto
  userById(userId: UUID!): MeDto @authorize(policy: "AllowAnyAudiencePolicy")
  orgMemberById(orgId: UUID! userId: UUID!): OrgMemberDto
  meAuth: LexAuthUser!
  testingThrowsError: LexAuthUser!
  isAdmin: IsAdminResponse! @authorize(policy: "AdminRequiredPolicy")
}

type RemoveProjectFromOrgPayload {
  organization: Organization
  errors: [RemoveProjectFromOrgError!]
}

type RemoveProjectMemberPayload {
  project: Project
}

type RequiredError implements Error {
  message: String!
}

type SetOrgMemberRolePayload {
  organization: Organization
  errors: [SetOrgMemberRoleError!]
}

type SetProjectConfidentialityPayload {
  project: Project
  errors: [SetProjectConfidentialityError!]
}

type SetRetentionPolicyPayload {
  project: Project
  errors: [SetRetentionPolicyError!]
}

type SetUserLockedPayload {
  user: User
  errors: [SetUserLockedError!]
}

type SoftDeleteProjectPayload {
  project: Project
  errors: [SoftDeleteProjectError!]
}

type UnauthorizedAccessError implements Error {
  message: String!
}

type UniqueValueError implements Error {
  message: String!
}

type UpdateLangProjectIdPayload {
  project: Project
  errors: [UpdateLangProjectIdError!]
}

type UpdateProjectLanguageListPayload {
  project: Project
  errors: [UpdateProjectLanguageListError!]
}

type UpdateProjectLexEntryCountPayload {
  project: Project
  errors: [UpdateProjectLexEntryCountError!]
}

type User {
  email: String @authorize(policy: "AdminRequiredPolicy")
  emailVerified: Boolean! @authorize(policy: "AdminRequiredPolicy")
  username: String @authorize(policy: "AdminRequiredPolicy")
  projects: [ProjectUsers!]! @authorize(policy: "AdminRequiredPolicy")
  locked: Boolean! @authorize(policy: "AdminRequiredPolicy")
  name: String!
  localizationCode: String!
  isAdmin: Boolean!
  passwordStrength: Int
  lastActive: DateTime!
  canCreateProjects: Boolean!
  createdById: UUID
  createdBy: User
  usersICreated: [User!]!
  googleId: String
  organizations: [OrgMember!]!
  id: UUID!
  createdDate: DateTime!
  updatedDate: DateTime!
}

type UserProjectRole {
  username: String!
  role: ProjectRole!
}

"A segment of a collection."
type UsersCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [User!]
  totalCount: Int!
}

"A segment of a collection."
type UsersInMyOrgCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [User!]
  totalCount: Int!
}

union AddProjectMemberError = NotFoundError | DbError | ProjectMembersMustBeVerified | ProjectMembersMustBeVerifiedForRole | ProjectMemberInvitedByEmail | InvalidEmailError | AlreadyExistsError

union AddProjectToOrgError = DbError | NotFoundError

union AskToJoinProjectError = NotFoundError | DbError | ProjectMembersMustBeVerified | ProjectMembersMustBeVerifiedForRole

union BulkAddOrgMembersError = NotFoundError | DbError | UnauthorizedAccessError

union BulkAddProjectMembersError = NotFoundError | InvalidEmailError | DbError

union ChangeOrgMemberRoleError = DbError | NotFoundError

union ChangeOrgNameError = NotFoundError | DbError | RequiredError

union ChangeProjectDescriptionError = NotFoundError | DbError

union ChangeProjectMemberRoleError = NotFoundError | DbError | ProjectMembersMustBeVerified | ProjectMembersMustBeVerifiedForRole

union ChangeProjectNameError = NotFoundError | DbError | RequiredError

union ChangeUserAccountByAdminError = NotFoundError | DbError | UniqueValueError

union ChangeUserAccountBySelfError = NotFoundError | DbError | UniqueValueError

union CreateGuestUserByAdminError = NotFoundError | DbError | UniqueValueError | RequiredError

union CreateOrganizationError = DbError

union CreateProjectError = DbError | AlreadyExistsError | ProjectCreatorsMustHaveEmail

union DeleteDraftProjectError = NotFoundError | DbError

union DeleteOrgError = DbError

union DeleteUserByAdminOrSelfError = NotFoundError | DbError

union LeaveProjectError = NotFoundError | LastMemberCantLeaveError

union RemoveProjectFromOrgError = DbError | NotFoundError

union SetOrgMemberRoleError = DbError | NotFoundError | OrgMemberInvitedByEmail

union SetProjectConfidentialityError = NotFoundError | DbError

union SetRetentionPolicyError = NotFoundError | DbError

union SetUserLockedError = NotFoundError

union SoftDeleteProjectError = NotFoundError | DbError

union UpdateLangProjectIdError = NotFoundError | DbError | UnauthorizedAccessError

union UpdateProjectLanguageListError = NotFoundError | DbError | UnauthorizedAccessError

union UpdateProjectLexEntryCountError = NotFoundError | DbError | UnauthorizedAccessError

input AddProjectMemberInput {
  projectId: UUID!
  usernameOrEmail: String
  userId: UUID
  role: ProjectRole!
  canInvite: Boolean!
}

input AddProjectToOrgInput {
  orgId: UUID!
  projectId: UUID!
}

input AskToJoinProjectInput {
  projectId: UUID!
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input BulkAddOrgMembersInput {
  orgId: UUID!
  usernames: [String!]!
  role: OrgRole!
}

input BulkAddProjectMembersInput {
  projectId: UUID
  usernames: [String!]!
  role: ProjectRole!
  passwordHash: String!
}

input ChangeOrgMemberRoleInput {
  orgId: UUID!
  userId: UUID!
  role: OrgRole
}

input ChangeOrgNameInput {
  orgId: UUID!
  name: String!
}

input ChangeProjectDescriptionInput {
  projectId: UUID!
  description: String!
}

input ChangeProjectMemberRoleInput {
  projectId: UUID!
  userId: UUID!
  role: ProjectRole!
}

input ChangeProjectNameInput {
  projectId: UUID!
  name: String!
}

input ChangeUserAccountByAdminInput {
  role: UserRole!
  userId: UUID!
  email: String
  name: String!
}

input ChangeUserAccountBySelfInput {
  locale: String!
  userId: UUID!
  email: String
  name: String!
}

input CreateGuestUserByAdminInput {
  email: String
  name: String!
  username: String
  locale: String!
  passwordHash: String!
  passwordStrength: Int!
}

input CreateOrganizationInput {
  name: String!
}

input CreateProjectInput {
  id: UUID
  name: String!
  description: String!
  code: String!
  type: ProjectType!
  retentionPolicy: RetentionPolicy!
  isConfidential: Boolean!
  projectManagerId: UUID
  orgId: UUID
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input DeleteDraftProjectInput {
  draftProjectId: UUID!
}

input DeleteOrgInput {
  orgId: UUID!
}

input DeleteUserByAdminOrSelfInput {
  userId: UUID!
}

input DraftProjectFilterInput {
  and: [DraftProjectFilterInput!]
  or: [DraftProjectFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  code: StringOperationFilterInput
  type: ProjectTypeOperationFilterInput
  retentionPolicy: RetentionPolicyOperationFilterInput
  projectManager: UserFilterInput
  projectManagerId: UuidOperationFilterInput
  orgId: UuidOperationFilterInput
  isConfidential: BooleanOperationFilterInput
  id: UuidOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  updatedDate: DateTimeOperationFilterInput
}

input DraftProjectSortInput {
  name: SortEnumType
  description: SortEnumType
  code: SortEnumType
  type: SortEnumType
  retentionPolicy: SortEnumType
  projectManager: UserSortInput
  projectManagerId: SortEnumType
  orgId: SortEnumType
  isConfidential: SortEnumType
  id: SortEnumType
  createdDate: SortEnumType
  updatedDate: SortEnumType
}

input FLExWsIdFilterInput {
  and: [FLExWsIdFilterInput!]
  or: [FLExWsIdFilterInput!]
  tag: StringOperationFilterInput
  isActive: BooleanOperationFilterInput
  isDefault: BooleanOperationFilterInput
}

input FlexProjectMetadataFilterInput {
  and: [FlexProjectMetadataFilterInput!]
  or: [FlexProjectMetadataFilterInput!]
  projectId: UuidOperationFilterInput
  lexEntryCount: IntOperationFilterInput
  langProjectId: UuidOperationFilterInput
  writingSystems: ProjectWritingSystemsFilterInput
}

input FlexProjectMetadataSortInput {
  projectId: SortEnumType
  lexEntryCount: SortEnumType
  langProjectId: SortEnumType
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input LeaveProjectInput {
  projectId: UUID!
}

input ListFilterInputTypeOfFLExWsIdFilterInput {
  all: FLExWsIdFilterInput
  none: FLExWsIdFilterInput
  some: FLExWsIdFilterInput
  any: Boolean
}

input ListFilterInputTypeOfOrgMemberFilterInput {
  all: OrgMemberFilterInput
  none: OrgMemberFilterInput
  some: OrgMemberFilterInput
  any: Boolean
}

input ListFilterInputTypeOfOrganizationFilterInput {
  all: OrganizationFilterInput
  none: OrganizationFilterInput
  some: OrganizationFilterInput
  any: Boolean
}

input ListFilterInputTypeOfProjectFilterInput {
  all: ProjectFilterInput
  none: ProjectFilterInput
  some: ProjectFilterInput
  any: Boolean
}

input ListFilterInputTypeOfProjectUsersFilterInput {
  all: ProjectUsersFilterInput
  none: ProjectUsersFilterInput
  some: ProjectUsersFilterInput
  any: Boolean
}

input ListFilterInputTypeOfUserFilterInput {
  all: UserFilterInput
  none: UserFilterInput
  some: UserFilterInput
  any: Boolean
}

input OrgMemberFilterInput {
  and: [OrgMemberFilterInput!]
  or: [OrgMemberFilterInput!]
  userId: UuidOperationFilterInput
  orgId: UuidOperationFilterInput
  role: OrgRoleOperationFilterInput
  user: UserFilterInput
  organization: OrganizationFilterInput
  id: UuidOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  updatedDate: DateTimeOperationFilterInput
}

input OrgRoleOperationFilterInput {
  eq: OrgRole
  neq: OrgRole
  in: [OrgRole!]
  nin: [OrgRole!]
}

input OrganizationFilterInput {
  and: [OrganizationFilterInput!]
  or: [OrganizationFilterInput!]
  name: StringOperationFilterInput
  members: ListFilterInputTypeOfOrgMemberFilterInput
  projects: ListFilterInputTypeOfProjectFilterInput
  memberCount: IntOperationFilterInput
  projectCount: IntOperationFilterInput
  id: UuidOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  updatedDate: DateTimeOperationFilterInput
}

input OrganizationSortInput {
  name: SortEnumType
  memberCount: SortEnumType
  projectCount: SortEnumType
  id: SortEnumType
  createdDate: SortEnumType
  updatedDate: SortEnumType
}

input ProjectFilterInput {
  and: [ProjectFilterInput!]
  or: [ProjectFilterInput!]
  parentId: UuidOperationFilterInput
  code: StringOperationFilterInput
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  retentionPolicy: RetentionPolicyOperationFilterInput
  type: ProjectTypeOperationFilterInput
  isConfidential: BooleanOperationFilterInput
  flexProjectMetadata: FlexProjectMetadataFilterInput
  users: ListFilterInputTypeOfProjectUsersFilterInput
  organizations: ListFilterInputTypeOfOrganizationFilterInput
  lastCommit: DateTimeOperationFilterInput
  deletedDate: DateTimeOperationFilterInput
  resetStatus: ResetStatusOperationFilterInput
  projectOrigin: ProjectMigrationStatusOperationFilterInput
  migratedDate: DateTimeOperationFilterInput
  userCount: IntOperationFilterInput
  id: UuidOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  updatedDate: DateTimeOperationFilterInput
}

input ProjectMigrationStatusOperationFilterInput {
  eq: ProjectMigrationStatus
  neq: ProjectMigrationStatus
  in: [ProjectMigrationStatus!]
  nin: [ProjectMigrationStatus!]
}

input ProjectRoleOperationFilterInput {
  eq: ProjectRole
  neq: ProjectRole
  in: [ProjectRole!]
  nin: [ProjectRole!]
}

input ProjectSortInput {
  parentId: SortEnumType
  code: SortEnumType
  name: SortEnumType
  description: SortEnumType
  retentionPolicy: SortEnumType
  type: SortEnumType
  isConfidential: SortEnumType
  flexProjectMetadata: FlexProjectMetadataSortInput
  lastCommit: SortEnumType
  deletedDate: SortEnumType
  resetStatus: SortEnumType
  projectOrigin: SortEnumType
  migratedDate: SortEnumType
  userCount: SortEnumType
  id: SortEnumType
  createdDate: SortEnumType
  updatedDate: SortEnumType
}

input ProjectTypeOperationFilterInput {
  eq: ProjectType
  neq: ProjectType
  in: [ProjectType!]
  nin: [ProjectType!]
}

input ProjectUsersFilterInput {
  and: [ProjectUsersFilterInput!]
  or: [ProjectUsersFilterInput!]
  userId: UuidOperationFilterInput
  projectId: UuidOperationFilterInput
  role: ProjectRoleOperationFilterInput
  user: UserFilterInput
  project: ProjectFilterInput
  id: UuidOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  updatedDate: DateTimeOperationFilterInput
}

input ProjectWritingSystemsFilterInput {
  and: [ProjectWritingSystemsFilterInput!]
  or: [ProjectWritingSystemsFilterInput!]
  vernacularWss: ListFilterInputTypeOfFLExWsIdFilterInput
  analysisWss: ListFilterInputTypeOfFLExWsIdFilterInput
}

input ProjectsByLangCodeAndOrgInput {
  orgId: UUID!
  langCode: String!
}

input ProjectsInMyOrgInput {
  orgId: UUID!
}

input RemoveProjectFromOrgInput {
  orgId: UUID!
  projectId: UUID!
}

input RemoveProjectMemberInput {
  projectId: UUID!
  userId: UUID!
}

input ResetStatusOperationFilterInput {
  eq: ResetStatus
  neq: ResetStatus
  in: [ResetStatus!]
  nin: [ResetStatus!]
}

input RetentionPolicyOperationFilterInput {
  eq: RetentionPolicy
  neq: RetentionPolicy
  in: [RetentionPolicy!]
  nin: [RetentionPolicy!]
}

input SetOrgMemberRoleInput {
  orgId: UUID!
  role: OrgRole!
  emailOrUsername: String!
  canInvite: Boolean!
}

input SetProjectConfidentialityInput {
  projectId: UUID!
  isConfidential: Boolean!
}

input SetRetentionPolicyInput {
  projectId: UUID!
  retentionPolicy: RetentionPolicy!
}

input SetUserLockedInput {
  userId: UUID!
  locked: Boolean!
}

input SoftDeleteProjectInput {
  projectId: UUID!
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
  icontains: String
  ieq: String
}

input UpdateLangProjectIdInput {
  code: String!
}

input UpdateProjectLanguageListInput {
  code: String!
}

input UpdateProjectLexEntryCountInput {
  code: String!
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  name: StringOperationFilterInput
  email: StringOperationFilterInput
  localizationCode: StringOperationFilterInput
  isAdmin: BooleanOperationFilterInput
  passwordHash: StringOperationFilterInput
  salt: StringOperationFilterInput
  passwordStrength: IntOperationFilterInput
  lastActive: DateTimeOperationFilterInput
  emailVerified: BooleanOperationFilterInput
  canCreateProjects: BooleanOperationFilterInput
  createdById: UuidOperationFilterInput
  createdBy: UserFilterInput
  usersICreated: ListFilterInputTypeOfUserFilterInput
  locked: BooleanOperationFilterInput
  username: StringOperationFilterInput
  googleId: StringOperationFilterInput
  projects: ListFilterInputTypeOfProjectUsersFilterInput
  organizations: ListFilterInputTypeOfOrgMemberFilterInput
  id: UuidOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  updatedDate: DateTimeOperationFilterInput
}

input UserSortInput {
  name: SortEnumType
  email: SortEnumType
  localizationCode: SortEnumType
  isAdmin: SortEnumType
  passwordHash: SortEnumType
  salt: SortEnumType
  passwordStrength: SortEnumType
  lastActive: SortEnumType
  emailVerified: SortEnumType
  canCreateProjects: SortEnumType
  createdById: SortEnumType
  createdBy: UserSortInput
  locked: SortEnumType
  username: SortEnumType
  googleId: SortEnumType
  id: SortEnumType
  createdDate: SortEnumType
  updatedDate: SortEnumType
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

enum CreateProjectResult {
  CREATED
  REQUESTED
}

enum DbErrorCode {
  UNKNOWN
  DUPLICATE
}

enum LexboxAudience {
  UNKNOWN
  LEXBOX_API
  REGISTER_ACCOUNT
  FORGOT_PASSWORD
  SEND_AND_RECEIVE
  SEND_AND_RECEIVE_REFRESH
}

enum OrgRole {
  UNKNOWN
  ADMIN
  USER
}

enum ProjectMigrationStatus {
  UNKNOWN
  MIGRATED
  MIGRATING
  PRIVATE_REDMINE
  PUBLIC_REDMINE
}

enum ProjectRole {
  UNKNOWN
  MANAGER
  EDITOR
}

enum ProjectType {
  UNKNOWN
  FL_EX
  WE_SAY
  ONE_STORY_EDITOR
  OUR_WORD
  ADAPT_IT
}

enum ResetStatus {
  NONE
  IN_PROGRESS
}

enum RetentionPolicy {
  UNKNOWN
  VERIFIED
  TEST
  DEV
  TRAINING
}

enum SortEnumType {
  ASC
  DESC
}

enum UserRole {
  ADMIN
  USER
}

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

scalar UUID

scalar timestamptz @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar uuid