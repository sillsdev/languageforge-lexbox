directive @allowAnonymous repeatable on FIELD_DEFINITION

directive @authorize(
  """
  Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase.
  """
  apply: ApplyPolicy! = BEFORE_RESOLVER

  """
  The name of the authorization policy that determines access to the annotated resource.
  """
  policy: String

  """Roles that are allowed to access the annotated resource."""
  roles: [String!]
) repeatable on FIELD_DEFINITION | OBJECT

union AddProjectMemberError = DbError | NotFoundError

input AddProjectMemberInput {
  projectId: UUID!
  role: ProjectRole!
  userEmail: String!
}

type AddProjectMemberPayload {
  errors: [AddProjectMemberError!]
  project: Project
}

enum ApplyPolicy {
  AFTER_RESOLVER
  BEFORE_RESOLVER
  VALIDATION
}

type AuthUserProject {
  code: String!
  projectId: UUID!
  role: ProjectRole!
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

union ChangeProjectDescriptionError = DbError | NotFoundError

input ChangeProjectDescriptionInput {
  description: String!
  projectId: UUID!
}

type ChangeProjectDescriptionPayload {
  errors: [ChangeProjectDescriptionError!]
  project: Project
}

union ChangeProjectMemberRoleError = DbError | NotFoundError

input ChangeProjectMemberRoleInput {
  projectId: UUID!
  role: ProjectRole!
  userId: UUID!
}

type ChangeProjectMemberRolePayload {
  errors: [ChangeProjectMemberRoleError!]
  projectUsers: ProjectUsers
}

union ChangeProjectNameError = DbError | NotFoundError | RequiredError

input ChangeProjectNameInput {
  name: String!
  projectId: UUID!
}

type ChangeProjectNamePayload {
  errors: [ChangeProjectNameError!]
  project: Project
}

union ChangeUserAccountByAdminError = DbError | InvalidFormatError | NotFoundError

type ChangeUserAccountByAdminPayload {
  errors: [ChangeUserAccountByAdminError!]
  user: User
}

union ChangeUserAccountDataError = DbError | InvalidFormatError | NotFoundError

input ChangeUserAccountDataInput {
  email: String!
  name: String!
  userId: UUID!
}

type ChangeUserAccountDataPayload {
  errors: [ChangeUserAccountDataError!]
  user: User
}

type Changeset {
  branch: String!
  date: [Float!]!
  desc: String!
  node: String!
  parents: [String!]!
  phase: String!
  tags: [String!]!
  user: String!
}

union CreateProjectError = DbError

input CreateProjectInput {
  code: String!
  description: String
  id: UUID
  name: String!
  retentionPolicy: RetentionPolicy!
  type: ProjectType!
}

type CreateProjectPayload {
  errors: [CreateProjectError!]
  project: Project
}

scalar DateTime @specifiedBy(url: "https://www.graphql-scalars.com/date-time")

input DateTimeOperationFilterInput {
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  neq: DateTime
  ngt: DateTime
  ngte: DateTime
  nin: [DateTime]
  nlt: DateTime
  nlte: DateTime
}

type DbError implements Error {
  code: DbErrorCode!
  message: String!
}

enum DbErrorCode {
  DUPLICATE
  UNKNOWN
}

union DeleteUserByAdminError = DbError | NotFoundError

input DeleteUserByAdminInput {
  userId: UUID!
}

type DeleteUserByAdminPayload {
  errors: [DeleteUserByAdminError!]
  user: User
}

interface Error {
  message: String!
}

type InvalidFormatError implements Error {
  message: String!
}

type IsAdminResponse {
  value: Boolean!
}

type LexAuthUser {
  canManageProject(projectId: UUID!): Boolean!
  email: String!
  emailVerificationRequired: Boolean
  id: UUID!
  name: String!
  projects: [AuthUserProject!]!
  role: UserRole!
}

input ListFilterInputTypeOfProjectUsersFilterInput {
  all: ProjectUsersFilterInput
  any: Boolean
  none: ProjectUsersFilterInput
  some: ProjectUsersFilterInput
}

type Mutation {
  addProjectMember(input: AddProjectMemberInput!): AddProjectMemberPayload!
  changeProjectDescription(input: ChangeProjectDescriptionInput!): ChangeProjectDescriptionPayload!
  changeProjectMemberRole(input: ChangeProjectMemberRoleInput!): ChangeProjectMemberRolePayload!
  changeProjectName(input: ChangeProjectNameInput!): ChangeProjectNamePayload!
  changeUserAccountByAdmin(input: ChangeUserAccountDataInput!): ChangeUserAccountByAdminPayload!
  changeUserAccountData(input: ChangeUserAccountDataInput!): ChangeUserAccountDataPayload!
  createProject(input: CreateProjectInput!): CreateProjectPayload!
  deleteUserByAdmin(input: DeleteUserByAdminInput!): DeleteUserByAdminPayload!
  removeProjectMember(input: RemoveProjectMemberInput!): Project
}

type NotFoundError implements Error {
  message: String!
}

type Project {
  changesets: [Changeset!]!
  code: String!
  createdDate: DateTime!
  description: String
  id: UUID!
  lastCommit: DateTime
  name: String!
  retentionPolicy: RetentionPolicy!
  type: ProjectType!
  updatedDate: DateTime!
  users: [ProjectUsers!]!
}

input ProjectFilterInput {
  and: [ProjectFilterInput!]
  code: StringOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  description: StringOperationFilterInput
  id: UuidOperationFilterInput
  lastCommit: DateTimeOperationFilterInput
  name: StringOperationFilterInput
  or: [ProjectFilterInput!]
  retentionPolicy: RetentionPolicyOperationFilterInput
  type: ProjectTypeOperationFilterInput
  updatedDate: DateTimeOperationFilterInput
  users: ListFilterInputTypeOfProjectUsersFilterInput
}

enum ProjectRole {
  EDITOR
  MANAGER
  UNKNOWN
}

input ProjectRoleOperationFilterInput {
  eq: ProjectRole
  in: [ProjectRole!]
  neq: ProjectRole
  nin: [ProjectRole!]
}

input ProjectSortInput {
  code: SortEnumType
  createdDate: SortEnumType
  description: SortEnumType
  id: SortEnumType
  lastCommit: SortEnumType
  name: SortEnumType
  retentionPolicy: SortEnumType
  type: SortEnumType
  updatedDate: SortEnumType
}

enum ProjectType {
  FL_EX
  ONE_STORY_EDITOR
  OUR_WORD
  UNKNOWN
  WE_SAY
}

input ProjectTypeOperationFilterInput {
  eq: ProjectType
  in: [ProjectType!]
  neq: ProjectType
  nin: [ProjectType!]
}

type ProjectUsers {
  createdDate: DateTime!
  id: UUID!
  project: Project!
  projectId: UUID!
  role: ProjectRole!
  updatedDate: DateTime!
  user: User!
  userId: UUID!
}

input ProjectUsersFilterInput {
  and: [ProjectUsersFilterInput!]
  createdDate: DateTimeOperationFilterInput
  id: UuidOperationFilterInput
  or: [ProjectUsersFilterInput!]
  project: ProjectFilterInput
  projectId: UuidOperationFilterInput
  role: ProjectRoleOperationFilterInput
  updatedDate: DateTimeOperationFilterInput
  user: UserFilterInput
  userId: UuidOperationFilterInput
}

type Query {
  isAdmin: IsAdminResponse!
  me: LexAuthUser!
  myProjects(orderBy: [ProjectSortInput!]): [Project!]!
  projectByCode(code: String!): Project
  projects(orderBy: [ProjectSortInput!], where: ProjectFilterInput): [Project!]!
  users(orderBy: [UserSortInput!], where: UserFilterInput): [User!]!
}

input RemoveProjectMemberInput {
  projectId: UUID!
  userId: UUID!
}

type RequiredError implements Error {
  message: String!
}

enum RetentionPolicy {
  DEV
  TEST
  TRAINING
  UNKNOWN
  VERIFIED
}

input RetentionPolicyOperationFilterInput {
  eq: RetentionPolicy
  in: [RetentionPolicy!]
  neq: RetentionPolicy
  nin: [RetentionPolicy!]
}

enum SortEnumType {
  ASC
  DESC
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  contains: String
  endsWith: String
  eq: String
  in: [String]
  ncontains: String
  nendsWith: String
  neq: String
  nin: [String]
  nstartsWith: String
  or: [StringOperationFilterInput!]
  startsWith: String
}

scalar UUID

type User {
  createdDate: DateTime!
  email: String!
  emailVerified: Boolean!
  id: UUID!
  isAdmin: Boolean!
  name: String!
  passwordHash: String!
  projects: [ProjectUsers!]!
  salt: String!
  updatedDate: DateTime!
  username: String
}

input UserFilterInput {
  and: [UserFilterInput!]
  createdDate: DateTimeOperationFilterInput
  email: StringOperationFilterInput
  emailVerified: BooleanOperationFilterInput
  id: UuidOperationFilterInput
  isAdmin: BooleanOperationFilterInput
  name: StringOperationFilterInput
  or: [UserFilterInput!]
  passwordHash: StringOperationFilterInput
  projects: ListFilterInputTypeOfProjectUsersFilterInput
  salt: StringOperationFilterInput
  updatedDate: DateTimeOperationFilterInput
  username: StringOperationFilterInput
}

enum UserRole {
  ADMIN
  USER
}

input UserSortInput {
  createdDate: SortEnumType
  email: SortEnumType
  emailVerified: SortEnumType
  id: SortEnumType
  isAdmin: SortEnumType
  name: SortEnumType
  passwordHash: SortEnumType
  salt: SortEnumType
  updatedDate: SortEnumType
  username: SortEnumType
}

input UuidOperationFilterInput {
  eq: UUID
  gt: UUID
  gte: UUID
  in: [UUID]
  lt: UUID
  lte: UUID
  neq: UUID
  ngt: UUID
  ngte: UUID
  nin: [UUID]
  nlt: UUID
  nlte: UUID
}

scalar timestamptz @specifiedBy(url: "https://www.graphql-scalars.com/date-time")

scalar uuid