schema {
  query: Query
  mutation: Mutation
}

interface Error {
  message: String!
}

type AddProjectMemberPayload {
  project: Project
  errors: [AddProjectMemberError!]
}

type AddProjectToOrgPayload {
  organization: Organization
  errors: [AddProjectToOrgError!]
}

type AddProjectsToOrgPayload {
  orgById: OrgById
  errors: [AddProjectsToOrgError!]
}

type AlreadyExistsError implements Error {
  message: String!
}

type AskToJoinProjectPayload {
  project: Project
  errors: [AskToJoinProjectError!]
}

type AuthUserOrg {
  role: OrgRole!
  orgId: UUID!
}

type AuthUserProject {
  role: ProjectRole!
  projectId: UUID!
}

type BulkAddOrgMembersPayload {
  bulkAddOrgMembersResult: BulkAddOrgMembersResult
  errors: [BulkAddOrgMembersError!]
}

type BulkAddOrgMembersResult {
  addedMembers: [OrgMemberRole!]!
  notFoundMembers: [OrgMemberRole!]!
  existingMembers: [OrgMemberRole!]!
}

type BulkAddProjectMembersPayload {
  bulkAddProjectMembersResult: BulkAddProjectMembersResult
  errors: [BulkAddProjectMembersError!]
}

type BulkAddProjectMembersResult {
  addedMembers: [UserProjectRole!]!
  createdMembers: [UserProjectRole!]!
  existingMembers: [UserProjectRole!]!
}

type ChangeOrgMemberRolePayload {
  organization: Organization
  errors: [ChangeOrgMemberRoleError!]
}

type ChangeOrgNamePayload {
  organization: Organization
  errors: [ChangeOrgNameError!]
}

type ChangeProjectDescriptionPayload {
  project: Project
  errors: [ChangeProjectDescriptionError!]
}

type ChangeProjectMemberRolePayload {
  projectUsers: ProjectUsers
  errors: [ChangeProjectMemberRoleError!]
}

type ChangeProjectNamePayload {
  project: Project
  errors: [ChangeProjectNameError!]
}

type ChangeUserAccountByAdminPayload {
  user: User
  errors: [ChangeUserAccountByAdminError!]
}

type ChangeUserAccountBySelfPayload {
  meDto: MeDto
  errors: [ChangeUserAccountBySelfError!]
}

type Changeset {
  node: String!
  rev: Int!
  date: [Float!]!
  desc: String!
  branch: String!
  tags: [String!]!
  user: String!
  phase: String!
  parents: [String!]!
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

type CreateGuestUserByAdminPayload {
  lexAuthUser: LexAuthUser
  errors: [CreateGuestUserByAdminError!]
}

type CreateOrganizationPayload {
  organization: Organization
  errors: [CreateOrganizationError!]
}

type CreateProjectPayload {
  createProjectResponse: CreateProjectResponse
  errors: [CreateProjectError!]
}

type CreateProjectResponse {
  id: UUID!
  result: CreateProjectResult!
}

type DbError implements Error {
  message: String!
  code: DbErrorCode!
}

type DeleteDraftProjectPayload {
  draftProject: DraftProject
  errors: [DeleteDraftProjectError!]
}

type DeleteOrgPayload {
  organization: Organization
  errors: [DeleteOrgError!]
}

type DeleteUserByAdminOrSelfPayload {
  user: User
  errors: [DeleteUserByAdminOrSelfError!]
}

type DraftProject {
  name: String!
  description: String!
  code: String!
  type: ProjectType!
  retentionPolicy: RetentionPolicy!
  projectManager: User
  projectManagerId: UUID
  orgId: UUID
  isConfidential: Boolean
  id: UUID!
  createdDate: DateTime!
  updatedDate: DateTime!
}

type FLExWsId {
  tag: String!
  isActive: Boolean!
  isDefault: Boolean!
}

type FlexProjectMetadata {
  projectId: UUID!
  lexEntryCount: Int
  langProjectId: UUID
  writingSystems: ProjectWritingSystems
  flexModelVersion: Int
}

type InvalidEmailError implements Error {
  message: String!
  address: String!
}

type InvalidOperationError implements Error {
  message: String!
}

type IsAdminResponse {
  value: Boolean!
}

type LastMemberCantLeaveError implements Error {
  message: String!
}

type LeaveOrgPayload {
  organization: Organization
  errors: [LeaveOrgError!]
}

type LeaveProjectPayload {
  project: Project
  errors: [LeaveProjectError!]
}

type LexAuthUser {
  isProjectMember(projectId: UUID! role: ProjectRole): Boolean!
  hasFeature(feature: FeatureFlag!): Boolean!
  id: UUID!
  updatedDate: Long!
  audience: LexboxAudience!
  email: String
  username: String
  name: String!
  role: UserRole!
  isAdmin: Boolean!
  projects: [AuthUserProject!]!
  orgs: [AuthUserOrg!]!
  featureFlags: [FeatureFlag!]!
  projectsJson: String!
  locked: Boolean
  emailVerificationRequired: Boolean
  canCreateProjects: Boolean
  createdByAdmin: Boolean
  locale: String!
}

type MeDto {
  id: UUID!
  name: String!
  email: String
  locale: String!
}

type Mutation {
  createOrganization(input: CreateOrganizationInput!): CreateOrganizationPayload! @cost(weight: "10")
  deleteOrg(input: DeleteOrgInput!): DeleteOrgPayload! @authorize(policy: "AdminRequiredPolicy") @cost(weight: "10")
  addProjectToOrg(input: AddProjectToOrgInput!): AddProjectToOrgPayload! @cost(weight: "10")
  addProjectsToOrg(input: AddProjectsToOrgInput!): AddProjectsToOrgPayload! @cost(weight: "10")
  removeProjectFromOrg(input: RemoveProjectFromOrgInput!): RemoveProjectFromOrgPayload! @cost(weight: "10")
  setOrgMemberRole(input: SetOrgMemberRoleInput!): SetOrgMemberRolePayload! @cost(weight: "10")
  changeOrgMemberRole(input: ChangeOrgMemberRoleInput!): ChangeOrgMemberRolePayload! @cost(weight: "10")
  leaveOrg(input: LeaveOrgInput!): LeaveOrgPayload! @cost(weight: "10")
  bulkAddOrgMembers(input: BulkAddOrgMembersInput!): BulkAddOrgMembersPayload! @cost(weight: "10")
  changeOrgName(input: ChangeOrgNameInput!): ChangeOrgNamePayload! @cost(weight: "10")
  createProject(input: CreateProjectInput!): CreateProjectPayload! @authorize(policy: "VerifiedEmailRequiredPolicy") @cost(weight: "10")
  addProjectMember(input: AddProjectMemberInput!): AddProjectMemberPayload! @cost(weight: "10")
  bulkAddProjectMembers(input: BulkAddProjectMembersInput!): BulkAddProjectMembersPayload! @cost(weight: "10")
  changeProjectMemberRole(input: ChangeProjectMemberRoleInput!): ChangeProjectMemberRolePayload! @cost(weight: "10")
  askToJoinProject(input: AskToJoinProjectInput!): AskToJoinProjectPayload! @cost(weight: "10")
  changeProjectName(input: ChangeProjectNameInput!): ChangeProjectNamePayload! @cost(weight: "10")
  changeProjectDescription(input: ChangeProjectDescriptionInput!): ChangeProjectDescriptionPayload! @cost(weight: "10")
  setProjectConfidentiality(input: SetProjectConfidentialityInput!): SetProjectConfidentialityPayload! @cost(weight: "10")
  setRetentionPolicy(input: SetRetentionPolicyInput!): SetRetentionPolicyPayload! @cost(weight: "10")
  updateProjectRepoSizeInKb(input: UpdateProjectRepoSizeInKbInput!): UpdateProjectRepoSizeInKbPayload! @cost(weight: "10")
  updateProjectLexEntryCount(input: UpdateProjectLexEntryCountInput!): UpdateProjectLexEntryCountPayload! @cost(weight: "10")
  updateProjectLanguageList(input: UpdateProjectLanguageListInput!): UpdateProjectLanguageListPayload! @cost(weight: "10")
  updateLangProjectId(input: UpdateLangProjectIdInput!): UpdateLangProjectIdPayload! @cost(weight: "10")
  updateFLExModelVersion(input: UpdateFLExModelVersionInput!): UpdateFLExModelVersionPayload! @cost(weight: "10")
  leaveProject(input: LeaveProjectInput!): LeaveProjectPayload! @cost(weight: "10")
  removeProjectMember(input: RemoveProjectMemberInput!): RemoveProjectMemberPayload! @cost(weight: "10")
  deleteDraftProject(input: DeleteDraftProjectInput!): DeleteDraftProjectPayload! @authorize(policy: "AdminRequiredPolicy") @cost(weight: "10")
  softDeleteProject(input: SoftDeleteProjectInput!): SoftDeleteProjectPayload! @cost(weight: "10")
  changeUserAccountBySelf(input: ChangeUserAccountBySelfInput!): ChangeUserAccountBySelfPayload! @cost(weight: "10")
  changeUserAccountByAdmin(input: ChangeUserAccountByAdminInput!): ChangeUserAccountByAdminPayload! @authorize(policy: "AdminRequiredPolicy") @cost(weight: "10")
  sendNewVerificationEmailByAdmin(input: SendNewVerificationEmailByAdminInput!): SendNewVerificationEmailByAdminPayload! @authorize(policy: "AdminRequiredPolicy") @cost(weight: "10")
  createGuestUserByAdmin(input: CreateGuestUserByAdminInput!): CreateGuestUserByAdminPayload! @cost(weight: "10")
  deleteUserByAdminOrSelf(input: DeleteUserByAdminOrSelfInput!): DeleteUserByAdminOrSelfPayload! @cost(weight: "10")
  setUserLocked(input: SetUserLockedInput!): SetUserLockedPayload! @authorize(policy: "AdminRequiredPolicy") @cost(weight: "10")
}

type NotFoundError implements Error {
  message: String!
  type: String!
}

type OrgById {
  id: UUID!
  members: [OrgByIdMember!]!
  name: String!
  projects: [Project!]!
  memberCount: Int!
  projectCount: Int!
  createdDate: DateTime!
  updatedDate: DateTime!
}

type OrgByIdMember {
  userId: UUID!
  user: OrgByIdUser!
  orgId: UUID!
  role: OrgRole!
  organization: Organization
  id: UUID!
  createdDate: DateTime!
  updatedDate: DateTime!
}

type OrgByIdUser {
  id: UUID!
  name: String!
  username: String
  email: String
}

type OrgMember {
  user: User!
  organization: Project!
  userId: UUID!
  orgId: UUID!
  role: OrgRole!
  id: UUID!
  createdDate: DateTime!
  updatedDate: DateTime!
}

type OrgMemberDto {
  id: UUID!
  createdDate: DateTime!
  updatedDate: DateTime!
  lastActive: DateTime!
  name: String!
  email: String
  username: String
  localizationCode: String!
  emailVerified: Boolean!
  isAdmin: Boolean!
  locked: Boolean!
  canCreateProjects: Boolean!
  createdBy: OrgMemberDtoCreatedBy
}

type OrgMemberDtoCreatedBy {
  id: UUID!
  name: String!
}

type OrgMemberInvitedByEmail implements Error {
  message: String!
}

type OrgMemberRole {
  username: String!
  role: OrgRole!
}

type OrgProjects {
  org: Organization!
  project: Project!
  orgId: UUID!
  projectId: UUID!
  id: UUID!
  createdDate: DateTime!
  updatedDate: DateTime!
}

type Organization {
  createdDate: DateTime!
  id: UUID!
  members: [OrgMember!]! @authorize(policy: "AdminRequiredPolicy")
  projects: [Project!]! @authorize(policy: "AdminRequiredPolicy")
  name: String!
  memberCount: Int!
  projectCount: Int!
  updatedDate: DateTime!
}

type Project {
  code: String!
  createdDate: DateTime!
  id: UUID!
  users: [ProjectUsers!]!
  changesets: [Changeset!]! @cost(weight: "10")
  hasAbandonedTransactions: Boolean!
  isLanguageForgeProject: Boolean! @cost(weight: "10")
  parentId: UUID
  name: String!
  description: String
  retentionPolicy: RetentionPolicy!
  type: ProjectType!
  isConfidential: Boolean
  flexProjectMetadata: FlexProjectMetadata
  organizations: [Organization!]!
  lastCommit: DateTime
  repoSizeInKb: Int
  deletedDate: DateTime
  resetStatus: ResetStatus!
  projectOrigin: ProjectMigrationStatus!
  migratedDate: DateTime
  userCount: Int!
  updatedDate: DateTime!
}

type ProjectCreatorsMustHaveEmail implements Error {
  message: String!
}

type ProjectHasNoManagers implements Error {
  message: String!
}

type ProjectMemberInvitedByEmail implements Error {
  message: String!
}

type ProjectMembersMustBeVerified implements Error {
  message: String!
}

type ProjectMembersMustBeVerifiedForRole implements Error {
  message: String!
}

type ProjectUsers {
  userId: UUID!
  user: User!
  project: Project!
  projectId: UUID!
  role: ProjectRole!
  id: UUID!
  createdDate: DateTime!
  updatedDate: DateTime!
}

type ProjectWritingSystems {
  vernacularWss: [FLExWsId!]!
  analysisWss: [FLExWsId!]!
}

type Query {
  myProjects(orderBy: [ProjectSortInput!] @cost(weight: "10") where: ProjectFilterInput @cost(weight: "10")): [Project!]! @cost(weight: "10")
  projects(withDeleted: Boolean! = false where: ProjectFilterInput @cost(weight: "10") orderBy: [ProjectSortInput!] @cost(weight: "10")): [Project!]! @authorize(policy: "AdminRequiredPolicy") @cost(weight: "10")
  myDraftProjects(orderBy: [DraftProjectSortInput!] @cost(weight: "10")): [DraftProject!]! @cost(weight: "10")
  draftProjects(where: DraftProjectFilterInput @cost(weight: "10") orderBy: [DraftProjectSortInput!] @cost(weight: "10")): [DraftProject!]! @authorize(policy: "AdminRequiredPolicy") @cost(weight: "10")
  projectsByLangCodeAndOrg(input: ProjectsByLangCodeAndOrgInput! orderBy: [ProjectSortInput!] @cost(weight: "10")): [Project!]! @cost(weight: "10")
  projectsInMyOrg(input: ProjectsInMyOrgInput! where: ProjectFilterInput @cost(weight: "10") orderBy: [ProjectSortInput!] @cost(weight: "10")): [Project!]! @cost(weight: "10")
  projectById(projectId: UUID!): Project @cost(weight: "10")
  projectByCode(code: String!): Project @cost(weight: "10")
  orgs(where: OrganizationFilterInput @cost(weight: "10") orderBy: [OrganizationSortInput!] @cost(weight: "10")): [Organization!]! @cost(weight: "10")
  myOrgs(where: OrganizationFilterInput @cost(weight: "10") orderBy: [OrganizationSortInput!] @cost(weight: "10")): [Organization!]! @cost(weight: "10")
  usersICanSee(skip: Int take: Int where: UserFilterInput @cost(weight: "10") orderBy: [UserSortInput!] @cost(weight: "10")): UsersICanSeeCollectionSegment @listSize(assumedSize: 1000, slicingArguments: [ "take" ], sizedFields: [ "items" ]) @cost(weight: "10")
  orgById(orgId: UUID!): OrgById @cost(weight: "10")
  users(skip: Int take: Int where: UserFilterInput @cost(weight: "10") orderBy: [UserSortInput!] @cost(weight: "10")): UsersCollectionSegment @authorize(policy: "AdminRequiredPolicy") @listSize(assumedSize: 1000, slicingArguments: [ "take" ], sizedFields: [ "items" ]) @cost(weight: "10")
  me: MeDto @cost(weight: "10")
  orgMemberById(orgId: UUID! userId: UUID!): OrgMemberDto @cost(weight: "10")
  meAuth: LexAuthUser!
  testingThrowsError: LexAuthUser!
  isAdmin: IsAdminResponse! @authorize(policy: "AdminRequiredPolicy")
}

type RemoveProjectFromOrgPayload {
  organization: Organization
  errors: [RemoveProjectFromOrgError!]
}

type RemoveProjectMemberPayload {
  project: Project
}

type RequiredError implements Error {
  message: String!
}

type SendNewVerificationEmailByAdminPayload {
  user: User
  errors: [SendNewVerificationEmailByAdminError!]
}

type SetOrgMemberRolePayload {
  organization: Organization
  errors: [SetOrgMemberRoleError!]
}

type SetProjectConfidentialityPayload {
  project: Project
  errors: [SetProjectConfidentialityError!]
}

type SetRetentionPolicyPayload {
  project: Project
  errors: [SetRetentionPolicyError!]
}

type SetUserLockedPayload {
  user: User
  errors: [SetUserLockedError!]
}

type SoftDeleteProjectPayload {
  project: Project
  errors: [SoftDeleteProjectError!]
}

type UnauthorizedAccessError implements Error {
  message: String!
}

type UniqueValueError implements Error {
  message: String!
}

type UpdateFLExModelVersionPayload {
  project: Project
  errors: [UpdateFLExModelVersionError!]
}

type UpdateLangProjectIdPayload {
  project: Project
  errors: [UpdateLangProjectIdError!]
}

type UpdateProjectLanguageListPayload {
  project: Project
  errors: [UpdateProjectLanguageListError!]
}

type UpdateProjectLexEntryCountPayload {
  project: Project
  errors: [UpdateProjectLexEntryCountError!]
}

type UpdateProjectRepoSizeInKbPayload {
  project: Project
  errors: [UpdateProjectRepoSizeInKbError!]
}

type User {
  email: String @authorize(policy: "AdminRequiredPolicy")
  emailVerified: Boolean! @authorize(policy: "AdminRequiredPolicy")
  username: String @authorize(policy: "AdminRequiredPolicy")
  projects: [ProjectUsers!]! @authorize(policy: "AdminRequiredPolicy")
  locked: Boolean! @authorize(policy: "AdminRequiredPolicy")
  name: String!
  localizationCode: String!
  isAdmin: Boolean!
  passwordStrength: Int
  lastActive: DateTime!
  canCreateProjects: Boolean!
  createdById: UUID
  createdBy: User
  usersICreated: [User!]!
  organizations: [OrgMember!]!
  featureFlags: [FeatureFlag!]!
  id: UUID!
  createdDate: DateTime!
  updatedDate: DateTime!
}

type UserProjectRole {
  username: String!
  role: ProjectRole!
}

"A segment of a collection."
type UsersCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [User!]
  totalCount: Int! @cost(weight: "10")
}

"A segment of a collection."
type UsersICanSeeCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [User!]
  totalCount: Int! @cost(weight: "10")
}

union AddProjectMemberError = NotFoundError | DbError | ProjectMembersMustBeVerified | ProjectMembersMustBeVerifiedForRole | ProjectMemberInvitedByEmail | InvalidEmailError | AlreadyExistsError

union AddProjectToOrgError = DbError | NotFoundError

union AddProjectsToOrgError = DbError | NotFoundError

union AskToJoinProjectError = NotFoundError | DbError | ProjectMembersMustBeVerified | ProjectMembersMustBeVerifiedForRole | ProjectHasNoManagers

union BulkAddOrgMembersError = NotFoundError | DbError | UnauthorizedAccessError

union BulkAddProjectMembersError = NotFoundError | InvalidEmailError | DbError

union ChangeOrgMemberRoleError = DbError | NotFoundError

union ChangeOrgNameError = NotFoundError | DbError | RequiredError

union ChangeProjectDescriptionError = NotFoundError | DbError

union ChangeProjectMemberRoleError = NotFoundError | DbError | ProjectMembersMustBeVerified | ProjectMembersMustBeVerifiedForRole

union ChangeProjectNameError = NotFoundError | DbError | RequiredError

union ChangeUserAccountByAdminError = NotFoundError | DbError | UniqueValueError

union ChangeUserAccountBySelfError = NotFoundError | DbError | UniqueValueError

union CreateGuestUserByAdminError = NotFoundError | DbError | UniqueValueError | RequiredError

union CreateOrganizationError = DbError

union CreateProjectError = DbError | AlreadyExistsError | ProjectCreatorsMustHaveEmail

union DeleteDraftProjectError = NotFoundError | DbError

union DeleteOrgError = DbError

union DeleteUserByAdminOrSelfError = NotFoundError | DbError

union LeaveOrgError = NotFoundError | LastMemberCantLeaveError

union LeaveProjectError = NotFoundError | LastMemberCantLeaveError

union RemoveProjectFromOrgError = DbError | NotFoundError

union SendNewVerificationEmailByAdminError = NotFoundError | DbError | InvalidOperationError

union SetOrgMemberRoleError = DbError | NotFoundError | OrgMemberInvitedByEmail

union SetProjectConfidentialityError = NotFoundError | DbError

union SetRetentionPolicyError = NotFoundError | DbError

union SetUserLockedError = NotFoundError

union SoftDeleteProjectError = NotFoundError | DbError

union UpdateFLExModelVersionError = NotFoundError | DbError | UnauthorizedAccessError

union UpdateLangProjectIdError = NotFoundError | DbError | UnauthorizedAccessError

union UpdateProjectLanguageListError = NotFoundError | DbError | UnauthorizedAccessError

union UpdateProjectLexEntryCountError = NotFoundError | DbError | UnauthorizedAccessError

union UpdateProjectRepoSizeInKbError = NotFoundError | DbError | UnauthorizedAccessError

input AddProjectMemberInput {
  projectId: UUID!
  usernameOrEmail: String
  userId: UUID
  role: ProjectRole!
  canInvite: Boolean!
}

input AddProjectToOrgInput {
  orgId: UUID!
  projectId: UUID!
}

input AddProjectsToOrgInput {
  orgId: UUID!
  projectIds: [UUID!]!
}

input AskToJoinProjectInput {
  projectId: UUID!
}

input BooleanOperationFilterInput {
  eq: Boolean @cost(weight: "10")
  neq: Boolean @cost(weight: "10")
}

input BulkAddOrgMembersInput {
  orgId: UUID!
  usernames: [String!]!
  role: OrgRole!
}

input BulkAddProjectMembersInput {
  projectId: UUID!
  usernames: [String!]!
  role: ProjectRole!
  passwordHash: String!
}

input ChangeOrgMemberRoleInput {
  orgId: UUID!
  userId: UUID!
  role: OrgRole
}

input ChangeOrgNameInput {
  orgId: UUID!
  name: String!
}

input ChangeProjectDescriptionInput {
  projectId: UUID!
  description: String!
}

input ChangeProjectMemberRoleInput {
  projectId: UUID!
  userId: UUID!
  role: ProjectRole!
}

input ChangeProjectNameInput {
  projectId: UUID!
  name: String!
}

input ChangeUserAccountByAdminInput {
  role: UserRole!
  userId: UUID!
  email: String
  name: String!
}

input ChangeUserAccountBySelfInput {
  locale: String!
  userId: UUID!
  email: String
  name: String!
}

input CreateGuestUserByAdminInput {
  email: String
  name: String!
  username: String
  locale: String!
  passwordHash: String!
  passwordStrength: Int!
  orgId: UUID
}

input CreateOrganizationInput {
  name: String!
}

input CreateProjectInput {
  id: UUID
  name: String!
  description: String!
  code: String!
  type: ProjectType!
  retentionPolicy: RetentionPolicy!
  isConfidential: Boolean!
  projectManagerId: UUID
  orgId: UUID
  forceDraft: Boolean! = false
}

input DateTimeOperationFilterInput {
  eq: DateTime @cost(weight: "10")
  neq: DateTime @cost(weight: "10")
  in: [DateTime] @cost(weight: "10")
  nin: [DateTime] @cost(weight: "10")
  gt: DateTime @cost(weight: "10")
  ngt: DateTime @cost(weight: "10")
  gte: DateTime @cost(weight: "10")
  ngte: DateTime @cost(weight: "10")
  lt: DateTime @cost(weight: "10")
  nlt: DateTime @cost(weight: "10")
  lte: DateTime @cost(weight: "10")
  nlte: DateTime @cost(weight: "10")
}

input DeleteDraftProjectInput {
  draftProjectId: UUID!
}

input DeleteOrgInput {
  orgId: UUID!
}

input DeleteUserByAdminOrSelfInput {
  userId: UUID!
}

input DraftProjectFilterInput {
  and: [DraftProjectFilterInput!]
  or: [DraftProjectFilterInput!]
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  code: StringOperationFilterInput
  type: ProjectTypeOperationFilterInput
  retentionPolicy: RetentionPolicyOperationFilterInput
  projectManager: UserFilterInput
  projectManagerId: UuidOperationFilterInput
  orgId: UuidOperationFilterInput
  isConfidential: BooleanOperationFilterInput
  id: UuidOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  updatedDate: DateTimeOperationFilterInput
}

input DraftProjectSortInput {
  name: SortEnumType @cost(weight: "10")
  description: SortEnumType @cost(weight: "10")
  code: SortEnumType @cost(weight: "10")
  type: SortEnumType @cost(weight: "10")
  retentionPolicy: SortEnumType @cost(weight: "10")
  projectManager: UserSortInput @cost(weight: "10")
  projectManagerId: SortEnumType @cost(weight: "10")
  orgId: SortEnumType @cost(weight: "10")
  isConfidential: SortEnumType @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
  createdDate: SortEnumType @cost(weight: "10")
  updatedDate: SortEnumType @cost(weight: "10")
}

input FLExWsIdFilterInput {
  and: [FLExWsIdFilterInput!]
  or: [FLExWsIdFilterInput!]
  tag: StringOperationFilterInput
  isActive: BooleanOperationFilterInput
  isDefault: BooleanOperationFilterInput
}

input FlexProjectMetadataFilterInput {
  and: [FlexProjectMetadataFilterInput!]
  or: [FlexProjectMetadataFilterInput!]
  projectId: UuidOperationFilterInput
  lexEntryCount: IntOperationFilterInput
  langProjectId: UuidOperationFilterInput
  writingSystems: ProjectWritingSystemsFilterInput
  flexModelVersion: IntOperationFilterInput
}

input FlexProjectMetadataSortInput {
  projectId: SortEnumType @cost(weight: "10")
  lexEntryCount: SortEnumType @cost(weight: "10")
  langProjectId: SortEnumType @cost(weight: "10")
  flexModelVersion: SortEnumType @cost(weight: "10")
}

input IntOperationFilterInput {
  eq: Int @cost(weight: "10")
  neq: Int @cost(weight: "10")
  in: [Int] @cost(weight: "10")
  nin: [Int] @cost(weight: "10")
  gt: Int @cost(weight: "10")
  ngt: Int @cost(weight: "10")
  gte: Int @cost(weight: "10")
  ngte: Int @cost(weight: "10")
  lt: Int @cost(weight: "10")
  nlt: Int @cost(weight: "10")
  lte: Int @cost(weight: "10")
  nlte: Int @cost(weight: "10")
}

input LeaveOrgInput {
  orgId: UUID!
}

input LeaveProjectInput {
  projectId: UUID!
}

input ListFilterInputTypeOfFLExWsIdFilterInput {
  all: FLExWsIdFilterInput @cost(weight: "10")
  none: FLExWsIdFilterInput @cost(weight: "10")
  some: FLExWsIdFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfOrgMemberFilterInput {
  all: OrgMemberFilterInput @cost(weight: "10")
  none: OrgMemberFilterInput @cost(weight: "10")
  some: OrgMemberFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfOrganizationFilterInput {
  all: OrganizationFilterInput @cost(weight: "10")
  none: OrganizationFilterInput @cost(weight: "10")
  some: OrganizationFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfProjectFilterInput {
  all: ProjectFilterInput @cost(weight: "10")
  none: ProjectFilterInput @cost(weight: "10")
  some: ProjectFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListFilterInputTypeOfProjectUsersFilterInput {
  all: ProjectUsersFilterInput @cost(weight: "10")
  none: ProjectUsersFilterInput @cost(weight: "10")
  some: ProjectUsersFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input OrgMemberFilterInput {
  and: [OrgMemberFilterInput!]
  or: [OrgMemberFilterInput!]
  userId: UuidOperationFilterInput
  orgId: UuidOperationFilterInput
  role: OrgRoleOperationFilterInput
  user: UserFilterInput
  organization: OrganizationFilterInput
  id: UuidOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  updatedDate: DateTimeOperationFilterInput
}

input OrgRoleOperationFilterInput {
  eq: OrgRole @cost(weight: "10")
  neq: OrgRole @cost(weight: "10")
  in: [OrgRole!] @cost(weight: "10")
  nin: [OrgRole!] @cost(weight: "10")
}

input OrganizationFilterInput {
  and: [OrganizationFilterInput!]
  or: [OrganizationFilterInput!]
  name: StringOperationFilterInput
  members: ListFilterInputTypeOfOrgMemberFilterInput
  projects: ListFilterInputTypeOfProjectFilterInput
  memberCount: IntOperationFilterInput
  projectCount: IntOperationFilterInput
  id: UuidOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  updatedDate: DateTimeOperationFilterInput
}

input OrganizationSortInput {
  name: SortEnumType @cost(weight: "10")
  memberCount: SortEnumType @cost(weight: "10")
  projectCount: SortEnumType @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
  createdDate: SortEnumType @cost(weight: "10")
  updatedDate: SortEnumType @cost(weight: "10")
}

input ProjectFilterInput {
  and: [ProjectFilterInput!]
  or: [ProjectFilterInput!]
  parentId: UuidOperationFilterInput
  code: StringOperationFilterInput
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  retentionPolicy: RetentionPolicyOperationFilterInput
  type: ProjectTypeOperationFilterInput
  isConfidential: BooleanOperationFilterInput
  flexProjectMetadata: FlexProjectMetadataFilterInput
  users: ListFilterInputTypeOfProjectUsersFilterInput
  organizations: ListFilterInputTypeOfOrganizationFilterInput
  lastCommit: DateTimeOperationFilterInput
  repoSizeInKb: IntOperationFilterInput
  deletedDate: DateTimeOperationFilterInput
  resetStatus: ResetStatusOperationFilterInput
  projectOrigin: ProjectMigrationStatusOperationFilterInput
  migratedDate: DateTimeOperationFilterInput
  userCount: IntOperationFilterInput
  id: UuidOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  updatedDate: DateTimeOperationFilterInput
}

input ProjectMigrationStatusOperationFilterInput {
  eq: ProjectMigrationStatus @cost(weight: "10")
  neq: ProjectMigrationStatus @cost(weight: "10")
  in: [ProjectMigrationStatus!] @cost(weight: "10")
  nin: [ProjectMigrationStatus!] @cost(weight: "10")
}

input ProjectRoleOperationFilterInput {
  eq: ProjectRole @cost(weight: "10")
  neq: ProjectRole @cost(weight: "10")
  in: [ProjectRole!] @cost(weight: "10")
  nin: [ProjectRole!] @cost(weight: "10")
}

input ProjectSortInput {
  parentId: SortEnumType @cost(weight: "10")
  code: SortEnumType @cost(weight: "10")
  name: SortEnumType @cost(weight: "10")
  description: SortEnumType @cost(weight: "10")
  retentionPolicy: SortEnumType @cost(weight: "10")
  type: SortEnumType @cost(weight: "10")
  isConfidential: SortEnumType @cost(weight: "10")
  flexProjectMetadata: FlexProjectMetadataSortInput @cost(weight: "10")
  lastCommit: SortEnumType @cost(weight: "10")
  repoSizeInKb: SortEnumType @cost(weight: "10")
  deletedDate: SortEnumType @cost(weight: "10")
  resetStatus: SortEnumType @cost(weight: "10")
  projectOrigin: SortEnumType @cost(weight: "10")
  migratedDate: SortEnumType @cost(weight: "10")
  userCount: SortEnumType @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
  createdDate: SortEnumType @cost(weight: "10")
  updatedDate: SortEnumType @cost(weight: "10")
}

input ProjectTypeOperationFilterInput {
  eq: ProjectType @cost(weight: "10")
  neq: ProjectType @cost(weight: "10")
  in: [ProjectType!] @cost(weight: "10")
  nin: [ProjectType!] @cost(weight: "10")
}

input ProjectUsersFilterInput {
  and: [ProjectUsersFilterInput!]
  or: [ProjectUsersFilterInput!]
  userId: UuidOperationFilterInput
  projectId: UuidOperationFilterInput
  role: ProjectRoleOperationFilterInput
  user: UserFilterInput
  project: ProjectFilterInput
  id: UuidOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  updatedDate: DateTimeOperationFilterInput
}

input ProjectWritingSystemsFilterInput {
  and: [ProjectWritingSystemsFilterInput!]
  or: [ProjectWritingSystemsFilterInput!]
  vernacularWss: ListFilterInputTypeOfFLExWsIdFilterInput
  analysisWss: ListFilterInputTypeOfFLExWsIdFilterInput
}

input ProjectsByLangCodeAndOrgInput {
  orgId: UUID!
  langCode: String!
}

input ProjectsInMyOrgInput {
  orgId: UUID!
}

input RemoveProjectFromOrgInput {
  orgId: UUID!
  projectId: UUID!
}

input RemoveProjectMemberInput {
  projectId: UUID!
  userId: UUID!
}

input ResetStatusOperationFilterInput {
  eq: ResetStatus @cost(weight: "10")
  neq: ResetStatus @cost(weight: "10")
  in: [ResetStatus!] @cost(weight: "10")
  nin: [ResetStatus!] @cost(weight: "10")
}

input RetentionPolicyOperationFilterInput {
  eq: RetentionPolicy @cost(weight: "10")
  neq: RetentionPolicy @cost(weight: "10")
  in: [RetentionPolicy!] @cost(weight: "10")
  nin: [RetentionPolicy!] @cost(weight: "10")
}

input SendNewVerificationEmailByAdminInput {
  userId: UUID!
}

input SetOrgMemberRoleInput {
  orgId: UUID!
  role: OrgRole!
  emailOrUsername: String!
  canInvite: Boolean!
}

input SetProjectConfidentialityInput {
  projectId: UUID!
  isConfidential: Boolean!
}

input SetRetentionPolicyInput {
  projectId: UUID!
  retentionPolicy: RetentionPolicy!
}

input SetUserLockedInput {
  userId: UUID!
  locked: Boolean!
}

input SoftDeleteProjectInput {
  projectId: UUID!
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String @cost(weight: "10")
  neq: String @cost(weight: "10")
  contains: String @cost(weight: "20")
  ncontains: String @cost(weight: "20")
  in: [String] @cost(weight: "10")
  nin: [String] @cost(weight: "10")
  startsWith: String @cost(weight: "20")
  nstartsWith: String @cost(weight: "20")
  endsWith: String @cost(weight: "20")
  nendsWith: String @cost(weight: "20")
  icontains: String @cost(weight: "10")
  ieq: String @cost(weight: "10")
}

input UpdateFLExModelVersionInput {
  code: String!
}

input UpdateLangProjectIdInput {
  code: String!
}

input UpdateProjectLanguageListInput {
  code: String!
}

input UpdateProjectLexEntryCountInput {
  code: String!
}

input UpdateProjectRepoSizeInKbInput {
  code: String!
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  name: StringOperationFilterInput
  email: StringOperationFilterInput
  isAdmin: BooleanOperationFilterInput
  createdById: UuidOperationFilterInput
  username: StringOperationFilterInput
  id: UuidOperationFilterInput
}

input UserSortInput {
  name: SortEnumType @cost(weight: "10")
  email: SortEnumType @cost(weight: "10")
  username: SortEnumType @cost(weight: "10")
  createdDate: SortEnumType @cost(weight: "10")
}

input UuidOperationFilterInput {
  eq: UUID @cost(weight: "10")
  neq: UUID @cost(weight: "10")
  in: [UUID] @cost(weight: "10")
  nin: [UUID] @cost(weight: "10")
  gt: UUID @cost(weight: "10")
  ngt: UUID @cost(weight: "10")
  gte: UUID @cost(weight: "10")
  ngte: UUID @cost(weight: "10")
  lt: UUID @cost(weight: "10")
  nlt: UUID @cost(weight: "10")
  lte: UUID @cost(weight: "10")
  nlte: UUID @cost(weight: "10")
}

"Defines when a policy shall be executed."
enum ApplyPolicy {
  "Before the resolver was executed."
  BEFORE_RESOLVER
  "After the resolver was executed."
  AFTER_RESOLVER
  "The policy is applied in the validation step before the execution."
  VALIDATION
}

enum CreateProjectResult {
  CREATED
  REQUESTED
}

enum DbErrorCode {
  UNKNOWN
  DUPLICATE
}

enum FeatureFlag {
  FW_LITE_BETA
}

enum LexboxAudience {
  UNKNOWN
  LEXBOX_API
  REGISTER_ACCOUNT
  FORGOT_PASSWORD
  SEND_AND_RECEIVE
  SEND_AND_RECEIVE_REFRESH
}

enum OrgRole {
  UNKNOWN
  ADMIN
  USER
}

enum ProjectMigrationStatus {
  UNKNOWN
  MIGRATED
  MIGRATING
  PRIVATE_REDMINE
  PUBLIC_REDMINE
}

enum ProjectRole {
  UNKNOWN
  MANAGER
  EDITOR
}

enum ProjectType {
  UNKNOWN
  FL_EX
  WE_SAY
  ONE_STORY_EDITOR
  OUR_WORD
  ADAPT_IT
}

enum ResetStatus {
  NONE
  IN_PROGRESS
}

enum RetentionPolicy {
  UNKNOWN
  VERIFIED
  TEST
  DEV
  TRAINING
}

enum SortEnumType {
  ASC
  DESC
}

enum UserRole {
  ADMIN
  USER
}

"The authorize directive."
directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The purpose of the `@listSize` directive is to either inform the static analysis about the size of returned lists (if that information is statically available), or to point the analysis to where to find that information."
directive @listSize("The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field." assumedSize: Int "The `slicingArguments` argument can be used to define which of the field's arguments with numeric type are slicing arguments, so that their value determines the size of the list returned by that field. It may specify a list of multiple slicing arguments." slicingArguments: [String!] "The `sizedFields` argument can be used to define that the value of the `assumedSize` argument or of a slicing argument does not affect the size of a list returned by a field itself, but that of a list returned by one of its sub-fields." sizedFields: [String!] "The `requireOneSlicingArgument` argument can be used to inform the static analysis that it should expect that exactly one of the defined slicing arguments is present in a query. If that is not the case (i.e., if none or multiple slicing arguments are present), the static analysis may throw an error." requireOneSlicingArgument: Boolean! = true) on FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")