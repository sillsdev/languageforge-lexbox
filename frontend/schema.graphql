schema {
  query: Query
  mutation: Mutation
}

interface Error {
  message: String!
}

type AddProjectMemberPayload {
  project: Project
  errors: [AddProjectMemberError!]
}

type AlreadyExistsError implements Error {
  message: String!
}

type AuthUserProject {
  code: String!
  role: ProjectRole!
  projectId: UUID!
}

type ChangeProjectDescriptionPayload {
  project: Project
  errors: [ChangeProjectDescriptionError!]
}

type ChangeProjectMemberRolePayload {
  projectUsers: ProjectUsers
  errors: [ChangeProjectMemberRoleError!]
}

type ChangeProjectNamePayload {
  project: Project
  errors: [ChangeProjectNameError!]
}

type ChangeUserAccountByAdminPayload {
  user: User
  errors: [ChangeUserAccountByAdminError!]
}

type ChangeUserAccountDataPayload {
  user: User
  errors: [ChangeUserAccountDataError!]
}

type Changeset {
  node: String!
  date: [Float!]!
  desc: String!
  branch: String!
  tags: [String!]!
  user: String!
  phase: String!
  parents: [String!]!
}

type CreateProjectPayload {
  createProjectResponse: CreateProjectResponse
  errors: [CreateProjectError!]
}

type CreateProjectResponse {
  id: UUID
  result: CreateProjectResult!
}

type DbError implements Error {
  message: String!
  code: DbErrorCode!
}

type DeleteUserByAdminOrSelfPayload {
  user: User
  errors: [DeleteUserByAdminOrSelfError!]
}

type IsAdminResponse {
  value: Boolean!
}

type LexAuthUser {
  canManageProject(projectId: UUID!): Boolean!
  hasProjectCreatePermission: Boolean!
  id: UUID!
  email: String!
  name: String!
  role: UserRole!
  projects: [AuthUserProject!]!
  emailVerificationRequired: Boolean
  canCreateProjects: Boolean
}

type Mutation {
  createProject(input: CreateProjectInput!): CreateProjectPayload! @authorize(policy: "VerifiedEmailRequiredPolicy")
  addProjectMember(input: AddProjectMemberInput!): AddProjectMemberPayload!
  changeProjectMemberRole(input: ChangeProjectMemberRoleInput!): ChangeProjectMemberRolePayload!
  changeProjectName(input: ChangeProjectNameInput!): ChangeProjectNamePayload!
  changeProjectDescription(input: ChangeProjectDescriptionInput!): ChangeProjectDescriptionPayload!
  removeProjectMember(input: RemoveProjectMemberInput!): Project
  softDeleteProject(input: SoftDeleteProjectInput!): SoftDeleteProjectPayload!
  changeUserAccountData(input: ChangeUserAccountDataInput!): ChangeUserAccountDataPayload!
  changeUserAccountByAdmin(input: ChangeUserAccountByAdminInput!): ChangeUserAccountByAdminPayload! @authorize(policy: "AdminRequiredPolicy")
  deleteUserByAdminOrSelf(input: DeleteUserByAdminOrSelfInput!): DeleteUserByAdminOrSelfPayload!
}

type NotFoundError implements Error {
  message: String!
}

type Project {
  code: String!
  createdDate: DateTime!
  migrationStatus: ProjectMigrationStatus!
  changesets: [Changeset!]!
  parentId: UUID
  name: String!
  description: String
  retentionPolicy: RetentionPolicy!
  type: ProjectType!
  users: [ProjectUsers!]!
  lastCommit: DateTime
  deletedDate: DateTime
  userCount: Int!
  id: UUID!
  updatedDate: DateTime!
}

type ProjectMembersMustBeVerified implements Error {
  message: String!
}

type ProjectUsers {
  userId: UUID!
  projectId: UUID!
  role: ProjectRole!
  user: User!
  project: Project!
  id: UUID!
  createdDate: DateTime!
  updatedDate: DateTime!
}

type Query {
  myProjects(orderBy: [ProjectSortInput!]): [Project!]!
  projects(withDeleted: Boolean! = false where: ProjectFilterInput orderBy: [ProjectSortInput!]): [Project!]! @authorize(policy: "AdminRequiredPolicy")
  projectByCode(code: String!): Project
  users(where: UserFilterInput orderBy: [UserSortInput!]): [User!]! @authorize(policy: "AdminRequiredPolicy")
  me: LexAuthUser!
  isAdmin: IsAdminResponse! @authorize(policy: "AdminRequiredPolicy")
}

type RequiredError implements Error {
  message: String!
}

type SoftDeleteProjectPayload {
  project: Project
  errors: [SoftDeleteProjectError!]
}

type UniqueValueError implements Error {
  message: String!
}

type User {
  canLogin: Boolean!
  name: String!
  email: String!
  localizationCode: String!
  isAdmin: Boolean!
  passwordHash: String!
  salt: String!
  lastActive: DateTime!
  emailVerified: Boolean!
  canCreateProjects: Boolean!
  locked: Boolean!
  username: String
  projects: [ProjectUsers!]!
  id: UUID!
  createdDate: DateTime!
  updatedDate: DateTime!
}

union AddProjectMemberError = NotFoundError | DbError | ProjectMembersMustBeVerified

union ChangeProjectDescriptionError = NotFoundError | DbError

union ChangeProjectMemberRoleError = NotFoundError | DbError

union ChangeProjectNameError = NotFoundError | DbError | RequiredError

union ChangeUserAccountByAdminError = NotFoundError | DbError | UniqueValueError

union ChangeUserAccountDataError = NotFoundError | DbError | UniqueValueError

union CreateProjectError = DbError | AlreadyExistsError

union DeleteUserByAdminOrSelfError = NotFoundError | DbError

union SoftDeleteProjectError = NotFoundError | DbError

input AddProjectMemberInput {
  projectId: UUID!
  userEmail: String!
  role: ProjectRole!
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input ChangeProjectDescriptionInput {
  projectId: UUID!
  description: String!
}

input ChangeProjectMemberRoleInput {
  projectId: UUID!
  userId: UUID!
  role: ProjectRole!
}

input ChangeProjectNameInput {
  projectId: UUID!
  name: String!
}

input ChangeUserAccountByAdminInput {
  role: UserRole!
  userId: UUID!
  email: String!
  name: String!
}

input ChangeUserAccountDataInput {
  userId: UUID!
  email: String!
  name: String!
}

input CreateProjectInput {
  id: UUID
  name: String!
  description: String
  code: String!
  type: ProjectType!
  retentionPolicy: RetentionPolicy!
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input DeleteUserByAdminOrSelfInput {
  userId: UUID!
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ListFilterInputTypeOfProjectUsersFilterInput {
  all: ProjectUsersFilterInput
  none: ProjectUsersFilterInput
  some: ProjectUsersFilterInput
  any: Boolean
}

input ProjectFilterInput {
  and: [ProjectFilterInput!]
  or: [ProjectFilterInput!]
  parentId: UuidOperationFilterInput
  code: StringOperationFilterInput
  name: StringOperationFilterInput
  description: StringOperationFilterInput
  retentionPolicy: RetentionPolicyOperationFilterInput
  type: ProjectTypeOperationFilterInput
  users: ListFilterInputTypeOfProjectUsersFilterInput
  lastCommit: DateTimeOperationFilterInput
  deletedDate: DateTimeOperationFilterInput
  migrationStatus: ProjectMigrationStatusOperationFilterInput
  userCount: IntOperationFilterInput
  id: UuidOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  updatedDate: DateTimeOperationFilterInput
}

input ProjectMigrationStatusOperationFilterInput {
  eq: ProjectMigrationStatus
  neq: ProjectMigrationStatus
  in: [ProjectMigrationStatus!]
  nin: [ProjectMigrationStatus!]
}

input ProjectRoleOperationFilterInput {
  eq: ProjectRole
  neq: ProjectRole
  in: [ProjectRole!]
  nin: [ProjectRole!]
}

input ProjectSortInput {
  parentId: SortEnumType
  code: SortEnumType
  name: SortEnumType
  description: SortEnumType
  retentionPolicy: SortEnumType
  type: SortEnumType
  lastCommit: SortEnumType
  deletedDate: SortEnumType
  migrationStatus: SortEnumType
  userCount: SortEnumType
  id: SortEnumType
  createdDate: SortEnumType
  updatedDate: SortEnumType
}

input ProjectTypeOperationFilterInput {
  eq: ProjectType
  neq: ProjectType
  in: [ProjectType!]
  nin: [ProjectType!]
}

input ProjectUsersFilterInput {
  and: [ProjectUsersFilterInput!]
  or: [ProjectUsersFilterInput!]
  userId: UuidOperationFilterInput
  projectId: UuidOperationFilterInput
  role: ProjectRoleOperationFilterInput
  user: UserFilterInput
  project: ProjectFilterInput
  id: UuidOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  updatedDate: DateTimeOperationFilterInput
}

input RemoveProjectMemberInput {
  projectId: UUID!
  userId: UUID!
}

input RetentionPolicyOperationFilterInput {
  eq: RetentionPolicy
  neq: RetentionPolicy
  in: [RetentionPolicy!]
  nin: [RetentionPolicy!]
}

input SoftDeleteProjectInput {
  projectId: UUID!
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input UserFilterInput {
  and: [UserFilterInput!]
  or: [UserFilterInput!]
  name: StringOperationFilterInput
  email: StringOperationFilterInput
  localizationCode: StringOperationFilterInput
  isAdmin: BooleanOperationFilterInput
  passwordHash: StringOperationFilterInput
  salt: StringOperationFilterInput
  lastActive: DateTimeOperationFilterInput
  emailVerified: BooleanOperationFilterInput
  canCreateProjects: BooleanOperationFilterInput
  locked: BooleanOperationFilterInput
  username: StringOperationFilterInput
  projects: ListFilterInputTypeOfProjectUsersFilterInput
  id: UuidOperationFilterInput
  createdDate: DateTimeOperationFilterInput
  updatedDate: DateTimeOperationFilterInput
}

input UserSortInput {
  name: SortEnumType
  email: SortEnumType
  localizationCode: SortEnumType
  isAdmin: SortEnumType
  passwordHash: SortEnumType
  salt: SortEnumType
  lastActive: SortEnumType
  emailVerified: SortEnumType
  canCreateProjects: SortEnumType
  locked: SortEnumType
  username: SortEnumType
  id: SortEnumType
  createdDate: SortEnumType
  updatedDate: SortEnumType
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
  VALIDATION
}

enum CreateProjectResult {
  CREATED
  REQUESTED
}

enum DbErrorCode {
  UNKNOWN
  DUPLICATE
}

enum ProjectMigrationStatus {
  UNKNOWN
  MIGRATED
  MIGRATING
  PRIVATE_REDMINE
  PUBLIC_REDMINE
}

enum ProjectRole {
  UNKNOWN
  MANAGER
  EDITOR
}

enum ProjectType {
  UNKNOWN
  FL_EX
  WE_SAY
  ONE_STORY_EDITOR
  OUR_WORD
}

enum RetentionPolicy {
  UNKNOWN
  VERIFIED
  TEST
  DEV
  TRAINING
}

enum SortEnumType {
  ASC
  DESC
}

enum UserRole {
  ADMIN
  USER
}

directive @allowAnonymous repeatable on FIELD_DEFINITION

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar UUID

scalar timestamptz @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar uuid