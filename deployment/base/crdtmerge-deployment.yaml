# https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
apiVersion: v1
kind: Service
metadata:
  name: crdtmerge
  namespace: languagedepot
  labels:
    app: crdtmerge
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: crdtmerge
  ports:
  - name: http
    protocol: TCP
    port: 80

---

# https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#writing-a-deployment-spec
apiVersion: apps/v1
kind: Deployment
metadata:
  name: crdtmerge
  namespace: languagedepot
  labels:
    app: crdtmerge
spec:
  selector:
    matchLabels:
      app: crdtmerge
  strategy:
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 0
    type: RollingUpdate
  template:
    # https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates
    metadata:
      labels:
        app: crdtmerge
    spec:
      securityContext:
        runAsGroup: 33
        runAsUser: 33
        runAsNonRoot: true
      containers:
      - name: crdtmerge
        image: ghcr.io/sillsdev/lexbox-crdtmerge:develop
        imagePullPolicy: IfNotPresent
        # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
        resources:
          requests:
            memory: 1500Mi
          limits:
            memory: 2400Mi
        startupProbe:
          httpGet:
            port: 80
            path: /api/healthz
          failureThreshold: 30
          periodSeconds: 10
        ports:
          - containerPort: 80

        volumeMounts:
        - name: crdtmerge
          mountPath: /var/lib/crdtmerge

        env:
          - name: DOTNET_URLS
            value: http://0.0.0.0:80
          - name: ASPNETCORE_ENVIRONMENT
            valueFrom:
              configMapKeyRef:
                name: app-config
                key: environment-name
          - name: K8S_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: K8S_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POSTGRES_DB
            valueFrom:
              secretKeyRef:
                  key: POSTGRES_DB
                  name: db
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                  key: POSTGRES_PASSWORD
                  name: db
          - name: DbConfig__LexBoxConnectionString
            value: Host=db;Port=5432;Username=postgres;Password=$(POSTGRES_PASSWORD);Database=$(POSTGRES_DB)
          - name: SendReceiveConfig__ProjectStorageRoot
            value: /var/lib/crdtmerge/projects
          - name: SendReceiveConfig__LexboxUrl
            value: http://lexbox:5158/
          # - name: SendReceiveConfig__HgUrl
          #   value: http://lexbox:5158/hg/
          - name: SendReceiveConfig__LexboxUsername
            valueFrom:
              secretKeyRef:
                key: CRDT_MERGE_SEND_RECEIVE_USERNAME
                name: crdtmerge
          - name: SendReceiveConfig__LexboxPassword
            valueFrom:
              secretKeyRef:
                key: CRDT_MERGE_SEND_RECEIVE_PASSWORD
                name: crdtmerge
          - name: SendReceiveConfig__FdoDataModelVersion
            value: "7000072"

      initContainers:
      - name: populate-crdt-project-storage
        securityContext:
          # Make sure we're authorized to set ownership
          runAsUser: 0
          runAsGroup: 0
          runAsNonRoot: false
        image: busybox:1.36.1
        command:
          - 'sh'
          - '-c'
          - |
            mkdir -p /crdtmerge/projects
            chown www-data:www-data /crdtmerge/projects
        volumeMounts:
          - name: crdtmerge
            mountPath: /crdtmerge

      volumes:
      - name: crdtmerge
        persistentVolumeClaim:
          claimName: crdtmerge # established in pvc.yaml
