# https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
apiVersion: v1
kind: Service
metadata:
  name: hasura
  namespace: languagedepot
  labels:
    app: hasura
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: hasura
  ports:
  - name: hasura
    protocol: TCP
    port: 8080
    targetPort: hasura-port

---

# https://kubernetes.io/docs/concepts/storage/persistent-volumes/#persistentvolumeclaims
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: hasura-metadata
  namespace: languagedepot
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 25Mi
  storageClassName: hostpath # docker-desktop doesn't have a weekly-snapshots-retain-4 class

---

# https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#writing-a-deployment-spec
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hasura
  namespace: languagedepot
  labels:
    app: hasura
spec:
  selector:
    matchLabels:
      app: hasura
  strategy:
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
    type: RollingUpdate
  template:
    # https://kubernetes.io/docs/concepts/workloads/pods/#pod-templates
    metadata:
      labels:
        app: hasura
    spec:
      serviceAccountName: lexbox-deployer
      containers:
      - name: hasura
        # TODO: need to parameterize this tag
        image: hasura/graphql-engine:v2.20.0-ce.cli-migrations-v3
        imagePullPolicy: IfNotPresent
        # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers
        resources:
          requests: # TODO: need to establish resource limits, possibly after seeing it in action for some regular and/or load testing
            memory: 350Mi
          limits:
            memory: 500Mi
        ports:
          - containerPort: 8080
            name: hasura-port

        volumeMounts:
        - name: hasura-metadata
          mountPath: /hasura-metadata

        env:
          - name: HASURA_GRAPHQL_ENABLE_TELEMETRY
            value: "false"
          - name: HASURA_GRAPHQL_ENABLED_LOG_TYPES
            value: "startup, http-log, webhook-log, websocket-log, query-log"
          - name: HASURA_GRAPHQL_EXPERIMENTAL_FEATURES
            value: naming_convention
          - name: HASURA_GRAPHQL_DEFAULT_NAMING_CONVENTION
            value: graphql-default
          - name: HASURA_GRAPHQL_METADATA_DIR
            value: /hasura-metadata
          - name: POSTGRES_DB
            valueFrom:
              secretKeyRef:
                key: POSTGRES_DB
                name: db
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: POSTGRES_PASSWORD
                name: db
          - name: HASURA_GRAPHQL_METADATA_DATABASE_URL
            value: postgres://postgres:$(POSTGRES_PASSWORD)@db:5432/$(POSTGRES_DB)
          - name: PG_DATABASE_URL
            value: $(HASURA_GRAPHQL_METADATA_DATABASE_URL)
          - name: HASURA_GRAPHQL_ADMIN_SECRET
            valueFrom:
              secretKeyRef:
                key: HASURA_GRAPHQL_ADMIN_SECRET
                name: hasura

      initContainers:
      - name: deploy-metadata
        image: bitnami/git:2.41.0
        command: ['sh', '-c', 'git clone --filter=blob:none --no-checkout https://github.com/sillsdev/languageforge-lexbox lexbox; cd lexbox/; git sparse-checkout set --no-cone hasura/metadata; git checkout; mkdir -p /hasura-metadata; cp -a hasura/metadata/* /hasura-metadata']
        volumeMounts:
        - name: hasura-metadata
          mountPath: /hasura-metadata
      - name: wait-lexbox
        image: busybox:1.36.1
        command: ['sh', '-c', "until wget -O - http://lexbox:5158/api/healthz; do echo waiting for lexbox-api backend; sleep 2; done"]
      volumes:
      - name: hasura-metadata
        persistentVolumeClaim:
          claimName: hasura-metadata

