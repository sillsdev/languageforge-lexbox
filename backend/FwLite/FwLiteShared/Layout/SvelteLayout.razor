@inherits LayoutComponentBase
@using FwLiteShared.Services
@using Microsoft.Extensions.Hosting
@using Microsoft.Extensions.Logging
@inject IJSRuntime JS
@inject ILogger<SvelteLayout> Logger
@inject FwLiteProvider FwLiteProvider
@inject IHostEnvironment Environment;
@implements IAsyncDisposable
@if (useDevAssets)
{
    <script type="module" src="http://localhost:5173/@@vite/client"></script>
}
else
{
    <link rel="modulepreload" href="@Assets["_content/FwLiteShared/viewer/svelte-ux.js"]">
    <link rel="stylesheet" href="@Assets["_content/FwLiteShared/viewer/main.css"]"/>
}
<script>
    window['setOverrideService'] = (key, service) => {
        window.lexbox ??= {};
        window.lexbox.FwLiteProvider ??= {};
        if (window.lexbox.DotNetServiceProvider) {
          window.lexbox.DotNetServiceProvider.setOverrideServices(window.lexbox.FwLiteProvider);
        }
        const services = window.lexbox.FwLiteProvider;
        if (service) {
            services[key] = service;
        } else {
            delete services[key];
        }
    };
    //called from FwLiteProvider.InjectCrdtProject
    window['notifyEntryUpdated'] = (projectName, entry) => {
        if (window.lexbox?.EventBus) {
            window.lexbox.EventBus.notifyEntryUpdated(entry);
        }
    }

</script>
<div id="svelte-app" class="contents">
</div>

@Body

@code {
    private bool useDevAssets => Environment.IsDevelopment();
    // private bool useDevAssets => false;
    private IJSObjectReference? module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Logger.LogInformation("OnAfterRenderAsync SvelteLayout");
        if (firstRender)
        {
            foreach (var (serviceKey, service) in FwLiteProvider.GetServices())
            {
                await FwLiteProvider.SetService(JS, serviceKey, service);
            }

            if (useDevAssets)
            {
                module = await JS.InvokeAsync<IJSObjectReference>("import", "http://localhost:5173/src/main.ts");
            } else
            {
                module = await JS.InvokeAsync<IJSObjectReference>("import",
                    "/" + Assets["_content/FwLiteShared/viewer/main.js"]);
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        await (module?.DisposeAsync() ?? ValueTask.CompletedTask);
    }

}
