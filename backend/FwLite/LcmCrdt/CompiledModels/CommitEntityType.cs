// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SIL.Harmony;
using SIL.Harmony.Core;
using SIL.Harmony.Db.EntityConfig;

#pragma warning disable 219, 612, 618
#nullable disable

namespace LcmCrdt.CompiledModels
{
    internal partial class CommitEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "SIL.Harmony.Commit",
                typeof(Commit),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(Guid),
                propertyInfo: typeof(CommitBase).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CommitBase).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            id.TypeMapping = SqliteGuidTypeMapping.Default;

            var clientId = runtimeEntityType.AddProperty(
                "ClientId",
                typeof(Guid),
                propertyInfo: typeof(CommitBase).GetProperty("ClientId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CommitBase).GetField("<ClientId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            clientId.TypeMapping = SqliteGuidTypeMapping.Default;

            var hash = runtimeEntityType.AddProperty(
                "Hash",
                typeof(string),
                propertyInfo: typeof(Commit).GetProperty("Hash", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Commit).GetField("<Hash>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            hash.TypeMapping = SqliteStringTypeMapping.Default;

            var metadata = runtimeEntityType.AddProperty(
                "Metadata",
                typeof(CommitMetadata),
                propertyInfo: typeof(CommitBase).GetProperty("Metadata", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(CommitBase).GetField("<Metadata>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            metadata.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<CommitMetadata>(
                    (CommitMetadata v1, CommitMetadata v2) => object.Equals(v1, v2),
                    (CommitMetadata v) => v.GetHashCode(),
                    (CommitMetadata v) => v),
                keyComparer: new ValueComparer<CommitMetadata>(
                    (CommitMetadata v1, CommitMetadata v2) => object.Equals(v1, v2),
                    (CommitMetadata v) => v.GetHashCode(),
                    (CommitMetadata v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "jsonb"),
                converter: new ValueConverter<CommitMetadata, string>(
                    (CommitMetadata m) => CommitEntityConfig.Serialize(m, null),
                    (string json) => CommitEntityConfig.Deserialize(json, null) ?? new CommitMetadata()),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<CommitMetadata, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<CommitMetadata, string>(
                        (CommitMetadata m) => CommitEntityConfig.Serialize(m, null),
                        (string json) => CommitEntityConfig.Deserialize(json, null) ?? new CommitMetadata())));
            metadata.AddAnnotation("Relational:ColumnType", "jsonb");

            var parentHash = runtimeEntityType.AddProperty(
                "ParentHash",
                typeof(string),
                propertyInfo: typeof(Commit).GetProperty("ParentHash", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Commit).GetField("<ParentHash>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            parentHash.TypeMapping = SqliteStringTypeMapping.Default;

            HybridDateTimeComplexProperty.Create(runtimeEntityType);
            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        private static class HybridDateTimeComplexProperty
        {
            public static RuntimeComplexProperty Create(RuntimeEntityType declaringType)
            {
                var complexProperty = declaringType.AddComplexProperty("HybridDateTime",
                    typeof(HybridDateTime),
                    "SIL.Harmony.Commit.HybridDateTime#HybridDateTime",
                    typeof(HybridDateTime),
                    propertyInfo: typeof(CommitBase).GetProperty("HybridDateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(CommitBase).GetField("<HybridDateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

                var complexType = complexProperty.ComplexType;
                var counter = complexType.AddProperty(
                    "Counter",
                    typeof(long),
                    propertyInfo: typeof(HybridDateTime).GetProperty("Counter", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(HybridDateTime).GetField("<Counter>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    sentinel: 0L);
                counter.TypeMapping = LongTypeMapping.Default.Clone(
                    comparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => v.GetHashCode(),
                        (long v) => v),
                    keyComparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => v.GetHashCode(),
                        (long v) => v),
                    providerValueComparer: new ValueComparer<long>(
                        (long v1, long v2) => v1 == v2,
                        (long v) => v.GetHashCode(),
                        (long v) => v),
                    mappingInfo: new RelationalTypeMappingInfo(
                        storeTypeName: "INTEGER"));
                counter.AddAnnotation("Relational:ColumnName", "Counter");

                var dateTime = complexType.AddProperty(
                    "DateTime",
                    typeof(DateTimeOffset),
                    propertyInfo: typeof(HybridDateTime).GetProperty("DateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                    fieldInfo: typeof(HybridDateTime).GetField("<DateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
                dateTime.TypeMapping = SqliteDateTimeTypeMapping.Default.Clone(
                    comparer: new ValueComparer<DateTimeOffset>(
                        (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                        (DateTimeOffset v) => v.GetHashCode(),
                        (DateTimeOffset v) => v),
                    keyComparer: new ValueComparer<DateTimeOffset>(
                        (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                        (DateTimeOffset v) => v.GetHashCode(),
                        (DateTimeOffset v) => v),
                    providerValueComparer: new ValueComparer<DateTime>(
                        (DateTime v1, DateTime v2) => v1.Equals(v2),
                        (DateTime v) => v.GetHashCode(),
                        (DateTime v) => v),
                    converter: new ValueConverter<DateTimeOffset, DateTime>(
                        (DateTimeOffset d) => d.UtcDateTime,
                        (DateTime d) => new DateTimeOffset(d.Ticks, TimeSpan.Zero)),
                    jsonValueReaderWriter: new JsonConvertedValueReaderWriter<DateTimeOffset, DateTime>(
                        SqliteJsonDateTimeReaderWriter.Instance,
                        new ValueConverter<DateTimeOffset, DateTime>(
                            (DateTimeOffset d) => d.UtcDateTime,
                            (DateTime d) => new DateTimeOffset(d.Ticks, TimeSpan.Zero))));
                dateTime.SetSentinelFromProviderValue(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc));
                dateTime.AddAnnotation("Relational:ColumnName", "DateTime");

                complexType.AddAnnotation("Relational:FunctionName", null);
                complexType.AddAnnotation("Relational:Schema", null);
                complexType.AddAnnotation("Relational:SqlQuery", null);
                complexType.AddAnnotation("Relational:TableName", "Commits");
                complexType.AddAnnotation("Relational:ViewName", null);
                complexType.AddAnnotation("Relational:ViewSchema", null);
                return complexProperty;
            }
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Commits");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
