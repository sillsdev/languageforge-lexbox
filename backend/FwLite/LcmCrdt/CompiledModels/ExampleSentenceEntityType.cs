// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiniLcm.Models;

#pragma warning disable 219, 612, 618
#nullable disable

namespace LcmCrdt.CompiledModels
{
    internal partial class ExampleSentenceEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "MiniLcm.Models.ExampleSentence",
                typeof(ExampleSentence),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(Guid),
                propertyInfo: typeof(ExampleSentence).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ExampleSentence).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            id.TypeMapping = SqliteGuidTypeMapping.Default;

            var deletedAt = runtimeEntityType.AddProperty(
                "DeletedAt",
                typeof(DateTimeOffset?),
                propertyInfo: typeof(ExampleSentence).GetProperty("DeletedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ExampleSentence).GetField("<DeletedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            deletedAt.TypeMapping = SqliteDateTimeOffsetTypeMapping.Default;

            var order = runtimeEntityType.AddProperty(
                "Order",
                typeof(double),
                propertyInfo: typeof(ExampleSentence).GetProperty("Order", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ExampleSentence).GetField("<Order>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0.0);
            order.TypeMapping = DoubleTypeMapping.Default.Clone(
                comparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                keyComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                providerValueComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "REAL"));

            var reference = runtimeEntityType.AddProperty(
                "Reference",
                typeof(string),
                propertyInfo: typeof(ExampleSentence).GetProperty("Reference", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ExampleSentence).GetField("<Reference>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            reference.TypeMapping = SqliteStringTypeMapping.Default;

            var senseId = runtimeEntityType.AddProperty(
                "SenseId",
                typeof(Guid),
                propertyInfo: typeof(ExampleSentence).GetProperty("SenseId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ExampleSentence).GetField("<SenseId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            senseId.TypeMapping = SqliteGuidTypeMapping.Default;

            var sentence = runtimeEntityType.AddProperty(
                "Sentence",
                typeof(RichMultiString),
                propertyInfo: typeof(ExampleSentence).GetProperty("Sentence", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ExampleSentence).GetField("<Sentence>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new LcmCrdtDbContext.RichMultiStringDbConverter());
            sentence.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<RichMultiString>(
                    (RichMultiString v1, RichMultiString v2) => object.Equals(v1, v2),
                    (RichMultiString v) => v.GetHashCode(),
                    (RichMultiString v) => v),
                keyComparer: new ValueComparer<RichMultiString>(
                    (RichMultiString v1, RichMultiString v2) => object.Equals(v1, v2),
                    (RichMultiString v) => v.GetHashCode(),
                    (RichMultiString v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "jsonb"),
                converter: new ValueConverter<RichMultiString, string>(
                    (RichMultiString mul) => LcmCrdtDbContext.Serialize(mul),
                    (string json) => LcmCrdtDbContext.Deserialize<RichMultiString>(json) ?? new RichMultiString()),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<RichMultiString, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<RichMultiString, string>(
                        (RichMultiString mul) => LcmCrdtDbContext.Serialize(mul),
                        (string json) => LcmCrdtDbContext.Deserialize<RichMultiString>(json) ?? new RichMultiString())));
            sentence.AddAnnotation("Relational:ColumnType", "jsonb");

            var snapshotId = runtimeEntityType.AddProperty(
                "SnapshotId",
                typeof(Guid?),
                nullable: true);
            snapshotId.TypeMapping = SqliteGuidTypeMapping.Default;

            var translation = runtimeEntityType.AddProperty(
                "Translation",
                typeof(RichMultiString),
                propertyInfo: typeof(ExampleSentence).GetProperty("Translation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ExampleSentence).GetField("<Translation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new LcmCrdtDbContext.RichMultiStringDbConverter());
            translation.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<RichMultiString>(
                    (RichMultiString v1, RichMultiString v2) => object.Equals(v1, v2),
                    (RichMultiString v) => v.GetHashCode(),
                    (RichMultiString v) => v),
                keyComparer: new ValueComparer<RichMultiString>(
                    (RichMultiString v1, RichMultiString v2) => object.Equals(v1, v2),
                    (RichMultiString v) => v.GetHashCode(),
                    (RichMultiString v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "jsonb"),
                converter: new ValueConverter<RichMultiString, string>(
                    (RichMultiString mul) => LcmCrdtDbContext.Serialize(mul),
                    (string json) => LcmCrdtDbContext.Deserialize<RichMultiString>(json) ?? new RichMultiString()),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<RichMultiString, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<RichMultiString, string>(
                        (RichMultiString mul) => LcmCrdtDbContext.Serialize(mul),
                        (string json) => LcmCrdtDbContext.Deserialize<RichMultiString>(json) ?? new RichMultiString())));
            translation.AddAnnotation("Relational:ColumnType", "jsonb");

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { senseId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { snapshotId },
                unique: true);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SenseId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var exampleSentences = principalEntityType.AddNavigation("ExampleSentences",
                runtimeForeignKey,
                onDependent: false,
                typeof(List<ExampleSentence>),
                propertyInfo: typeof(Sense).GetProperty("ExampleSentences", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Sense).GetField("<ExampleSentences>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SnapshotId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.SetNull,
                unique: true);

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ExampleSentence");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
