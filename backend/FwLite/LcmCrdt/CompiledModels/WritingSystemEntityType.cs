// <auto-generated />
using System;
using System.Collections;
using System.Linq;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiniLcm.Models;

#pragma warning disable 219, 612, 618
#nullable disable

namespace LcmCrdt.CompiledModels
{
    internal partial class WritingSystemEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "MiniLcm.Models.WritingSystem",
                typeof(WritingSystem),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(Guid),
                propertyInfo: typeof(WritingSystem).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(WritingSystem).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            id.TypeMapping = SqliteGuidTypeMapping.Default;

            var abbreviation = runtimeEntityType.AddProperty(
                "Abbreviation",
                typeof(string),
                propertyInfo: typeof(WritingSystem).GetProperty("Abbreviation", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(WritingSystem).GetField("<Abbreviation>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            abbreviation.TypeMapping = SqliteStringTypeMapping.Default;

            var deletedAt = runtimeEntityType.AddProperty(
                "DeletedAt",
                typeof(DateTimeOffset?),
                propertyInfo: typeof(WritingSystem).GetProperty("DeletedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(WritingSystem).GetField("<DeletedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            deletedAt.TypeMapping = SqliteDateTimeOffsetTypeMapping.Default;

            var exemplars = runtimeEntityType.AddProperty(
                "Exemplars",
                typeof(string[]),
                propertyInfo: typeof(WritingSystem).GetProperty("Exemplars", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(WritingSystem).GetField("<Exemplars>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            exemplars.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<string[]>(
                    (String[] v1, String[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (String[] v) => v.GetHashCode(),
                    (String[] v) => v),
                keyComparer: new ValueComparer<string[]>(
                    (String[] v1, String[] v2) => StructuralComparisons.StructuralEqualityComparer.Equals((object)v1, (object)v2),
                    (String[] v) => StructuralComparisons.StructuralEqualityComparer.GetHashCode((object)v),
                    (String[] source) => source.ToArray()),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "jsonb"),
                converter: new ValueConverter<string[], string>(
                    (String[] list) => LcmCrdtDbContext.Serialize(list),
                    (string json) => LcmCrdtDbContext.Deserialize<String[]>(json) ?? Array.Empty<string>()),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<string[], string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<string[], string>(
                        (String[] list) => LcmCrdtDbContext.Serialize(list),
                        (string json) => LcmCrdtDbContext.Deserialize<String[]>(json) ?? Array.Empty<string>())));
            exemplars.AddAnnotation("Relational:ColumnType", "jsonb");

            var font = runtimeEntityType.AddProperty(
                "Font",
                typeof(string),
                propertyInfo: typeof(WritingSystem).GetProperty("Font", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(WritingSystem).GetField("<Font>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            font.TypeMapping = SqliteStringTypeMapping.Default;

            var name = runtimeEntityType.AddProperty(
                "Name",
                typeof(string),
                propertyInfo: typeof(WritingSystem).GetProperty("Name", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(WritingSystem).GetField("<Name>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            name.TypeMapping = SqliteStringTypeMapping.Default;

            var order = runtimeEntityType.AddProperty(
                "Order",
                typeof(double),
                propertyInfo: typeof(WritingSystem).GetProperty("Order", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(WritingSystem).GetField("<Order>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0.0);
            order.TypeMapping = DoubleTypeMapping.Default.Clone(
                comparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                keyComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                providerValueComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "REAL"));

            var snapshotId = runtimeEntityType.AddProperty(
                "SnapshotId",
                typeof(Guid?),
                nullable: true);
            snapshotId.TypeMapping = SqliteGuidTypeMapping.Default;

            var type = runtimeEntityType.AddProperty(
                "Type",
                typeof(WritingSystemType),
                propertyInfo: typeof(WritingSystem).GetProperty("Type", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(WritingSystem).GetField("<Type>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            type.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<WritingSystemType>(
                    (WritingSystemType v1, WritingSystemType v2) => object.Equals((object)v1, (object)v2),
                    (WritingSystemType v) => v.GetHashCode(),
                    (WritingSystemType v) => v),
                keyComparer: new ValueComparer<WritingSystemType>(
                    (WritingSystemType v1, WritingSystemType v2) => object.Equals((object)v1, (object)v2),
                    (WritingSystemType v) => v.GetHashCode(),
                    (WritingSystemType v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"),
                converter: new ValueConverter<WritingSystemType, int>(
                    (WritingSystemType value) => (int)value,
                    (int value) => (WritingSystemType)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<WritingSystemType, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<WritingSystemType, int>(
                        (WritingSystemType value) => (int)value,
                        (int value) => (WritingSystemType)value)));
            type.SetSentinelFromProviderValue(0);

            var wsId = runtimeEntityType.AddProperty(
                "WsId",
                typeof(WritingSystemId),
                propertyInfo: typeof(WritingSystem).GetProperty("WsId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(WritingSystem).GetField("<WsId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new LcmCrdtDbContext.WritingSystemIdConverter());
            wsId.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<WritingSystemId>(
                    (WritingSystemId v1, WritingSystemId v2) => v1.Equals(v2),
                    (WritingSystemId v) => v.GetHashCode(),
                    (WritingSystemId v) => v),
                keyComparer: new ValueComparer<WritingSystemId>(
                    (WritingSystemId v1, WritingSystemId v2) => v1.Equals(v2),
                    (WritingSystemId v) => v.GetHashCode(),
                    (WritingSystemId v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                converter: new ValueConverter<WritingSystemId, string>(
                    (WritingSystemId id) => id.Code,
                    (string code) => new WritingSystemId(code)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<WritingSystemId, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<WritingSystemId, string>(
                        (WritingSystemId id) => id.Code,
                        (string code) => new WritingSystemId(code))));
            wsId.SetSentinelFromProviderValue("default");

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { snapshotId },
                unique: true);

            var index0 = runtimeEntityType.AddIndex(
                new[] { wsId, type },
                unique: true);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SnapshotId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.SetNull,
                unique: true);

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "WritingSystem");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
