// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using MiniLcm.Models;

#pragma warning disable 219, 612, 618
#nullable disable

namespace LcmCrdt.CompiledModels
{
    internal partial class ComplexFormComponentEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "MiniLcm.Models.ComplexFormComponent",
                typeof(ComplexFormComponent),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(Guid),
                propertyInfo: typeof(ComplexFormComponent).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ComplexFormComponent).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            id.TypeMapping = SqliteGuidTypeMapping.Default;

            var complexFormEntryId = runtimeEntityType.AddProperty(
                "ComplexFormEntryId",
                typeof(Guid),
                propertyInfo: typeof(ComplexFormComponent).GetProperty("ComplexFormEntryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ComplexFormComponent).GetField("<ComplexFormEntryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            complexFormEntryId.TypeMapping = SqliteGuidTypeMapping.Default;

            var complexFormHeadword = runtimeEntityType.AddProperty(
                "ComplexFormHeadword",
                typeof(string),
                propertyInfo: typeof(ComplexFormComponent).GetProperty("ComplexFormHeadword", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ComplexFormComponent).GetField("<ComplexFormHeadword>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            complexFormHeadword.TypeMapping = SqliteStringTypeMapping.Default;

            var componentEntryId = runtimeEntityType.AddProperty(
                "ComponentEntryId",
                typeof(Guid),
                propertyInfo: typeof(ComplexFormComponent).GetProperty("ComponentEntryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ComplexFormComponent).GetField("<ComponentEntryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            componentEntryId.TypeMapping = SqliteGuidTypeMapping.Default;

            var componentHeadword = runtimeEntityType.AddProperty(
                "ComponentHeadword",
                typeof(string),
                propertyInfo: typeof(ComplexFormComponent).GetProperty("ComponentHeadword", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ComplexFormComponent).GetField("<ComponentHeadword>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            componentHeadword.TypeMapping = SqliteStringTypeMapping.Default;

            var componentSenseId = runtimeEntityType.AddProperty(
                "ComponentSenseId",
                typeof(Guid?),
                propertyInfo: typeof(ComplexFormComponent).GetProperty("ComponentSenseId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ComplexFormComponent).GetField("<ComponentSenseId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            componentSenseId.TypeMapping = SqliteGuidTypeMapping.Default;
            componentSenseId.AddAnnotation("Relational:ColumnName", "ComponentSenseId");

            var deletedAt = runtimeEntityType.AddProperty(
                "DeletedAt",
                typeof(DateTimeOffset?),
                propertyInfo: typeof(ComplexFormComponent).GetProperty("DeletedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ComplexFormComponent).GetField("<DeletedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            deletedAt.TypeMapping = SqliteDateTimeOffsetTypeMapping.Default;

            var order = runtimeEntityType.AddProperty(
                "Order",
                typeof(double),
                propertyInfo: typeof(ComplexFormComponent).GetProperty("Order", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ComplexFormComponent).GetField("<Order>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0.0);
            order.TypeMapping = DoubleTypeMapping.Default.Clone(
                comparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                keyComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                providerValueComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "REAL"));

            var snapshotId = runtimeEntityType.AddProperty(
                "SnapshotId",
                typeof(Guid?),
                nullable: true);
            snapshotId.TypeMapping = SqliteGuidTypeMapping.Default;

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { componentEntryId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { componentSenseId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { snapshotId },
                unique: true);

            var index2 = runtimeEntityType.AddIndex(
                new[] { complexFormEntryId, componentEntryId },
                unique: true);

            var index3 = runtimeEntityType.AddIndex(
                new[] { complexFormEntryId, componentEntryId, componentSenseId },
                unique: true);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ComplexFormEntryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var components = principalEntityType.AddNavigation("Components",
                runtimeForeignKey,
                onDependent: false,
                typeof(List<ComplexFormComponent>),
                propertyInfo: typeof(Entry).GetProperty("Components", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Entry).GetField("<Components>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ComponentEntryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var complexForms = principalEntityType.AddNavigation("ComplexForms",
                runtimeForeignKey,
                onDependent: false,
                typeof(List<ComplexFormComponent>),
                propertyInfo: typeof(Entry).GetProperty("ComplexForms", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Entry).GetField("<ComplexForms>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("ComponentSenseId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade);

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey4(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SnapshotId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.SetNull,
                unique: true);

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ComplexFormComponents");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
