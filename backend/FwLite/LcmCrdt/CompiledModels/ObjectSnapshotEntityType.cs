// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Json.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SIL.Harmony;
using SIL.Harmony.Core;
using SIL.Harmony.Db;
using SIL.Harmony.Db.EntityConfig;

#pragma warning disable 219, 612, 618
#nullable disable

namespace LcmCrdt.CompiledModels
{
    internal partial class ObjectSnapshotEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "SIL.Harmony.Db.ObjectSnapshot",
                typeof(ObjectSnapshot),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(Guid),
                propertyInfo: typeof(ObjectSnapshot).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ObjectSnapshot).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            id.TypeMapping = SqliteGuidTypeMapping.Default;

            var commitId = runtimeEntityType.AddProperty(
                "CommitId",
                typeof(Guid),
                propertyInfo: typeof(ObjectSnapshot).GetProperty("CommitId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ObjectSnapshot).GetField("<CommitId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            commitId.TypeMapping = SqliteGuidTypeMapping.Default;

            var entity = runtimeEntityType.AddProperty(
                "Entity",
                typeof(IObjectBase),
                propertyInfo: typeof(ObjectSnapshot).GetProperty("Entity", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ObjectSnapshot).GetField("<Entity>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            entity.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<IObjectBase>(
                    (IObjectBase v1, IObjectBase v2) => object.Equals(v1, v2),
                    (IObjectBase v) => v.GetHashCode(),
                    (IObjectBase v) => v),
                keyComparer: new ValueComparer<IObjectBase>(
                    (IObjectBase v1, IObjectBase v2) => object.Equals(v1, v2),
                    (IObjectBase v) => v.GetHashCode(),
                    (IObjectBase v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "jsonb"),
                converter: new ValueConverter<IObjectBase, string>(
                    (IObjectBase entry) => SnapshotEntityConfig.Serialize(entry, null),
                    (string json) => SnapshotEntityConfig.DeserializeObject(json, null)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<IObjectBase, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<IObjectBase, string>(
                        (IObjectBase entry) => SnapshotEntityConfig.Serialize(entry, null),
                        (string json) => SnapshotEntityConfig.DeserializeObject(json, null))));
            entity.AddAnnotation("Relational:ColumnType", "jsonb");

            var entityId = runtimeEntityType.AddProperty(
                "EntityId",
                typeof(Guid),
                propertyInfo: typeof(ObjectSnapshot).GetProperty("EntityId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ObjectSnapshot).GetField("<EntityId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            entityId.TypeMapping = SqliteGuidTypeMapping.Default;

            var entityIsDeleted = runtimeEntityType.AddProperty(
                "EntityIsDeleted",
                typeof(bool),
                propertyInfo: typeof(ObjectSnapshot).GetProperty("EntityIsDeleted", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ObjectSnapshot).GetField("<EntityIsDeleted>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            entityIsDeleted.TypeMapping = BoolTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var isRoot = runtimeEntityType.AddProperty(
                "IsRoot",
                typeof(bool),
                propertyInfo: typeof(ObjectSnapshot).GetProperty("IsRoot", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ObjectSnapshot).GetField("<IsRoot>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: false);
            isRoot.TypeMapping = BoolTypeMapping.Default.Clone(
                comparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                keyComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                providerValueComparer: new ValueComparer<bool>(
                    (bool v1, bool v2) => v1 == v2,
                    (bool v) => v.GetHashCode(),
                    (bool v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var references = runtimeEntityType.AddProperty(
                "References",
                typeof(Guid[]),
                propertyInfo: typeof(ObjectSnapshot).GetProperty("References", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ObjectSnapshot).GetField("<References>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            references.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ListComparer<Guid>(new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => v.GetHashCode(),
                    (Guid v) => v)),
                keyComparer: new ListComparer<Guid>(new ValueComparer<Guid>(
                    (Guid v1, Guid v2) => v1 == v2,
                    (Guid v) => v.GetHashCode(),
                    (Guid v) => v)),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                converter: new CollectionToJsonStringConverter<Guid>(new JsonCollectionReaderWriter<Guid[], Guid[], Guid>(
                    SqliteJsonGuidReaderWriter.Instance)),
                jsonValueReaderWriter: new JsonCollectionReaderWriter<Guid[], Guid[], Guid>(
                    SqliteJsonGuidReaderWriter.Instance),
                elementMapping: SqliteGuidTypeMapping.Default);

            var typeName = runtimeEntityType.AddProperty(
                "TypeName",
                typeof(string),
                propertyInfo: typeof(ObjectSnapshot).GetProperty("TypeName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ObjectSnapshot).GetField("<TypeName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            typeName.TypeMapping = SqliteStringTypeMapping.Default;

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { entityId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { commitId, entityId },
                unique: true);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("CommitId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var commit = declaringEntityType.AddNavigation("Commit",
                runtimeForeignKey,
                onDependent: true,
                typeof(Commit),
                propertyInfo: typeof(ObjectSnapshot).GetProperty("Commit", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ObjectSnapshot).GetField("<Commit>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var snapshots = principalEntityType.AddNavigation("Snapshots",
                runtimeForeignKey,
                onDependent: false,
                typeof(List<ObjectSnapshot>),
                propertyInfo: typeof(Commit).GetProperty("Snapshots", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Commit).GetField("<Snapshots>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Snapshots");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
