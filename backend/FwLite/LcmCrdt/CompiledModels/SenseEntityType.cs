// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiniLcm.Models;

#pragma warning disable 219, 612, 618
#nullable disable

namespace LcmCrdt.CompiledModels
{
    internal partial class SenseEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "MiniLcm.Models.Sense",
                typeof(Sense),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(Guid),
                propertyInfo: typeof(Sense).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Sense).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            id.TypeMapping = SqliteGuidTypeMapping.Default;

            var definition = runtimeEntityType.AddProperty(
                "Definition",
                typeof(RichMultiString),
                propertyInfo: typeof(Sense).GetProperty("Definition", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Sense).GetField("<Definition>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new LcmCrdtDbContext.RichMultiStringDbConverter());
            definition.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<RichMultiString>(
                    (RichMultiString v1, RichMultiString v2) => object.Equals(v1, v2),
                    (RichMultiString v) => v.GetHashCode(),
                    (RichMultiString v) => v),
                keyComparer: new ValueComparer<RichMultiString>(
                    (RichMultiString v1, RichMultiString v2) => object.Equals(v1, v2),
                    (RichMultiString v) => v.GetHashCode(),
                    (RichMultiString v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "jsonb"),
                converter: new ValueConverter<RichMultiString, string>(
                    (RichMultiString mul) => LcmCrdtDbContext.Serialize(mul),
                    (string json) => LcmCrdtDbContext.Deserialize<RichMultiString>(json) ?? new RichMultiString()),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<RichMultiString, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<RichMultiString, string>(
                        (RichMultiString mul) => LcmCrdtDbContext.Serialize(mul),
                        (string json) => LcmCrdtDbContext.Deserialize<RichMultiString>(json) ?? new RichMultiString())));
            definition.AddAnnotation("Relational:ColumnType", "jsonb");

            var deletedAt = runtimeEntityType.AddProperty(
                "DeletedAt",
                typeof(DateTimeOffset?),
                propertyInfo: typeof(Sense).GetProperty("DeletedAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Sense).GetField("<DeletedAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            deletedAt.TypeMapping = SqliteDateTimeOffsetTypeMapping.Default;

            var entryId = runtimeEntityType.AddProperty(
                "EntryId",
                typeof(Guid),
                propertyInfo: typeof(Sense).GetProperty("EntryId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Sense).GetField("<EntryId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new Guid("00000000-0000-0000-0000-000000000000"));
            entryId.TypeMapping = SqliteGuidTypeMapping.Default;

            var gloss = runtimeEntityType.AddProperty(
                "Gloss",
                typeof(MultiString),
                propertyInfo: typeof(Sense).GetProperty("Gloss", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Sense).GetField("<Gloss>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new LcmCrdtDbContext.MultiStringDbConverter());
            gloss.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<MultiString>(
                    (MultiString v1, MultiString v2) => object.Equals(v1, v2),
                    (MultiString v) => v.GetHashCode(),
                    (MultiString v) => v),
                keyComparer: new ValueComparer<MultiString>(
                    (MultiString v1, MultiString v2) => object.Equals(v1, v2),
                    (MultiString v) => v.GetHashCode(),
                    (MultiString v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "jsonb"),
                converter: new ValueConverter<MultiString, string>(
                    (MultiString mul) => LcmCrdtDbContext.Serialize(mul),
                    (string json) => LcmCrdtDbContext.Deserialize<MultiString>(json) ?? new MultiString()),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<MultiString, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<MultiString, string>(
                        (MultiString mul) => LcmCrdtDbContext.Serialize(mul),
                        (string json) => LcmCrdtDbContext.Deserialize<MultiString>(json) ?? new MultiString())));
            gloss.AddAnnotation("Relational:ColumnType", "jsonb");

            var order = runtimeEntityType.AddProperty(
                "Order",
                typeof(double),
                propertyInfo: typeof(Sense).GetProperty("Order", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Sense).GetField("<Order>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0.0);
            order.TypeMapping = DoubleTypeMapping.Default.Clone(
                comparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                keyComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                providerValueComparer: new ValueComparer<double>(
                    (double v1, double v2) => v1.Equals(v2),
                    (double v) => v.GetHashCode(),
                    (double v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "REAL"));

            var partOfSpeechId = runtimeEntityType.AddProperty(
                "PartOfSpeechId",
                typeof(Guid?),
                propertyInfo: typeof(Sense).GetProperty("PartOfSpeechId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Sense).GetField("<PartOfSpeechId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            partOfSpeechId.TypeMapping = SqliteGuidTypeMapping.Default;

            var semanticDomains = runtimeEntityType.AddProperty(
                "SemanticDomains",
                typeof(IList<SemanticDomain>),
                propertyInfo: typeof(Sense).GetProperty("SemanticDomains", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Sense).GetField("<SemanticDomains>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            semanticDomains.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<IList<SemanticDomain>>(
                    (IList<SemanticDomain> v1, IList<SemanticDomain> v2) => object.Equals(v1, v2),
                    (IList<SemanticDomain> v) => v.GetHashCode(),
                    (IList<SemanticDomain> v) => v),
                keyComparer: new ValueComparer<IList<SemanticDomain>>(
                    (IList<SemanticDomain> v1, IList<SemanticDomain> v2) => object.Equals(v1, v2),
                    (IList<SemanticDomain> v) => v.GetHashCode(),
                    (IList<SemanticDomain> v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "jsonb"),
                converter: new ValueConverter<IList<SemanticDomain>, string>(
                    (IList<SemanticDomain> list) => LcmCrdtDbContext.Serialize(list),
                    (string json) => LcmCrdtDbContext.Deserialize<List<SemanticDomain>>(json) ?? new List<SemanticDomain>()),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<IList<SemanticDomain>, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<IList<SemanticDomain>, string>(
                        (IList<SemanticDomain> list) => LcmCrdtDbContext.Serialize(list),
                        (string json) => LcmCrdtDbContext.Deserialize<List<SemanticDomain>>(json) ?? new List<SemanticDomain>())));
            semanticDomains.AddAnnotation("Relational:ColumnType", "jsonb");

            var snapshotId = runtimeEntityType.AddProperty(
                "SnapshotId",
                typeof(Guid?),
                nullable: true);
            snapshotId.TypeMapping = SqliteGuidTypeMapping.Default;

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { entryId });

            var index0 = runtimeEntityType.AddIndex(
                new[] { partOfSpeechId });

            var index1 = runtimeEntityType.AddIndex(
                new[] { snapshotId },
                unique: true);

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("EntryId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true);

            var senses = principalEntityType.AddNavigation("Senses",
                runtimeForeignKey,
                onDependent: false,
                typeof(List<Sense>),
                propertyInfo: typeof(Entry).GetProperty("Senses", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Entry).GetField("<Senses>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey2(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("PartOfSpeechId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType);

            var partOfSpeech = declaringEntityType.AddNavigation("PartOfSpeech",
                runtimeForeignKey,
                onDependent: true,
                typeof(PartOfSpeech),
                propertyInfo: typeof(Sense).GetProperty("PartOfSpeech", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Sense).GetField("<PartOfSpeech>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            return runtimeForeignKey;
        }

        public static RuntimeForeignKey CreateForeignKey3(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("SnapshotId") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Id") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.SetNull,
                unique: true);

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Sense");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
