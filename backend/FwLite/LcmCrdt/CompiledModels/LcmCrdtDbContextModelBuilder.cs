// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace LcmCrdt.CompiledModels
{
    public partial class LcmCrdtDbContextModel
    {
        partial void Initialize()
        {
            var projectData = ProjectDataEntityType.Create(this);
            var complexFormComponent = ComplexFormComponentEntityType.Create(this);
            var complexFormType = ComplexFormTypeEntityType.Create(this);
            var entry = EntryEntityType.Create(this);
            var exampleSentence = ExampleSentenceEntityType.Create(this);
            var partOfSpeech = PartOfSpeechEntityType.Create(this);
            var publication = PublicationEntityType.Create(this);
            var semanticDomain = SemanticDomainEntityType.Create(this);
            var sense = SenseEntityType.Create(this);
            var writingSystem = WritingSystemEntityType.Create(this);
            var commit = CommitEntityType.Create(this);
            var changeEntity = ChangeEntityEntityType.Create(this);
            var objectSnapshot = ObjectSnapshotEntityType.Create(this);

            ComplexFormComponentEntityType.CreateForeignKey1(complexFormComponent, entry);
            ComplexFormComponentEntityType.CreateForeignKey2(complexFormComponent, entry);
            ComplexFormComponentEntityType.CreateForeignKey3(complexFormComponent, sense);
            ComplexFormComponentEntityType.CreateForeignKey4(complexFormComponent, objectSnapshot);
            ComplexFormTypeEntityType.CreateForeignKey1(complexFormType, objectSnapshot);
            EntryEntityType.CreateForeignKey1(entry, objectSnapshot);
            ExampleSentenceEntityType.CreateForeignKey1(exampleSentence, sense);
            ExampleSentenceEntityType.CreateForeignKey2(exampleSentence, objectSnapshot);
            PartOfSpeechEntityType.CreateForeignKey1(partOfSpeech, objectSnapshot);
            PublicationEntityType.CreateForeignKey1(publication, objectSnapshot);
            SemanticDomainEntityType.CreateForeignKey1(semanticDomain, objectSnapshot);
            SenseEntityType.CreateForeignKey1(sense, entry);
            SenseEntityType.CreateForeignKey2(sense, partOfSpeech);
            SenseEntityType.CreateForeignKey3(sense, objectSnapshot);
            WritingSystemEntityType.CreateForeignKey1(writingSystem, objectSnapshot);
            ChangeEntityEntityType.CreateForeignKey1(changeEntity, commit);
            ObjectSnapshotEntityType.CreateForeignKey1(objectSnapshot, commit);

            ProjectDataEntityType.CreateAnnotations(projectData);
            ComplexFormComponentEntityType.CreateAnnotations(complexFormComponent);
            ComplexFormTypeEntityType.CreateAnnotations(complexFormType);
            EntryEntityType.CreateAnnotations(entry);
            ExampleSentenceEntityType.CreateAnnotations(exampleSentence);
            PartOfSpeechEntityType.CreateAnnotations(partOfSpeech);
            PublicationEntityType.CreateAnnotations(publication);
            SemanticDomainEntityType.CreateAnnotations(semanticDomain);
            SenseEntityType.CreateAnnotations(sense);
            WritingSystemEntityType.CreateAnnotations(writingSystem);
            CommitEntityType.CreateAnnotations(commit);
            ChangeEntityEntityType.CreateAnnotations(changeEntity);
            ObjectSnapshotEntityType.CreateAnnotations(objectSnapshot);

            AddAnnotation("ProductVersion", "8.0.15");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var projectData = FindEntityType("LcmCrdt.ProjectData")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            projectData.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var lcmCrdtProjectDataTableBase = new TableBase("LcmCrdt.ProjectData", null, relationalModel);
            var clientIdColumnBase = new ColumnBase<ColumnMappingBase>("ClientId", "TEXT", lcmCrdtProjectDataTableBase);
            lcmCrdtProjectDataTableBase.Columns.Add("ClientId", clientIdColumnBase);
            var codeColumnBase = new ColumnBase<ColumnMappingBase>("Code", "TEXT", lcmCrdtProjectDataTableBase);
            lcmCrdtProjectDataTableBase.Columns.Add("Code", codeColumnBase);
            var fwProjectIdColumnBase = new ColumnBase<ColumnMappingBase>("FwProjectId", "TEXT", lcmCrdtProjectDataTableBase)
            {
                IsNullable = true
            };
            lcmCrdtProjectDataTableBase.Columns.Add("FwProjectId", fwProjectIdColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "TEXT", lcmCrdtProjectDataTableBase);
            lcmCrdtProjectDataTableBase.Columns.Add("Id", idColumnBase);
            var lastUserIdColumnBase = new ColumnBase<ColumnMappingBase>("LastUserId", "TEXT", lcmCrdtProjectDataTableBase)
            {
                IsNullable = true
            };
            lcmCrdtProjectDataTableBase.Columns.Add("LastUserId", lastUserIdColumnBase);
            var lastUserNameColumnBase = new ColumnBase<ColumnMappingBase>("LastUserName", "TEXT", lcmCrdtProjectDataTableBase)
            {
                IsNullable = true
            };
            lcmCrdtProjectDataTableBase.Columns.Add("LastUserName", lastUserNameColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "TEXT", lcmCrdtProjectDataTableBase);
            lcmCrdtProjectDataTableBase.Columns.Add("Name", nameColumnBase);
            var originDomainColumnBase = new ColumnBase<ColumnMappingBase>("OriginDomain", "TEXT", lcmCrdtProjectDataTableBase)
            {
                IsNullable = true
            };
            lcmCrdtProjectDataTableBase.Columns.Add("OriginDomain", originDomainColumnBase);
            relationalModel.DefaultTables.Add("LcmCrdt.ProjectData", lcmCrdtProjectDataTableBase);
            var lcmCrdtProjectDataMappingBase = new TableMappingBase<ColumnMappingBase>(projectData, lcmCrdtProjectDataTableBase, true);
            lcmCrdtProjectDataTableBase.AddTypeMapping(lcmCrdtProjectDataMappingBase, false);
            defaultTableMappings.Add(lcmCrdtProjectDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, projectData.FindProperty("Id")!, lcmCrdtProjectDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)clientIdColumnBase, projectData.FindProperty("ClientId")!, lcmCrdtProjectDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)codeColumnBase, projectData.FindProperty("Code")!, lcmCrdtProjectDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fwProjectIdColumnBase, projectData.FindProperty("FwProjectId")!, lcmCrdtProjectDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastUserIdColumnBase, projectData.FindProperty("LastUserId")!, lcmCrdtProjectDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lastUserNameColumnBase, projectData.FindProperty("LastUserName")!, lcmCrdtProjectDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, projectData.FindProperty("Name")!, lcmCrdtProjectDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)originDomainColumnBase, projectData.FindProperty("OriginDomain")!, lcmCrdtProjectDataMappingBase);

            var tableMappings = new List<TableMapping>();
            projectData.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var projectDataTable = new Table("ProjectData", null, relationalModel);
            var idColumn = new Column("Id", "TEXT", projectDataTable);
            projectDataTable.Columns.Add("Id", idColumn);
            var clientIdColumn = new Column("ClientId", "TEXT", projectDataTable);
            projectDataTable.Columns.Add("ClientId", clientIdColumn);
            var codeColumn = new Column("Code", "TEXT", projectDataTable);
            projectDataTable.Columns.Add("Code", codeColumn);
            var fwProjectIdColumn = new Column("FwProjectId", "TEXT", projectDataTable)
            {
                IsNullable = true
            };
            projectDataTable.Columns.Add("FwProjectId", fwProjectIdColumn);
            var lastUserIdColumn = new Column("LastUserId", "TEXT", projectDataTable)
            {
                IsNullable = true
            };
            projectDataTable.Columns.Add("LastUserId", lastUserIdColumn);
            var lastUserNameColumn = new Column("LastUserName", "TEXT", projectDataTable)
            {
                IsNullable = true
            };
            projectDataTable.Columns.Add("LastUserName", lastUserNameColumn);
            var nameColumn = new Column("Name", "TEXT", projectDataTable);
            projectDataTable.Columns.Add("Name", nameColumn);
            var originDomainColumn = new Column("OriginDomain", "TEXT", projectDataTable)
            {
                IsNullable = true
            };
            projectDataTable.Columns.Add("OriginDomain", originDomainColumn);
            var pK_ProjectData = new UniqueConstraint("PK_ProjectData", projectDataTable, new[] { idColumn });
            projectDataTable.PrimaryKey = pK_ProjectData;
            var pK_ProjectDataUc = RelationalModel.GetKey(this,
                "LcmCrdt.ProjectData",
                new[] { "Id" });
            pK_ProjectData.MappedKeys.Add(pK_ProjectDataUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ProjectDataUc).Add(pK_ProjectData);
            projectDataTable.UniqueConstraints.Add("PK_ProjectData", pK_ProjectData);
            relationalModel.Tables.Add(("ProjectData", null), projectDataTable);
            var projectDataTableMapping = new TableMapping(projectData, projectDataTable, true);
            projectDataTable.AddTypeMapping(projectDataTableMapping, false);
            tableMappings.Add(projectDataTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, projectData.FindProperty("Id")!, projectDataTableMapping);
            RelationalModel.CreateColumnMapping(clientIdColumn, projectData.FindProperty("ClientId")!, projectDataTableMapping);
            RelationalModel.CreateColumnMapping(codeColumn, projectData.FindProperty("Code")!, projectDataTableMapping);
            RelationalModel.CreateColumnMapping(fwProjectIdColumn, projectData.FindProperty("FwProjectId")!, projectDataTableMapping);
            RelationalModel.CreateColumnMapping(lastUserIdColumn, projectData.FindProperty("LastUserId")!, projectDataTableMapping);
            RelationalModel.CreateColumnMapping(lastUserNameColumn, projectData.FindProperty("LastUserName")!, projectDataTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, projectData.FindProperty("Name")!, projectDataTableMapping);
            RelationalModel.CreateColumnMapping(originDomainColumn, projectData.FindProperty("OriginDomain")!, projectDataTableMapping);

            var complexFormComponent = FindEntityType("MiniLcm.Models.ComplexFormComponent")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            complexFormComponent.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var miniLcmModelsComplexFormComponentTableBase = new TableBase("MiniLcm.Models.ComplexFormComponent", null, relationalModel);
            var complexFormEntryIdColumnBase = new ColumnBase<ColumnMappingBase>("ComplexFormEntryId", "TEXT", miniLcmModelsComplexFormComponentTableBase);
            miniLcmModelsComplexFormComponentTableBase.Columns.Add("ComplexFormEntryId", complexFormEntryIdColumnBase);
            var complexFormHeadwordColumnBase = new ColumnBase<ColumnMappingBase>("ComplexFormHeadword", "TEXT", miniLcmModelsComplexFormComponentTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsComplexFormComponentTableBase.Columns.Add("ComplexFormHeadword", complexFormHeadwordColumnBase);
            var componentEntryIdColumnBase = new ColumnBase<ColumnMappingBase>("ComponentEntryId", "TEXT", miniLcmModelsComplexFormComponentTableBase);
            miniLcmModelsComplexFormComponentTableBase.Columns.Add("ComponentEntryId", componentEntryIdColumnBase);
            var componentHeadwordColumnBase = new ColumnBase<ColumnMappingBase>("ComponentHeadword", "TEXT", miniLcmModelsComplexFormComponentTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsComplexFormComponentTableBase.Columns.Add("ComponentHeadword", componentHeadwordColumnBase);
            var componentSenseIdColumnBase = new ColumnBase<ColumnMappingBase>("ComponentSenseId", "TEXT", miniLcmModelsComplexFormComponentTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsComplexFormComponentTableBase.Columns.Add("ComponentSenseId", componentSenseIdColumnBase);
            var deletedAtColumnBase = new ColumnBase<ColumnMappingBase>("DeletedAt", "TEXT", miniLcmModelsComplexFormComponentTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsComplexFormComponentTableBase.Columns.Add("DeletedAt", deletedAtColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", miniLcmModelsComplexFormComponentTableBase);
            miniLcmModelsComplexFormComponentTableBase.Columns.Add("Id", idColumnBase0);
            var orderColumnBase = new ColumnBase<ColumnMappingBase>("Order", "REAL", miniLcmModelsComplexFormComponentTableBase);
            miniLcmModelsComplexFormComponentTableBase.Columns.Add("Order", orderColumnBase);
            var snapshotIdColumnBase = new ColumnBase<ColumnMappingBase>("SnapshotId", "TEXT", miniLcmModelsComplexFormComponentTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsComplexFormComponentTableBase.Columns.Add("SnapshotId", snapshotIdColumnBase);
            relationalModel.DefaultTables.Add("MiniLcm.Models.ComplexFormComponent", miniLcmModelsComplexFormComponentTableBase);
            var miniLcmModelsComplexFormComponentMappingBase = new TableMappingBase<ColumnMappingBase>(complexFormComponent, miniLcmModelsComplexFormComponentTableBase, true);
            miniLcmModelsComplexFormComponentTableBase.AddTypeMapping(miniLcmModelsComplexFormComponentMappingBase, false);
            defaultTableMappings0.Add(miniLcmModelsComplexFormComponentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, complexFormComponent.FindProperty("Id")!, miniLcmModelsComplexFormComponentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)complexFormEntryIdColumnBase, complexFormComponent.FindProperty("ComplexFormEntryId")!, miniLcmModelsComplexFormComponentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)complexFormHeadwordColumnBase, complexFormComponent.FindProperty("ComplexFormHeadword")!, miniLcmModelsComplexFormComponentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)componentEntryIdColumnBase, complexFormComponent.FindProperty("ComponentEntryId")!, miniLcmModelsComplexFormComponentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)componentHeadwordColumnBase, complexFormComponent.FindProperty("ComponentHeadword")!, miniLcmModelsComplexFormComponentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)componentSenseIdColumnBase, complexFormComponent.FindProperty("ComponentSenseId")!, miniLcmModelsComplexFormComponentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletedAtColumnBase, complexFormComponent.FindProperty("DeletedAt")!, miniLcmModelsComplexFormComponentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)orderColumnBase, complexFormComponent.FindProperty("Order")!, miniLcmModelsComplexFormComponentMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)snapshotIdColumnBase, complexFormComponent.FindProperty("SnapshotId")!, miniLcmModelsComplexFormComponentMappingBase);

            var tableMappings0 = new List<TableMapping>();
            complexFormComponent.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var complexFormComponentsTable = new Table("ComplexFormComponents", null, relationalModel);
            var idColumn0 = new Column("Id", "TEXT", complexFormComponentsTable);
            complexFormComponentsTable.Columns.Add("Id", idColumn0);
            var complexFormEntryIdColumn = new Column("ComplexFormEntryId", "TEXT", complexFormComponentsTable);
            complexFormComponentsTable.Columns.Add("ComplexFormEntryId", complexFormEntryIdColumn);
            var complexFormHeadwordColumn = new Column("ComplexFormHeadword", "TEXT", complexFormComponentsTable)
            {
                IsNullable = true
            };
            complexFormComponentsTable.Columns.Add("ComplexFormHeadword", complexFormHeadwordColumn);
            var componentEntryIdColumn = new Column("ComponentEntryId", "TEXT", complexFormComponentsTable);
            complexFormComponentsTable.Columns.Add("ComponentEntryId", componentEntryIdColumn);
            var componentHeadwordColumn = new Column("ComponentHeadword", "TEXT", complexFormComponentsTable)
            {
                IsNullable = true
            };
            complexFormComponentsTable.Columns.Add("ComponentHeadword", componentHeadwordColumn);
            var componentSenseIdColumn = new Column("ComponentSenseId", "TEXT", complexFormComponentsTable)
            {
                IsNullable = true
            };
            complexFormComponentsTable.Columns.Add("ComponentSenseId", componentSenseIdColumn);
            var deletedAtColumn = new Column("DeletedAt", "TEXT", complexFormComponentsTable)
            {
                IsNullable = true
            };
            complexFormComponentsTable.Columns.Add("DeletedAt", deletedAtColumn);
            var orderColumn = new Column("Order", "REAL", complexFormComponentsTable);
            complexFormComponentsTable.Columns.Add("Order", orderColumn);
            var snapshotIdColumn = new Column("SnapshotId", "TEXT", complexFormComponentsTable)
            {
                IsNullable = true
            };
            complexFormComponentsTable.Columns.Add("SnapshotId", snapshotIdColumn);
            var pK_ComplexFormComponents = new UniqueConstraint("PK_ComplexFormComponents", complexFormComponentsTable, new[] { idColumn0 });
            complexFormComponentsTable.PrimaryKey = pK_ComplexFormComponents;
            var pK_ComplexFormComponentsUc = RelationalModel.GetKey(this,
                "MiniLcm.Models.ComplexFormComponent",
                new[] { "Id" });
            pK_ComplexFormComponents.MappedKeys.Add(pK_ComplexFormComponentsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ComplexFormComponentsUc).Add(pK_ComplexFormComponents);
            complexFormComponentsTable.UniqueConstraints.Add("PK_ComplexFormComponents", pK_ComplexFormComponents);
            var iX_ComplexFormComponents_ComplexFormEntryId_ComponentEntryId = new TableIndex(
            "IX_ComplexFormComponents_ComplexFormEntryId_ComponentEntryId", complexFormComponentsTable, new[] { complexFormEntryIdColumn, componentEntryIdColumn }, true);
            var iX_ComplexFormComponents_ComplexFormEntryId_ComponentEntryIdIx = RelationalModel.GetIndex(this,
                "MiniLcm.Models.ComplexFormComponent",
                new[] { "ComplexFormEntryId", "ComponentEntryId" });
            iX_ComplexFormComponents_ComplexFormEntryId_ComponentEntryId.MappedIndexes.Add(iX_ComplexFormComponents_ComplexFormEntryId_ComponentEntryIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ComplexFormComponents_ComplexFormEntryId_ComponentEntryIdIx).Add(iX_ComplexFormComponents_ComplexFormEntryId_ComponentEntryId);
            complexFormComponentsTable.Indexes.Add("IX_ComplexFormComponents_ComplexFormEntryId_ComponentEntryId", iX_ComplexFormComponents_ComplexFormEntryId_ComponentEntryId);
            var iX_ComplexFormComponents_ComplexFormEntryId_ComponentEntryId_ComponentSenseId = new TableIndex(
            "IX_ComplexFormComponents_ComplexFormEntryId_ComponentEntryId_ComponentSenseId", complexFormComponentsTable, new[] { complexFormEntryIdColumn, componentEntryIdColumn, componentSenseIdColumn }, true);
            var iX_ComplexFormComponents_ComplexFormEntryId_ComponentEntryId_ComponentSenseIdIx = RelationalModel.GetIndex(this,
                "MiniLcm.Models.ComplexFormComponent",
                new[] { "ComplexFormEntryId", "ComponentEntryId", "ComponentSenseId" });
            iX_ComplexFormComponents_ComplexFormEntryId_ComponentEntryId_ComponentSenseId.MappedIndexes.Add(iX_ComplexFormComponents_ComplexFormEntryId_ComponentEntryId_ComponentSenseIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ComplexFormComponents_ComplexFormEntryId_ComponentEntryId_ComponentSenseIdIx).Add(iX_ComplexFormComponents_ComplexFormEntryId_ComponentEntryId_ComponentSenseId);
            complexFormComponentsTable.Indexes.Add("IX_ComplexFormComponents_ComplexFormEntryId_ComponentEntryId_ComponentSenseId", iX_ComplexFormComponents_ComplexFormEntryId_ComponentEntryId_ComponentSenseId);
            var iX_ComplexFormComponents_ComponentEntryId = new TableIndex(
            "IX_ComplexFormComponents_ComponentEntryId", complexFormComponentsTable, new[] { componentEntryIdColumn }, false);
            var iX_ComplexFormComponents_ComponentEntryIdIx = RelationalModel.GetIndex(this,
                "MiniLcm.Models.ComplexFormComponent",
                new[] { "ComponentEntryId" });
            iX_ComplexFormComponents_ComponentEntryId.MappedIndexes.Add(iX_ComplexFormComponents_ComponentEntryIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ComplexFormComponents_ComponentEntryIdIx).Add(iX_ComplexFormComponents_ComponentEntryId);
            complexFormComponentsTable.Indexes.Add("IX_ComplexFormComponents_ComponentEntryId", iX_ComplexFormComponents_ComponentEntryId);
            var iX_ComplexFormComponents_ComponentSenseId = new TableIndex(
            "IX_ComplexFormComponents_ComponentSenseId", complexFormComponentsTable, new[] { componentSenseIdColumn }, false);
            var iX_ComplexFormComponents_ComponentSenseIdIx = RelationalModel.GetIndex(this,
                "MiniLcm.Models.ComplexFormComponent",
                new[] { "ComponentSenseId" });
            iX_ComplexFormComponents_ComponentSenseId.MappedIndexes.Add(iX_ComplexFormComponents_ComponentSenseIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ComplexFormComponents_ComponentSenseIdIx).Add(iX_ComplexFormComponents_ComponentSenseId);
            complexFormComponentsTable.Indexes.Add("IX_ComplexFormComponents_ComponentSenseId", iX_ComplexFormComponents_ComponentSenseId);
            var iX_ComplexFormComponents_SnapshotId = new TableIndex(
            "IX_ComplexFormComponents_SnapshotId", complexFormComponentsTable, new[] { snapshotIdColumn }, true);
            var iX_ComplexFormComponents_SnapshotIdIx = RelationalModel.GetIndex(this,
                "MiniLcm.Models.ComplexFormComponent",
                new[] { "SnapshotId" });
            iX_ComplexFormComponents_SnapshotId.MappedIndexes.Add(iX_ComplexFormComponents_SnapshotIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ComplexFormComponents_SnapshotIdIx).Add(iX_ComplexFormComponents_SnapshotId);
            complexFormComponentsTable.Indexes.Add("IX_ComplexFormComponents_SnapshotId", iX_ComplexFormComponents_SnapshotId);
            relationalModel.Tables.Add(("ComplexFormComponents", null), complexFormComponentsTable);
            var complexFormComponentsTableMapping = new TableMapping(complexFormComponent, complexFormComponentsTable, true);
            complexFormComponentsTable.AddTypeMapping(complexFormComponentsTableMapping, false);
            tableMappings0.Add(complexFormComponentsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, complexFormComponent.FindProperty("Id")!, complexFormComponentsTableMapping);
            RelationalModel.CreateColumnMapping(complexFormEntryIdColumn, complexFormComponent.FindProperty("ComplexFormEntryId")!, complexFormComponentsTableMapping);
            RelationalModel.CreateColumnMapping(complexFormHeadwordColumn, complexFormComponent.FindProperty("ComplexFormHeadword")!, complexFormComponentsTableMapping);
            RelationalModel.CreateColumnMapping(componentEntryIdColumn, complexFormComponent.FindProperty("ComponentEntryId")!, complexFormComponentsTableMapping);
            RelationalModel.CreateColumnMapping(componentHeadwordColumn, complexFormComponent.FindProperty("ComponentHeadword")!, complexFormComponentsTableMapping);
            RelationalModel.CreateColumnMapping(componentSenseIdColumn, complexFormComponent.FindProperty("ComponentSenseId")!, complexFormComponentsTableMapping);
            RelationalModel.CreateColumnMapping(deletedAtColumn, complexFormComponent.FindProperty("DeletedAt")!, complexFormComponentsTableMapping);
            RelationalModel.CreateColumnMapping(orderColumn, complexFormComponent.FindProperty("Order")!, complexFormComponentsTableMapping);
            RelationalModel.CreateColumnMapping(snapshotIdColumn, complexFormComponent.FindProperty("SnapshotId")!, complexFormComponentsTableMapping);

            var complexFormType = FindEntityType("MiniLcm.Models.ComplexFormType")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            complexFormType.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var miniLcmModelsComplexFormTypeTableBase = new TableBase("MiniLcm.Models.ComplexFormType", null, relationalModel);
            var deletedAtColumnBase0 = new ColumnBase<ColumnMappingBase>("DeletedAt", "TEXT", miniLcmModelsComplexFormTypeTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsComplexFormTypeTableBase.Columns.Add("DeletedAt", deletedAtColumnBase0);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", miniLcmModelsComplexFormTypeTableBase);
            miniLcmModelsComplexFormTypeTableBase.Columns.Add("Id", idColumnBase1);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "jsonb", miniLcmModelsComplexFormTypeTableBase);
            miniLcmModelsComplexFormTypeTableBase.Columns.Add("Name", nameColumnBase0);
            var snapshotIdColumnBase0 = new ColumnBase<ColumnMappingBase>("SnapshotId", "TEXT", miniLcmModelsComplexFormTypeTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsComplexFormTypeTableBase.Columns.Add("SnapshotId", snapshotIdColumnBase0);
            relationalModel.DefaultTables.Add("MiniLcm.Models.ComplexFormType", miniLcmModelsComplexFormTypeTableBase);
            var miniLcmModelsComplexFormTypeMappingBase = new TableMappingBase<ColumnMappingBase>(complexFormType, miniLcmModelsComplexFormTypeTableBase, true);
            miniLcmModelsComplexFormTypeTableBase.AddTypeMapping(miniLcmModelsComplexFormTypeMappingBase, false);
            defaultTableMappings1.Add(miniLcmModelsComplexFormTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, complexFormType.FindProperty("Id")!, miniLcmModelsComplexFormTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletedAtColumnBase0, complexFormType.FindProperty("DeletedAt")!, miniLcmModelsComplexFormTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, complexFormType.FindProperty("Name")!, miniLcmModelsComplexFormTypeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)snapshotIdColumnBase0, complexFormType.FindProperty("SnapshotId")!, miniLcmModelsComplexFormTypeMappingBase);

            var tableMappings1 = new List<TableMapping>();
            complexFormType.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var complexFormTypeTable = new Table("ComplexFormType", null, relationalModel);
            var idColumn1 = new Column("Id", "TEXT", complexFormTypeTable);
            complexFormTypeTable.Columns.Add("Id", idColumn1);
            var deletedAtColumn0 = new Column("DeletedAt", "TEXT", complexFormTypeTable)
            {
                IsNullable = true
            };
            complexFormTypeTable.Columns.Add("DeletedAt", deletedAtColumn0);
            var nameColumn0 = new Column("Name", "jsonb", complexFormTypeTable);
            complexFormTypeTable.Columns.Add("Name", nameColumn0);
            var snapshotIdColumn0 = new Column("SnapshotId", "TEXT", complexFormTypeTable)
            {
                IsNullable = true
            };
            complexFormTypeTable.Columns.Add("SnapshotId", snapshotIdColumn0);
            var pK_ComplexFormType = new UniqueConstraint("PK_ComplexFormType", complexFormTypeTable, new[] { idColumn1 });
            complexFormTypeTable.PrimaryKey = pK_ComplexFormType;
            var pK_ComplexFormTypeUc = RelationalModel.GetKey(this,
                "MiniLcm.Models.ComplexFormType",
                new[] { "Id" });
            pK_ComplexFormType.MappedKeys.Add(pK_ComplexFormTypeUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ComplexFormTypeUc).Add(pK_ComplexFormType);
            complexFormTypeTable.UniqueConstraints.Add("PK_ComplexFormType", pK_ComplexFormType);
            var iX_ComplexFormType_SnapshotId = new TableIndex(
            "IX_ComplexFormType_SnapshotId", complexFormTypeTable, new[] { snapshotIdColumn0 }, true);
            var iX_ComplexFormType_SnapshotIdIx = RelationalModel.GetIndex(this,
                "MiniLcm.Models.ComplexFormType",
                new[] { "SnapshotId" });
            iX_ComplexFormType_SnapshotId.MappedIndexes.Add(iX_ComplexFormType_SnapshotIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ComplexFormType_SnapshotIdIx).Add(iX_ComplexFormType_SnapshotId);
            complexFormTypeTable.Indexes.Add("IX_ComplexFormType_SnapshotId", iX_ComplexFormType_SnapshotId);
            relationalModel.Tables.Add(("ComplexFormType", null), complexFormTypeTable);
            var complexFormTypeTableMapping = new TableMapping(complexFormType, complexFormTypeTable, true);
            complexFormTypeTable.AddTypeMapping(complexFormTypeTableMapping, false);
            tableMappings1.Add(complexFormTypeTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, complexFormType.FindProperty("Id")!, complexFormTypeTableMapping);
            RelationalModel.CreateColumnMapping(deletedAtColumn0, complexFormType.FindProperty("DeletedAt")!, complexFormTypeTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, complexFormType.FindProperty("Name")!, complexFormTypeTableMapping);
            RelationalModel.CreateColumnMapping(snapshotIdColumn0, complexFormType.FindProperty("SnapshotId")!, complexFormTypeTableMapping);

            var entry = FindEntityType("MiniLcm.Models.Entry")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            entry.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var miniLcmModelsEntryTableBase = new TableBase("MiniLcm.Models.Entry", null, relationalModel);
            var citationFormColumnBase = new ColumnBase<ColumnMappingBase>("CitationForm", "jsonb", miniLcmModelsEntryTableBase);
            miniLcmModelsEntryTableBase.Columns.Add("CitationForm", citationFormColumnBase);
            var complexFormTypesColumnBase = new ColumnBase<ColumnMappingBase>("ComplexFormTypes", "jsonb", miniLcmModelsEntryTableBase);
            miniLcmModelsEntryTableBase.Columns.Add("ComplexFormTypes", complexFormTypesColumnBase);
            var deletedAtColumnBase1 = new ColumnBase<ColumnMappingBase>("DeletedAt", "TEXT", miniLcmModelsEntryTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsEntryTableBase.Columns.Add("DeletedAt", deletedAtColumnBase1);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", miniLcmModelsEntryTableBase);
            miniLcmModelsEntryTableBase.Columns.Add("Id", idColumnBase2);
            var lexemeFormColumnBase = new ColumnBase<ColumnMappingBase>("LexemeForm", "jsonb", miniLcmModelsEntryTableBase);
            miniLcmModelsEntryTableBase.Columns.Add("LexemeForm", lexemeFormColumnBase);
            var literalMeaningColumnBase = new ColumnBase<ColumnMappingBase>("LiteralMeaning", "jsonb", miniLcmModelsEntryTableBase);
            miniLcmModelsEntryTableBase.Columns.Add("LiteralMeaning", literalMeaningColumnBase);
            var noteColumnBase = new ColumnBase<ColumnMappingBase>("Note", "jsonb", miniLcmModelsEntryTableBase);
            miniLcmModelsEntryTableBase.Columns.Add("Note", noteColumnBase);
            var publishInColumnBase = new ColumnBase<ColumnMappingBase>("PublishIn", "jsonb", miniLcmModelsEntryTableBase);
            miniLcmModelsEntryTableBase.Columns.Add("PublishIn", publishInColumnBase);
            var snapshotIdColumnBase1 = new ColumnBase<ColumnMappingBase>("SnapshotId", "TEXT", miniLcmModelsEntryTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsEntryTableBase.Columns.Add("SnapshotId", snapshotIdColumnBase1);
            relationalModel.DefaultTables.Add("MiniLcm.Models.Entry", miniLcmModelsEntryTableBase);
            var miniLcmModelsEntryMappingBase = new TableMappingBase<ColumnMappingBase>(entry, miniLcmModelsEntryTableBase, true);
            miniLcmModelsEntryTableBase.AddTypeMapping(miniLcmModelsEntryMappingBase, false);
            defaultTableMappings2.Add(miniLcmModelsEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, entry.FindProperty("Id")!, miniLcmModelsEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)citationFormColumnBase, entry.FindProperty("CitationForm")!, miniLcmModelsEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)complexFormTypesColumnBase, entry.FindProperty("ComplexFormTypes")!, miniLcmModelsEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletedAtColumnBase1, entry.FindProperty("DeletedAt")!, miniLcmModelsEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)lexemeFormColumnBase, entry.FindProperty("LexemeForm")!, miniLcmModelsEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)literalMeaningColumnBase, entry.FindProperty("LiteralMeaning")!, miniLcmModelsEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)noteColumnBase, entry.FindProperty("Note")!, miniLcmModelsEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)publishInColumnBase, entry.FindProperty("PublishIn")!, miniLcmModelsEntryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)snapshotIdColumnBase1, entry.FindProperty("SnapshotId")!, miniLcmModelsEntryMappingBase);

            var tableMappings2 = new List<TableMapping>();
            entry.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var entryTable = new Table("Entry", null, relationalModel);
            var idColumn2 = new Column("Id", "TEXT", entryTable);
            entryTable.Columns.Add("Id", idColumn2);
            var citationFormColumn = new Column("CitationForm", "jsonb", entryTable);
            entryTable.Columns.Add("CitationForm", citationFormColumn);
            var complexFormTypesColumn = new Column("ComplexFormTypes", "jsonb", entryTable);
            entryTable.Columns.Add("ComplexFormTypes", complexFormTypesColumn);
            var deletedAtColumn1 = new Column("DeletedAt", "TEXT", entryTable)
            {
                IsNullable = true
            };
            entryTable.Columns.Add("DeletedAt", deletedAtColumn1);
            var lexemeFormColumn = new Column("LexemeForm", "jsonb", entryTable);
            entryTable.Columns.Add("LexemeForm", lexemeFormColumn);
            var literalMeaningColumn = new Column("LiteralMeaning", "jsonb", entryTable);
            entryTable.Columns.Add("LiteralMeaning", literalMeaningColumn);
            var noteColumn = new Column("Note", "jsonb", entryTable);
            entryTable.Columns.Add("Note", noteColumn);
            var publishInColumn = new Column("PublishIn", "jsonb", entryTable);
            entryTable.Columns.Add("PublishIn", publishInColumn);
            var snapshotIdColumn1 = new Column("SnapshotId", "TEXT", entryTable)
            {
                IsNullable = true
            };
            entryTable.Columns.Add("SnapshotId", snapshotIdColumn1);
            var pK_Entry = new UniqueConstraint("PK_Entry", entryTable, new[] { idColumn2 });
            entryTable.PrimaryKey = pK_Entry;
            var pK_EntryUc = RelationalModel.GetKey(this,
                "MiniLcm.Models.Entry",
                new[] { "Id" });
            pK_Entry.MappedKeys.Add(pK_EntryUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_EntryUc).Add(pK_Entry);
            entryTable.UniqueConstraints.Add("PK_Entry", pK_Entry);
            var iX_Entry_SnapshotId = new TableIndex(
            "IX_Entry_SnapshotId", entryTable, new[] { snapshotIdColumn1 }, true);
            var iX_Entry_SnapshotIdIx = RelationalModel.GetIndex(this,
                "MiniLcm.Models.Entry",
                new[] { "SnapshotId" });
            iX_Entry_SnapshotId.MappedIndexes.Add(iX_Entry_SnapshotIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Entry_SnapshotIdIx).Add(iX_Entry_SnapshotId);
            entryTable.Indexes.Add("IX_Entry_SnapshotId", iX_Entry_SnapshotId);
            relationalModel.Tables.Add(("Entry", null), entryTable);
            var entryTableMapping = new TableMapping(entry, entryTable, true);
            entryTable.AddTypeMapping(entryTableMapping, false);
            tableMappings2.Add(entryTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, entry.FindProperty("Id")!, entryTableMapping);
            RelationalModel.CreateColumnMapping(citationFormColumn, entry.FindProperty("CitationForm")!, entryTableMapping);
            RelationalModel.CreateColumnMapping(complexFormTypesColumn, entry.FindProperty("ComplexFormTypes")!, entryTableMapping);
            RelationalModel.CreateColumnMapping(deletedAtColumn1, entry.FindProperty("DeletedAt")!, entryTableMapping);
            RelationalModel.CreateColumnMapping(lexemeFormColumn, entry.FindProperty("LexemeForm")!, entryTableMapping);
            RelationalModel.CreateColumnMapping(literalMeaningColumn, entry.FindProperty("LiteralMeaning")!, entryTableMapping);
            RelationalModel.CreateColumnMapping(noteColumn, entry.FindProperty("Note")!, entryTableMapping);
            RelationalModel.CreateColumnMapping(publishInColumn, entry.FindProperty("PublishIn")!, entryTableMapping);
            RelationalModel.CreateColumnMapping(snapshotIdColumn1, entry.FindProperty("SnapshotId")!, entryTableMapping);

            var exampleSentence = FindEntityType("MiniLcm.Models.ExampleSentence")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            exampleSentence.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var miniLcmModelsExampleSentenceTableBase = new TableBase("MiniLcm.Models.ExampleSentence", null, relationalModel);
            var deletedAtColumnBase2 = new ColumnBase<ColumnMappingBase>("DeletedAt", "TEXT", miniLcmModelsExampleSentenceTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsExampleSentenceTableBase.Columns.Add("DeletedAt", deletedAtColumnBase2);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", miniLcmModelsExampleSentenceTableBase);
            miniLcmModelsExampleSentenceTableBase.Columns.Add("Id", idColumnBase3);
            var orderColumnBase0 = new ColumnBase<ColumnMappingBase>("Order", "REAL", miniLcmModelsExampleSentenceTableBase);
            miniLcmModelsExampleSentenceTableBase.Columns.Add("Order", orderColumnBase0);
            var referenceColumnBase = new ColumnBase<ColumnMappingBase>("Reference", "TEXT", miniLcmModelsExampleSentenceTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsExampleSentenceTableBase.Columns.Add("Reference", referenceColumnBase);
            var senseIdColumnBase = new ColumnBase<ColumnMappingBase>("SenseId", "TEXT", miniLcmModelsExampleSentenceTableBase);
            miniLcmModelsExampleSentenceTableBase.Columns.Add("SenseId", senseIdColumnBase);
            var sentenceColumnBase = new ColumnBase<ColumnMappingBase>("Sentence", "jsonb", miniLcmModelsExampleSentenceTableBase);
            miniLcmModelsExampleSentenceTableBase.Columns.Add("Sentence", sentenceColumnBase);
            var snapshotIdColumnBase2 = new ColumnBase<ColumnMappingBase>("SnapshotId", "TEXT", miniLcmModelsExampleSentenceTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsExampleSentenceTableBase.Columns.Add("SnapshotId", snapshotIdColumnBase2);
            var translationColumnBase = new ColumnBase<ColumnMappingBase>("Translation", "jsonb", miniLcmModelsExampleSentenceTableBase);
            miniLcmModelsExampleSentenceTableBase.Columns.Add("Translation", translationColumnBase);
            relationalModel.DefaultTables.Add("MiniLcm.Models.ExampleSentence", miniLcmModelsExampleSentenceTableBase);
            var miniLcmModelsExampleSentenceMappingBase = new TableMappingBase<ColumnMappingBase>(exampleSentence, miniLcmModelsExampleSentenceTableBase, true);
            miniLcmModelsExampleSentenceTableBase.AddTypeMapping(miniLcmModelsExampleSentenceMappingBase, false);
            defaultTableMappings3.Add(miniLcmModelsExampleSentenceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, exampleSentence.FindProperty("Id")!, miniLcmModelsExampleSentenceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletedAtColumnBase2, exampleSentence.FindProperty("DeletedAt")!, miniLcmModelsExampleSentenceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)orderColumnBase0, exampleSentence.FindProperty("Order")!, miniLcmModelsExampleSentenceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)referenceColumnBase, exampleSentence.FindProperty("Reference")!, miniLcmModelsExampleSentenceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)senseIdColumnBase, exampleSentence.FindProperty("SenseId")!, miniLcmModelsExampleSentenceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)sentenceColumnBase, exampleSentence.FindProperty("Sentence")!, miniLcmModelsExampleSentenceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)snapshotIdColumnBase2, exampleSentence.FindProperty("SnapshotId")!, miniLcmModelsExampleSentenceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)translationColumnBase, exampleSentence.FindProperty("Translation")!, miniLcmModelsExampleSentenceMappingBase);

            var tableMappings3 = new List<TableMapping>();
            exampleSentence.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var exampleSentenceTable = new Table("ExampleSentence", null, relationalModel);
            var idColumn3 = new Column("Id", "TEXT", exampleSentenceTable);
            exampleSentenceTable.Columns.Add("Id", idColumn3);
            var deletedAtColumn2 = new Column("DeletedAt", "TEXT", exampleSentenceTable)
            {
                IsNullable = true
            };
            exampleSentenceTable.Columns.Add("DeletedAt", deletedAtColumn2);
            var orderColumn0 = new Column("Order", "REAL", exampleSentenceTable);
            exampleSentenceTable.Columns.Add("Order", orderColumn0);
            var referenceColumn = new Column("Reference", "TEXT", exampleSentenceTable)
            {
                IsNullable = true
            };
            exampleSentenceTable.Columns.Add("Reference", referenceColumn);
            var senseIdColumn = new Column("SenseId", "TEXT", exampleSentenceTable);
            exampleSentenceTable.Columns.Add("SenseId", senseIdColumn);
            var sentenceColumn = new Column("Sentence", "jsonb", exampleSentenceTable);
            exampleSentenceTable.Columns.Add("Sentence", sentenceColumn);
            var snapshotIdColumn2 = new Column("SnapshotId", "TEXT", exampleSentenceTable)
            {
                IsNullable = true
            };
            exampleSentenceTable.Columns.Add("SnapshotId", snapshotIdColumn2);
            var translationColumn = new Column("Translation", "jsonb", exampleSentenceTable);
            exampleSentenceTable.Columns.Add("Translation", translationColumn);
            var pK_ExampleSentence = new UniqueConstraint("PK_ExampleSentence", exampleSentenceTable, new[] { idColumn3 });
            exampleSentenceTable.PrimaryKey = pK_ExampleSentence;
            var pK_ExampleSentenceUc = RelationalModel.GetKey(this,
                "MiniLcm.Models.ExampleSentence",
                new[] { "Id" });
            pK_ExampleSentence.MappedKeys.Add(pK_ExampleSentenceUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ExampleSentenceUc).Add(pK_ExampleSentence);
            exampleSentenceTable.UniqueConstraints.Add("PK_ExampleSentence", pK_ExampleSentence);
            var iX_ExampleSentence_SenseId = new TableIndex(
            "IX_ExampleSentence_SenseId", exampleSentenceTable, new[] { senseIdColumn }, false);
            var iX_ExampleSentence_SenseIdIx = RelationalModel.GetIndex(this,
                "MiniLcm.Models.ExampleSentence",
                new[] { "SenseId" });
            iX_ExampleSentence_SenseId.MappedIndexes.Add(iX_ExampleSentence_SenseIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ExampleSentence_SenseIdIx).Add(iX_ExampleSentence_SenseId);
            exampleSentenceTable.Indexes.Add("IX_ExampleSentence_SenseId", iX_ExampleSentence_SenseId);
            var iX_ExampleSentence_SnapshotId = new TableIndex(
            "IX_ExampleSentence_SnapshotId", exampleSentenceTable, new[] { snapshotIdColumn2 }, true);
            var iX_ExampleSentence_SnapshotIdIx = RelationalModel.GetIndex(this,
                "MiniLcm.Models.ExampleSentence",
                new[] { "SnapshotId" });
            iX_ExampleSentence_SnapshotId.MappedIndexes.Add(iX_ExampleSentence_SnapshotIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ExampleSentence_SnapshotIdIx).Add(iX_ExampleSentence_SnapshotId);
            exampleSentenceTable.Indexes.Add("IX_ExampleSentence_SnapshotId", iX_ExampleSentence_SnapshotId);
            relationalModel.Tables.Add(("ExampleSentence", null), exampleSentenceTable);
            var exampleSentenceTableMapping = new TableMapping(exampleSentence, exampleSentenceTable, true);
            exampleSentenceTable.AddTypeMapping(exampleSentenceTableMapping, false);
            tableMappings3.Add(exampleSentenceTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, exampleSentence.FindProperty("Id")!, exampleSentenceTableMapping);
            RelationalModel.CreateColumnMapping(deletedAtColumn2, exampleSentence.FindProperty("DeletedAt")!, exampleSentenceTableMapping);
            RelationalModel.CreateColumnMapping(orderColumn0, exampleSentence.FindProperty("Order")!, exampleSentenceTableMapping);
            RelationalModel.CreateColumnMapping(referenceColumn, exampleSentence.FindProperty("Reference")!, exampleSentenceTableMapping);
            RelationalModel.CreateColumnMapping(senseIdColumn, exampleSentence.FindProperty("SenseId")!, exampleSentenceTableMapping);
            RelationalModel.CreateColumnMapping(sentenceColumn, exampleSentence.FindProperty("Sentence")!, exampleSentenceTableMapping);
            RelationalModel.CreateColumnMapping(snapshotIdColumn2, exampleSentence.FindProperty("SnapshotId")!, exampleSentenceTableMapping);
            RelationalModel.CreateColumnMapping(translationColumn, exampleSentence.FindProperty("Translation")!, exampleSentenceTableMapping);

            var partOfSpeech = FindEntityType("MiniLcm.Models.PartOfSpeech")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            partOfSpeech.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var miniLcmModelsPartOfSpeechTableBase = new TableBase("MiniLcm.Models.PartOfSpeech", null, relationalModel);
            var deletedAtColumnBase3 = new ColumnBase<ColumnMappingBase>("DeletedAt", "TEXT", miniLcmModelsPartOfSpeechTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsPartOfSpeechTableBase.Columns.Add("DeletedAt", deletedAtColumnBase3);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", miniLcmModelsPartOfSpeechTableBase);
            miniLcmModelsPartOfSpeechTableBase.Columns.Add("Id", idColumnBase4);
            var nameColumnBase1 = new ColumnBase<ColumnMappingBase>("Name", "jsonb", miniLcmModelsPartOfSpeechTableBase);
            miniLcmModelsPartOfSpeechTableBase.Columns.Add("Name", nameColumnBase1);
            var predefinedColumnBase = new ColumnBase<ColumnMappingBase>("Predefined", "INTEGER", miniLcmModelsPartOfSpeechTableBase);
            miniLcmModelsPartOfSpeechTableBase.Columns.Add("Predefined", predefinedColumnBase);
            var snapshotIdColumnBase3 = new ColumnBase<ColumnMappingBase>("SnapshotId", "TEXT", miniLcmModelsPartOfSpeechTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsPartOfSpeechTableBase.Columns.Add("SnapshotId", snapshotIdColumnBase3);
            relationalModel.DefaultTables.Add("MiniLcm.Models.PartOfSpeech", miniLcmModelsPartOfSpeechTableBase);
            var miniLcmModelsPartOfSpeechMappingBase = new TableMappingBase<ColumnMappingBase>(partOfSpeech, miniLcmModelsPartOfSpeechTableBase, true);
            miniLcmModelsPartOfSpeechTableBase.AddTypeMapping(miniLcmModelsPartOfSpeechMappingBase, false);
            defaultTableMappings4.Add(miniLcmModelsPartOfSpeechMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, partOfSpeech.FindProperty("Id")!, miniLcmModelsPartOfSpeechMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletedAtColumnBase3, partOfSpeech.FindProperty("DeletedAt")!, miniLcmModelsPartOfSpeechMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase1, partOfSpeech.FindProperty("Name")!, miniLcmModelsPartOfSpeechMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)predefinedColumnBase, partOfSpeech.FindProperty("Predefined")!, miniLcmModelsPartOfSpeechMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)snapshotIdColumnBase3, partOfSpeech.FindProperty("SnapshotId")!, miniLcmModelsPartOfSpeechMappingBase);

            var tableMappings4 = new List<TableMapping>();
            partOfSpeech.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var partOfSpeechTable = new Table("PartOfSpeech", null, relationalModel);
            var idColumn4 = new Column("Id", "TEXT", partOfSpeechTable);
            partOfSpeechTable.Columns.Add("Id", idColumn4);
            var deletedAtColumn3 = new Column("DeletedAt", "TEXT", partOfSpeechTable)
            {
                IsNullable = true
            };
            partOfSpeechTable.Columns.Add("DeletedAt", deletedAtColumn3);
            var nameColumn1 = new Column("Name", "jsonb", partOfSpeechTable);
            partOfSpeechTable.Columns.Add("Name", nameColumn1);
            var predefinedColumn = new Column("Predefined", "INTEGER", partOfSpeechTable);
            partOfSpeechTable.Columns.Add("Predefined", predefinedColumn);
            var snapshotIdColumn3 = new Column("SnapshotId", "TEXT", partOfSpeechTable)
            {
                IsNullable = true
            };
            partOfSpeechTable.Columns.Add("SnapshotId", snapshotIdColumn3);
            var pK_PartOfSpeech = new UniqueConstraint("PK_PartOfSpeech", partOfSpeechTable, new[] { idColumn4 });
            partOfSpeechTable.PrimaryKey = pK_PartOfSpeech;
            var pK_PartOfSpeechUc = RelationalModel.GetKey(this,
                "MiniLcm.Models.PartOfSpeech",
                new[] { "Id" });
            pK_PartOfSpeech.MappedKeys.Add(pK_PartOfSpeechUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PartOfSpeechUc).Add(pK_PartOfSpeech);
            partOfSpeechTable.UniqueConstraints.Add("PK_PartOfSpeech", pK_PartOfSpeech);
            var iX_PartOfSpeech_SnapshotId = new TableIndex(
            "IX_PartOfSpeech_SnapshotId", partOfSpeechTable, new[] { snapshotIdColumn3 }, true);
            var iX_PartOfSpeech_SnapshotIdIx = RelationalModel.GetIndex(this,
                "MiniLcm.Models.PartOfSpeech",
                new[] { "SnapshotId" });
            iX_PartOfSpeech_SnapshotId.MappedIndexes.Add(iX_PartOfSpeech_SnapshotIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_PartOfSpeech_SnapshotIdIx).Add(iX_PartOfSpeech_SnapshotId);
            partOfSpeechTable.Indexes.Add("IX_PartOfSpeech_SnapshotId", iX_PartOfSpeech_SnapshotId);
            relationalModel.Tables.Add(("PartOfSpeech", null), partOfSpeechTable);
            var partOfSpeechTableMapping = new TableMapping(partOfSpeech, partOfSpeechTable, true);
            partOfSpeechTable.AddTypeMapping(partOfSpeechTableMapping, false);
            tableMappings4.Add(partOfSpeechTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, partOfSpeech.FindProperty("Id")!, partOfSpeechTableMapping);
            RelationalModel.CreateColumnMapping(deletedAtColumn3, partOfSpeech.FindProperty("DeletedAt")!, partOfSpeechTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn1, partOfSpeech.FindProperty("Name")!, partOfSpeechTableMapping);
            RelationalModel.CreateColumnMapping(predefinedColumn, partOfSpeech.FindProperty("Predefined")!, partOfSpeechTableMapping);
            RelationalModel.CreateColumnMapping(snapshotIdColumn3, partOfSpeech.FindProperty("SnapshotId")!, partOfSpeechTableMapping);

            var publication = FindEntityType("MiniLcm.Models.Publication")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            publication.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var miniLcmModelsPublicationTableBase = new TableBase("MiniLcm.Models.Publication", null, relationalModel);
            var deletedAtColumnBase4 = new ColumnBase<ColumnMappingBase>("DeletedAt", "TEXT", miniLcmModelsPublicationTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsPublicationTableBase.Columns.Add("DeletedAt", deletedAtColumnBase4);
            var idColumnBase5 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", miniLcmModelsPublicationTableBase);
            miniLcmModelsPublicationTableBase.Columns.Add("Id", idColumnBase5);
            var nameColumnBase2 = new ColumnBase<ColumnMappingBase>("Name", "jsonb", miniLcmModelsPublicationTableBase);
            miniLcmModelsPublicationTableBase.Columns.Add("Name", nameColumnBase2);
            var snapshotIdColumnBase4 = new ColumnBase<ColumnMappingBase>("SnapshotId", "TEXT", miniLcmModelsPublicationTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsPublicationTableBase.Columns.Add("SnapshotId", snapshotIdColumnBase4);
            relationalModel.DefaultTables.Add("MiniLcm.Models.Publication", miniLcmModelsPublicationTableBase);
            var miniLcmModelsPublicationMappingBase = new TableMappingBase<ColumnMappingBase>(publication, miniLcmModelsPublicationTableBase, true);
            miniLcmModelsPublicationTableBase.AddTypeMapping(miniLcmModelsPublicationMappingBase, false);
            defaultTableMappings5.Add(miniLcmModelsPublicationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, publication.FindProperty("Id")!, miniLcmModelsPublicationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletedAtColumnBase4, publication.FindProperty("DeletedAt")!, miniLcmModelsPublicationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase2, publication.FindProperty("Name")!, miniLcmModelsPublicationMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)snapshotIdColumnBase4, publication.FindProperty("SnapshotId")!, miniLcmModelsPublicationMappingBase);

            var tableMappings5 = new List<TableMapping>();
            publication.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var publicationTable = new Table("Publication", null, relationalModel);
            var idColumn5 = new Column("Id", "TEXT", publicationTable);
            publicationTable.Columns.Add("Id", idColumn5);
            var deletedAtColumn4 = new Column("DeletedAt", "TEXT", publicationTable)
            {
                IsNullable = true
            };
            publicationTable.Columns.Add("DeletedAt", deletedAtColumn4);
            var nameColumn2 = new Column("Name", "jsonb", publicationTable);
            publicationTable.Columns.Add("Name", nameColumn2);
            var snapshotIdColumn4 = new Column("SnapshotId", "TEXT", publicationTable)
            {
                IsNullable = true
            };
            publicationTable.Columns.Add("SnapshotId", snapshotIdColumn4);
            var pK_Publication = new UniqueConstraint("PK_Publication", publicationTable, new[] { idColumn5 });
            publicationTable.PrimaryKey = pK_Publication;
            var pK_PublicationUc = RelationalModel.GetKey(this,
                "MiniLcm.Models.Publication",
                new[] { "Id" });
            pK_Publication.MappedKeys.Add(pK_PublicationUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PublicationUc).Add(pK_Publication);
            publicationTable.UniqueConstraints.Add("PK_Publication", pK_Publication);
            var iX_Publication_SnapshotId = new TableIndex(
            "IX_Publication_SnapshotId", publicationTable, new[] { snapshotIdColumn4 }, true);
            var iX_Publication_SnapshotIdIx = RelationalModel.GetIndex(this,
                "MiniLcm.Models.Publication",
                new[] { "SnapshotId" });
            iX_Publication_SnapshotId.MappedIndexes.Add(iX_Publication_SnapshotIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Publication_SnapshotIdIx).Add(iX_Publication_SnapshotId);
            publicationTable.Indexes.Add("IX_Publication_SnapshotId", iX_Publication_SnapshotId);
            relationalModel.Tables.Add(("Publication", null), publicationTable);
            var publicationTableMapping = new TableMapping(publication, publicationTable, true);
            publicationTable.AddTypeMapping(publicationTableMapping, false);
            tableMappings5.Add(publicationTableMapping);
            RelationalModel.CreateColumnMapping(idColumn5, publication.FindProperty("Id")!, publicationTableMapping);
            RelationalModel.CreateColumnMapping(deletedAtColumn4, publication.FindProperty("DeletedAt")!, publicationTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn2, publication.FindProperty("Name")!, publicationTableMapping);
            RelationalModel.CreateColumnMapping(snapshotIdColumn4, publication.FindProperty("SnapshotId")!, publicationTableMapping);

            var semanticDomain = FindEntityType("MiniLcm.Models.SemanticDomain")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            semanticDomain.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var miniLcmModelsSemanticDomainTableBase = new TableBase("MiniLcm.Models.SemanticDomain", null, relationalModel);
            var codeColumnBase0 = new ColumnBase<ColumnMappingBase>("Code", "TEXT", miniLcmModelsSemanticDomainTableBase);
            miniLcmModelsSemanticDomainTableBase.Columns.Add("Code", codeColumnBase0);
            var deletedAtColumnBase5 = new ColumnBase<ColumnMappingBase>("DeletedAt", "TEXT", miniLcmModelsSemanticDomainTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsSemanticDomainTableBase.Columns.Add("DeletedAt", deletedAtColumnBase5);
            var idColumnBase6 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", miniLcmModelsSemanticDomainTableBase);
            miniLcmModelsSemanticDomainTableBase.Columns.Add("Id", idColumnBase6);
            var nameColumnBase3 = new ColumnBase<ColumnMappingBase>("Name", "jsonb", miniLcmModelsSemanticDomainTableBase);
            miniLcmModelsSemanticDomainTableBase.Columns.Add("Name", nameColumnBase3);
            var predefinedColumnBase0 = new ColumnBase<ColumnMappingBase>("Predefined", "INTEGER", miniLcmModelsSemanticDomainTableBase);
            miniLcmModelsSemanticDomainTableBase.Columns.Add("Predefined", predefinedColumnBase0);
            var snapshotIdColumnBase5 = new ColumnBase<ColumnMappingBase>("SnapshotId", "TEXT", miniLcmModelsSemanticDomainTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsSemanticDomainTableBase.Columns.Add("SnapshotId", snapshotIdColumnBase5);
            relationalModel.DefaultTables.Add("MiniLcm.Models.SemanticDomain", miniLcmModelsSemanticDomainTableBase);
            var miniLcmModelsSemanticDomainMappingBase = new TableMappingBase<ColumnMappingBase>(semanticDomain, miniLcmModelsSemanticDomainTableBase, true);
            miniLcmModelsSemanticDomainTableBase.AddTypeMapping(miniLcmModelsSemanticDomainMappingBase, false);
            defaultTableMappings6.Add(miniLcmModelsSemanticDomainMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase6, semanticDomain.FindProperty("Id")!, miniLcmModelsSemanticDomainMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)codeColumnBase0, semanticDomain.FindProperty("Code")!, miniLcmModelsSemanticDomainMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletedAtColumnBase5, semanticDomain.FindProperty("DeletedAt")!, miniLcmModelsSemanticDomainMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase3, semanticDomain.FindProperty("Name")!, miniLcmModelsSemanticDomainMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)predefinedColumnBase0, semanticDomain.FindProperty("Predefined")!, miniLcmModelsSemanticDomainMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)snapshotIdColumnBase5, semanticDomain.FindProperty("SnapshotId")!, miniLcmModelsSemanticDomainMappingBase);

            var tableMappings6 = new List<TableMapping>();
            semanticDomain.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var semanticDomainTable = new Table("SemanticDomain", null, relationalModel);
            var idColumn6 = new Column("Id", "TEXT", semanticDomainTable);
            semanticDomainTable.Columns.Add("Id", idColumn6);
            var codeColumn0 = new Column("Code", "TEXT", semanticDomainTable);
            semanticDomainTable.Columns.Add("Code", codeColumn0);
            var deletedAtColumn5 = new Column("DeletedAt", "TEXT", semanticDomainTable)
            {
                IsNullable = true
            };
            semanticDomainTable.Columns.Add("DeletedAt", deletedAtColumn5);
            var nameColumn3 = new Column("Name", "jsonb", semanticDomainTable);
            semanticDomainTable.Columns.Add("Name", nameColumn3);
            var predefinedColumn0 = new Column("Predefined", "INTEGER", semanticDomainTable);
            semanticDomainTable.Columns.Add("Predefined", predefinedColumn0);
            var snapshotIdColumn5 = new Column("SnapshotId", "TEXT", semanticDomainTable)
            {
                IsNullable = true
            };
            semanticDomainTable.Columns.Add("SnapshotId", snapshotIdColumn5);
            var pK_SemanticDomain = new UniqueConstraint("PK_SemanticDomain", semanticDomainTable, new[] { idColumn6 });
            semanticDomainTable.PrimaryKey = pK_SemanticDomain;
            var pK_SemanticDomainUc = RelationalModel.GetKey(this,
                "MiniLcm.Models.SemanticDomain",
                new[] { "Id" });
            pK_SemanticDomain.MappedKeys.Add(pK_SemanticDomainUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SemanticDomainUc).Add(pK_SemanticDomain);
            semanticDomainTable.UniqueConstraints.Add("PK_SemanticDomain", pK_SemanticDomain);
            var iX_SemanticDomain_SnapshotId = new TableIndex(
            "IX_SemanticDomain_SnapshotId", semanticDomainTable, new[] { snapshotIdColumn5 }, true);
            var iX_SemanticDomain_SnapshotIdIx = RelationalModel.GetIndex(this,
                "MiniLcm.Models.SemanticDomain",
                new[] { "SnapshotId" });
            iX_SemanticDomain_SnapshotId.MappedIndexes.Add(iX_SemanticDomain_SnapshotIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_SemanticDomain_SnapshotIdIx).Add(iX_SemanticDomain_SnapshotId);
            semanticDomainTable.Indexes.Add("IX_SemanticDomain_SnapshotId", iX_SemanticDomain_SnapshotId);
            relationalModel.Tables.Add(("SemanticDomain", null), semanticDomainTable);
            var semanticDomainTableMapping = new TableMapping(semanticDomain, semanticDomainTable, true);
            semanticDomainTable.AddTypeMapping(semanticDomainTableMapping, false);
            tableMappings6.Add(semanticDomainTableMapping);
            RelationalModel.CreateColumnMapping(idColumn6, semanticDomain.FindProperty("Id")!, semanticDomainTableMapping);
            RelationalModel.CreateColumnMapping(codeColumn0, semanticDomain.FindProperty("Code")!, semanticDomainTableMapping);
            RelationalModel.CreateColumnMapping(deletedAtColumn5, semanticDomain.FindProperty("DeletedAt")!, semanticDomainTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn3, semanticDomain.FindProperty("Name")!, semanticDomainTableMapping);
            RelationalModel.CreateColumnMapping(predefinedColumn0, semanticDomain.FindProperty("Predefined")!, semanticDomainTableMapping);
            RelationalModel.CreateColumnMapping(snapshotIdColumn5, semanticDomain.FindProperty("SnapshotId")!, semanticDomainTableMapping);

            var sense = FindEntityType("MiniLcm.Models.Sense")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            sense.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var miniLcmModelsSenseTableBase = new TableBase("MiniLcm.Models.Sense", null, relationalModel);
            var definitionColumnBase = new ColumnBase<ColumnMappingBase>("Definition", "jsonb", miniLcmModelsSenseTableBase);
            miniLcmModelsSenseTableBase.Columns.Add("Definition", definitionColumnBase);
            var deletedAtColumnBase6 = new ColumnBase<ColumnMappingBase>("DeletedAt", "TEXT", miniLcmModelsSenseTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsSenseTableBase.Columns.Add("DeletedAt", deletedAtColumnBase6);
            var entryIdColumnBase = new ColumnBase<ColumnMappingBase>("EntryId", "TEXT", miniLcmModelsSenseTableBase);
            miniLcmModelsSenseTableBase.Columns.Add("EntryId", entryIdColumnBase);
            var glossColumnBase = new ColumnBase<ColumnMappingBase>("Gloss", "jsonb", miniLcmModelsSenseTableBase);
            miniLcmModelsSenseTableBase.Columns.Add("Gloss", glossColumnBase);
            var idColumnBase7 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", miniLcmModelsSenseTableBase);
            miniLcmModelsSenseTableBase.Columns.Add("Id", idColumnBase7);
            var orderColumnBase1 = new ColumnBase<ColumnMappingBase>("Order", "REAL", miniLcmModelsSenseTableBase);
            miniLcmModelsSenseTableBase.Columns.Add("Order", orderColumnBase1);
            var partOfSpeechIdColumnBase = new ColumnBase<ColumnMappingBase>("PartOfSpeechId", "TEXT", miniLcmModelsSenseTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsSenseTableBase.Columns.Add("PartOfSpeechId", partOfSpeechIdColumnBase);
            var semanticDomainsColumnBase = new ColumnBase<ColumnMappingBase>("SemanticDomains", "jsonb", miniLcmModelsSenseTableBase);
            miniLcmModelsSenseTableBase.Columns.Add("SemanticDomains", semanticDomainsColumnBase);
            var snapshotIdColumnBase6 = new ColumnBase<ColumnMappingBase>("SnapshotId", "TEXT", miniLcmModelsSenseTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsSenseTableBase.Columns.Add("SnapshotId", snapshotIdColumnBase6);
            relationalModel.DefaultTables.Add("MiniLcm.Models.Sense", miniLcmModelsSenseTableBase);
            var miniLcmModelsSenseMappingBase = new TableMappingBase<ColumnMappingBase>(sense, miniLcmModelsSenseTableBase, true);
            miniLcmModelsSenseTableBase.AddTypeMapping(miniLcmModelsSenseMappingBase, false);
            defaultTableMappings7.Add(miniLcmModelsSenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase7, sense.FindProperty("Id")!, miniLcmModelsSenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)definitionColumnBase, sense.FindProperty("Definition")!, miniLcmModelsSenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletedAtColumnBase6, sense.FindProperty("DeletedAt")!, miniLcmModelsSenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)entryIdColumnBase, sense.FindProperty("EntryId")!, miniLcmModelsSenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)glossColumnBase, sense.FindProperty("Gloss")!, miniLcmModelsSenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)orderColumnBase1, sense.FindProperty("Order")!, miniLcmModelsSenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)partOfSpeechIdColumnBase, sense.FindProperty("PartOfSpeechId")!, miniLcmModelsSenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)semanticDomainsColumnBase, sense.FindProperty("SemanticDomains")!, miniLcmModelsSenseMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)snapshotIdColumnBase6, sense.FindProperty("SnapshotId")!, miniLcmModelsSenseMappingBase);

            var tableMappings7 = new List<TableMapping>();
            sense.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var senseTable = new Table("Sense", null, relationalModel);
            var idColumn7 = new Column("Id", "TEXT", senseTable);
            senseTable.Columns.Add("Id", idColumn7);
            var definitionColumn = new Column("Definition", "jsonb", senseTable);
            senseTable.Columns.Add("Definition", definitionColumn);
            var deletedAtColumn6 = new Column("DeletedAt", "TEXT", senseTable)
            {
                IsNullable = true
            };
            senseTable.Columns.Add("DeletedAt", deletedAtColumn6);
            var entryIdColumn = new Column("EntryId", "TEXT", senseTable);
            senseTable.Columns.Add("EntryId", entryIdColumn);
            var glossColumn = new Column("Gloss", "jsonb", senseTable);
            senseTable.Columns.Add("Gloss", glossColumn);
            var orderColumn1 = new Column("Order", "REAL", senseTable);
            senseTable.Columns.Add("Order", orderColumn1);
            var partOfSpeechIdColumn = new Column("PartOfSpeechId", "TEXT", senseTable)
            {
                IsNullable = true
            };
            senseTable.Columns.Add("PartOfSpeechId", partOfSpeechIdColumn);
            var semanticDomainsColumn = new Column("SemanticDomains", "jsonb", senseTable);
            senseTable.Columns.Add("SemanticDomains", semanticDomainsColumn);
            var snapshotIdColumn6 = new Column("SnapshotId", "TEXT", senseTable)
            {
                IsNullable = true
            };
            senseTable.Columns.Add("SnapshotId", snapshotIdColumn6);
            var pK_Sense = new UniqueConstraint("PK_Sense", senseTable, new[] { idColumn7 });
            senseTable.PrimaryKey = pK_Sense;
            var pK_SenseUc = RelationalModel.GetKey(this,
                "MiniLcm.Models.Sense",
                new[] { "Id" });
            pK_Sense.MappedKeys.Add(pK_SenseUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SenseUc).Add(pK_Sense);
            senseTable.UniqueConstraints.Add("PK_Sense", pK_Sense);
            var iX_Sense_EntryId = new TableIndex(
            "IX_Sense_EntryId", senseTable, new[] { entryIdColumn }, false);
            var iX_Sense_EntryIdIx = RelationalModel.GetIndex(this,
                "MiniLcm.Models.Sense",
                new[] { "EntryId" });
            iX_Sense_EntryId.MappedIndexes.Add(iX_Sense_EntryIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Sense_EntryIdIx).Add(iX_Sense_EntryId);
            senseTable.Indexes.Add("IX_Sense_EntryId", iX_Sense_EntryId);
            var iX_Sense_PartOfSpeechId = new TableIndex(
            "IX_Sense_PartOfSpeechId", senseTable, new[] { partOfSpeechIdColumn }, false);
            var iX_Sense_PartOfSpeechIdIx = RelationalModel.GetIndex(this,
                "MiniLcm.Models.Sense",
                new[] { "PartOfSpeechId" });
            iX_Sense_PartOfSpeechId.MappedIndexes.Add(iX_Sense_PartOfSpeechIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Sense_PartOfSpeechIdIx).Add(iX_Sense_PartOfSpeechId);
            senseTable.Indexes.Add("IX_Sense_PartOfSpeechId", iX_Sense_PartOfSpeechId);
            var iX_Sense_SnapshotId = new TableIndex(
            "IX_Sense_SnapshotId", senseTable, new[] { snapshotIdColumn6 }, true);
            var iX_Sense_SnapshotIdIx = RelationalModel.GetIndex(this,
                "MiniLcm.Models.Sense",
                new[] { "SnapshotId" });
            iX_Sense_SnapshotId.MappedIndexes.Add(iX_Sense_SnapshotIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Sense_SnapshotIdIx).Add(iX_Sense_SnapshotId);
            senseTable.Indexes.Add("IX_Sense_SnapshotId", iX_Sense_SnapshotId);
            relationalModel.Tables.Add(("Sense", null), senseTable);
            var senseTableMapping = new TableMapping(sense, senseTable, true);
            senseTable.AddTypeMapping(senseTableMapping, false);
            tableMappings7.Add(senseTableMapping);
            RelationalModel.CreateColumnMapping(idColumn7, sense.FindProperty("Id")!, senseTableMapping);
            RelationalModel.CreateColumnMapping(definitionColumn, sense.FindProperty("Definition")!, senseTableMapping);
            RelationalModel.CreateColumnMapping(deletedAtColumn6, sense.FindProperty("DeletedAt")!, senseTableMapping);
            RelationalModel.CreateColumnMapping(entryIdColumn, sense.FindProperty("EntryId")!, senseTableMapping);
            RelationalModel.CreateColumnMapping(glossColumn, sense.FindProperty("Gloss")!, senseTableMapping);
            RelationalModel.CreateColumnMapping(orderColumn1, sense.FindProperty("Order")!, senseTableMapping);
            RelationalModel.CreateColumnMapping(partOfSpeechIdColumn, sense.FindProperty("PartOfSpeechId")!, senseTableMapping);
            RelationalModel.CreateColumnMapping(semanticDomainsColumn, sense.FindProperty("SemanticDomains")!, senseTableMapping);
            RelationalModel.CreateColumnMapping(snapshotIdColumn6, sense.FindProperty("SnapshotId")!, senseTableMapping);

            var writingSystem = FindEntityType("MiniLcm.Models.WritingSystem")!;

            var defaultTableMappings8 = new List<TableMappingBase<ColumnMappingBase>>();
            writingSystem.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings8);
            var miniLcmModelsWritingSystemTableBase = new TableBase("MiniLcm.Models.WritingSystem", null, relationalModel);
            var abbreviationColumnBase = new ColumnBase<ColumnMappingBase>("Abbreviation", "TEXT", miniLcmModelsWritingSystemTableBase);
            miniLcmModelsWritingSystemTableBase.Columns.Add("Abbreviation", abbreviationColumnBase);
            var deletedAtColumnBase7 = new ColumnBase<ColumnMappingBase>("DeletedAt", "TEXT", miniLcmModelsWritingSystemTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsWritingSystemTableBase.Columns.Add("DeletedAt", deletedAtColumnBase7);
            var exemplarsColumnBase = new ColumnBase<ColumnMappingBase>("Exemplars", "jsonb", miniLcmModelsWritingSystemTableBase);
            miniLcmModelsWritingSystemTableBase.Columns.Add("Exemplars", exemplarsColumnBase);
            var fontColumnBase = new ColumnBase<ColumnMappingBase>("Font", "TEXT", miniLcmModelsWritingSystemTableBase);
            miniLcmModelsWritingSystemTableBase.Columns.Add("Font", fontColumnBase);
            var idColumnBase8 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", miniLcmModelsWritingSystemTableBase);
            miniLcmModelsWritingSystemTableBase.Columns.Add("Id", idColumnBase8);
            var nameColumnBase4 = new ColumnBase<ColumnMappingBase>("Name", "TEXT", miniLcmModelsWritingSystemTableBase);
            miniLcmModelsWritingSystemTableBase.Columns.Add("Name", nameColumnBase4);
            var orderColumnBase2 = new ColumnBase<ColumnMappingBase>("Order", "REAL", miniLcmModelsWritingSystemTableBase);
            miniLcmModelsWritingSystemTableBase.Columns.Add("Order", orderColumnBase2);
            var snapshotIdColumnBase7 = new ColumnBase<ColumnMappingBase>("SnapshotId", "TEXT", miniLcmModelsWritingSystemTableBase)
            {
                IsNullable = true
            };
            miniLcmModelsWritingSystemTableBase.Columns.Add("SnapshotId", snapshotIdColumnBase7);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("Type", "INTEGER", miniLcmModelsWritingSystemTableBase);
            miniLcmModelsWritingSystemTableBase.Columns.Add("Type", typeColumnBase);
            var wsIdColumnBase = new ColumnBase<ColumnMappingBase>("WsId", "TEXT", miniLcmModelsWritingSystemTableBase);
            miniLcmModelsWritingSystemTableBase.Columns.Add("WsId", wsIdColumnBase);
            relationalModel.DefaultTables.Add("MiniLcm.Models.WritingSystem", miniLcmModelsWritingSystemTableBase);
            var miniLcmModelsWritingSystemMappingBase = new TableMappingBase<ColumnMappingBase>(writingSystem, miniLcmModelsWritingSystemTableBase, true);
            miniLcmModelsWritingSystemTableBase.AddTypeMapping(miniLcmModelsWritingSystemMappingBase, false);
            defaultTableMappings8.Add(miniLcmModelsWritingSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase8, writingSystem.FindProperty("Id")!, miniLcmModelsWritingSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)abbreviationColumnBase, writingSystem.FindProperty("Abbreviation")!, miniLcmModelsWritingSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deletedAtColumnBase7, writingSystem.FindProperty("DeletedAt")!, miniLcmModelsWritingSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)exemplarsColumnBase, writingSystem.FindProperty("Exemplars")!, miniLcmModelsWritingSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fontColumnBase, writingSystem.FindProperty("Font")!, miniLcmModelsWritingSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase4, writingSystem.FindProperty("Name")!, miniLcmModelsWritingSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)orderColumnBase2, writingSystem.FindProperty("Order")!, miniLcmModelsWritingSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)snapshotIdColumnBase7, writingSystem.FindProperty("SnapshotId")!, miniLcmModelsWritingSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, writingSystem.FindProperty("Type")!, miniLcmModelsWritingSystemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)wsIdColumnBase, writingSystem.FindProperty("WsId")!, miniLcmModelsWritingSystemMappingBase);

            var tableMappings8 = new List<TableMapping>();
            writingSystem.SetRuntimeAnnotation("Relational:TableMappings", tableMappings8);
            var writingSystemTable = new Table("WritingSystem", null, relationalModel);
            var idColumn8 = new Column("Id", "TEXT", writingSystemTable);
            writingSystemTable.Columns.Add("Id", idColumn8);
            var abbreviationColumn = new Column("Abbreviation", "TEXT", writingSystemTable);
            writingSystemTable.Columns.Add("Abbreviation", abbreviationColumn);
            var deletedAtColumn7 = new Column("DeletedAt", "TEXT", writingSystemTable)
            {
                IsNullable = true
            };
            writingSystemTable.Columns.Add("DeletedAt", deletedAtColumn7);
            var exemplarsColumn = new Column("Exemplars", "jsonb", writingSystemTable);
            writingSystemTable.Columns.Add("Exemplars", exemplarsColumn);
            var fontColumn = new Column("Font", "TEXT", writingSystemTable);
            writingSystemTable.Columns.Add("Font", fontColumn);
            var nameColumn4 = new Column("Name", "TEXT", writingSystemTable);
            writingSystemTable.Columns.Add("Name", nameColumn4);
            var orderColumn2 = new Column("Order", "REAL", writingSystemTable);
            writingSystemTable.Columns.Add("Order", orderColumn2);
            var snapshotIdColumn7 = new Column("SnapshotId", "TEXT", writingSystemTable)
            {
                IsNullable = true
            };
            writingSystemTable.Columns.Add("SnapshotId", snapshotIdColumn7);
            var typeColumn = new Column("Type", "INTEGER", writingSystemTable);
            writingSystemTable.Columns.Add("Type", typeColumn);
            var wsIdColumn = new Column("WsId", "TEXT", writingSystemTable);
            writingSystemTable.Columns.Add("WsId", wsIdColumn);
            var pK_WritingSystem = new UniqueConstraint("PK_WritingSystem", writingSystemTable, new[] { idColumn8 });
            writingSystemTable.PrimaryKey = pK_WritingSystem;
            var pK_WritingSystemUc = RelationalModel.GetKey(this,
                "MiniLcm.Models.WritingSystem",
                new[] { "Id" });
            pK_WritingSystem.MappedKeys.Add(pK_WritingSystemUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_WritingSystemUc).Add(pK_WritingSystem);
            writingSystemTable.UniqueConstraints.Add("PK_WritingSystem", pK_WritingSystem);
            var iX_WritingSystem_SnapshotId = new TableIndex(
            "IX_WritingSystem_SnapshotId", writingSystemTable, new[] { snapshotIdColumn7 }, true);
            var iX_WritingSystem_SnapshotIdIx = RelationalModel.GetIndex(this,
                "MiniLcm.Models.WritingSystem",
                new[] { "SnapshotId" });
            iX_WritingSystem_SnapshotId.MappedIndexes.Add(iX_WritingSystem_SnapshotIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_WritingSystem_SnapshotIdIx).Add(iX_WritingSystem_SnapshotId);
            writingSystemTable.Indexes.Add("IX_WritingSystem_SnapshotId", iX_WritingSystem_SnapshotId);
            var iX_WritingSystem_WsId_Type = new TableIndex(
            "IX_WritingSystem_WsId_Type", writingSystemTable, new[] { wsIdColumn, typeColumn }, true);
            var iX_WritingSystem_WsId_TypeIx = RelationalModel.GetIndex(this,
                "MiniLcm.Models.WritingSystem",
                new[] { "WsId", "Type" });
            iX_WritingSystem_WsId_Type.MappedIndexes.Add(iX_WritingSystem_WsId_TypeIx);
            RelationalModel.GetOrCreateTableIndexes(iX_WritingSystem_WsId_TypeIx).Add(iX_WritingSystem_WsId_Type);
            writingSystemTable.Indexes.Add("IX_WritingSystem_WsId_Type", iX_WritingSystem_WsId_Type);
            relationalModel.Tables.Add(("WritingSystem", null), writingSystemTable);
            var writingSystemTableMapping = new TableMapping(writingSystem, writingSystemTable, true);
            writingSystemTable.AddTypeMapping(writingSystemTableMapping, false);
            tableMappings8.Add(writingSystemTableMapping);
            RelationalModel.CreateColumnMapping(idColumn8, writingSystem.FindProperty("Id")!, writingSystemTableMapping);
            RelationalModel.CreateColumnMapping(abbreviationColumn, writingSystem.FindProperty("Abbreviation")!, writingSystemTableMapping);
            RelationalModel.CreateColumnMapping(deletedAtColumn7, writingSystem.FindProperty("DeletedAt")!, writingSystemTableMapping);
            RelationalModel.CreateColumnMapping(exemplarsColumn, writingSystem.FindProperty("Exemplars")!, writingSystemTableMapping);
            RelationalModel.CreateColumnMapping(fontColumn, writingSystem.FindProperty("Font")!, writingSystemTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn4, writingSystem.FindProperty("Name")!, writingSystemTableMapping);
            RelationalModel.CreateColumnMapping(orderColumn2, writingSystem.FindProperty("Order")!, writingSystemTableMapping);
            RelationalModel.CreateColumnMapping(snapshotIdColumn7, writingSystem.FindProperty("SnapshotId")!, writingSystemTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn, writingSystem.FindProperty("Type")!, writingSystemTableMapping);
            RelationalModel.CreateColumnMapping(wsIdColumn, writingSystem.FindProperty("WsId")!, writingSystemTableMapping);

            var commit = FindEntityType("SIL.Harmony.Commit")!;

            var defaultTableMappings9 = new List<TableMappingBase<ColumnMappingBase>>();
            commit.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings9);
            var sILHarmonyCommitTableBase = new TableBase("SIL.Harmony.Commit", null, relationalModel);
            var clientIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ClientId", "TEXT", sILHarmonyCommitTableBase);
            sILHarmonyCommitTableBase.Columns.Add("ClientId", clientIdColumnBase0);
            var hashColumnBase = new ColumnBase<ColumnMappingBase>("Hash", "TEXT", sILHarmonyCommitTableBase);
            sILHarmonyCommitTableBase.Columns.Add("Hash", hashColumnBase);
            var hybridDateTime_CounterColumnBase = new ColumnBase<ColumnMappingBase>("HybridDateTime_Counter", "INTEGER", sILHarmonyCommitTableBase);
            sILHarmonyCommitTableBase.Columns.Add("HybridDateTime_Counter", hybridDateTime_CounterColumnBase);
            var hybridDateTime_DateTimeColumnBase = new ColumnBase<ColumnMappingBase>("HybridDateTime_DateTime", "TEXT", sILHarmonyCommitTableBase);
            sILHarmonyCommitTableBase.Columns.Add("HybridDateTime_DateTime", hybridDateTime_DateTimeColumnBase);
            var idColumnBase9 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", sILHarmonyCommitTableBase);
            sILHarmonyCommitTableBase.Columns.Add("Id", idColumnBase9);
            var metadataColumnBase = new ColumnBase<ColumnMappingBase>("Metadata", "jsonb", sILHarmonyCommitTableBase);
            sILHarmonyCommitTableBase.Columns.Add("Metadata", metadataColumnBase);
            var parentHashColumnBase = new ColumnBase<ColumnMappingBase>("ParentHash", "TEXT", sILHarmonyCommitTableBase);
            sILHarmonyCommitTableBase.Columns.Add("ParentHash", parentHashColumnBase);
            relationalModel.DefaultTables.Add("SIL.Harmony.Commit", sILHarmonyCommitTableBase);
            var sILHarmonyCommitMappingBase = new TableMappingBase<ColumnMappingBase>(commit, sILHarmonyCommitTableBase, true);
            sILHarmonyCommitTableBase.AddTypeMapping(sILHarmonyCommitMappingBase, false);
            defaultTableMappings9.Add(sILHarmonyCommitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase9, commit.FindProperty("Id")!, sILHarmonyCommitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)clientIdColumnBase0, commit.FindProperty("ClientId")!, sILHarmonyCommitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hashColumnBase, commit.FindProperty("Hash")!, sILHarmonyCommitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)metadataColumnBase, commit.FindProperty("Metadata")!, sILHarmonyCommitMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)parentHashColumnBase, commit.FindProperty("ParentHash")!, sILHarmonyCommitMappingBase);

            var tableMappings9 = new List<TableMapping>();
            commit.SetRuntimeAnnotation("Relational:TableMappings", tableMappings9);
            var commitsTable = new Table("Commits", null, relationalModel);
            var idColumn9 = new Column("Id", "TEXT", commitsTable);
            commitsTable.Columns.Add("Id", idColumn9);
            var clientIdColumn0 = new Column("ClientId", "TEXT", commitsTable);
            commitsTable.Columns.Add("ClientId", clientIdColumn0);
            var counterColumn = new Column("Counter", "INTEGER", commitsTable);
            commitsTable.Columns.Add("Counter", counterColumn);
            var dateTimeColumn = new Column("DateTime", "TEXT", commitsTable);
            commitsTable.Columns.Add("DateTime", dateTimeColumn);
            var hashColumn = new Column("Hash", "TEXT", commitsTable);
            commitsTable.Columns.Add("Hash", hashColumn);
            var metadataColumn = new Column("Metadata", "jsonb", commitsTable);
            commitsTable.Columns.Add("Metadata", metadataColumn);
            var parentHashColumn = new Column("ParentHash", "TEXT", commitsTable);
            commitsTable.Columns.Add("ParentHash", parentHashColumn);
            var pK_Commits = new UniqueConstraint("PK_Commits", commitsTable, new[] { idColumn9 });
            commitsTable.PrimaryKey = pK_Commits;
            var pK_CommitsUc = RelationalModel.GetKey(this,
                "SIL.Harmony.Commit",
                new[] { "Id" });
            pK_Commits.MappedKeys.Add(pK_CommitsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CommitsUc).Add(pK_Commits);
            commitsTable.UniqueConstraints.Add("PK_Commits", pK_Commits);
            relationalModel.Tables.Add(("Commits", null), commitsTable);
            var commitsTableMapping = new TableMapping(commit, commitsTable, true);
            commitsTable.AddTypeMapping(commitsTableMapping, false);
            tableMappings9.Add(commitsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn9, commit.FindProperty("Id")!, commitsTableMapping);
            RelationalModel.CreateColumnMapping(clientIdColumn0, commit.FindProperty("ClientId")!, commitsTableMapping);
            RelationalModel.CreateColumnMapping(hashColumn, commit.FindProperty("Hash")!, commitsTableMapping);
            RelationalModel.CreateColumnMapping(metadataColumn, commit.FindProperty("Metadata")!, commitsTableMapping);
            RelationalModel.CreateColumnMapping(parentHashColumn, commit.FindProperty("ParentHash")!, commitsTableMapping);

            var hybridDateTime = commit.FindComplexProperty("HybridDateTime")!.ComplexType;

            var defaultTableMappings10 = new List<TableMappingBase<ColumnMappingBase>>();
            hybridDateTime.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings10);
            var sILHarmonyCommitMappingBase0 = new TableMappingBase<ColumnMappingBase>(hybridDateTime, sILHarmonyCommitTableBase, false);
            sILHarmonyCommitTableBase.AddTypeMapping(sILHarmonyCommitMappingBase0, false);
            defaultTableMappings10.Add(sILHarmonyCommitMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hybridDateTime_CounterColumnBase, hybridDateTime.FindProperty("Counter")!, sILHarmonyCommitMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hybridDateTime_DateTimeColumnBase, hybridDateTime.FindProperty("DateTime")!, sILHarmonyCommitMappingBase0);

            var tableMappings10 = new List<TableMapping>();
            hybridDateTime.SetRuntimeAnnotation("Relational:TableMappings", tableMappings10);
            var commitsTableMapping0 = new TableMapping(hybridDateTime, commitsTable, true);
            commitsTable.AddTypeMapping(commitsTableMapping0, false);
            tableMappings10.Add(commitsTableMapping0);
            RelationalModel.CreateColumnMapping(counterColumn, hybridDateTime.FindProperty("Counter")!, commitsTableMapping0);
            RelationalModel.CreateColumnMapping(dateTimeColumn, hybridDateTime.FindProperty("DateTime")!, commitsTableMapping0);

            var changeEntity = FindEntityType("SIL.Harmony.Core.ChangeEntity<SIL.Harmony.Changes.IChange>")!;

            var defaultTableMappings11 = new List<TableMappingBase<ColumnMappingBase>>();
            changeEntity.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings11);
            var sILHarmonyCoreChangeEntitySILHarmonyChangesIChangeTableBase = new TableBase("SIL.Harmony.Core.ChangeEntity<SIL.Harmony.Changes.IChange>", null, relationalModel);
            var changeColumnBase = new ColumnBase<ColumnMappingBase>("Change", "jsonb", sILHarmonyCoreChangeEntitySILHarmonyChangesIChangeTableBase)
            {
                IsNullable = true
            };
            sILHarmonyCoreChangeEntitySILHarmonyChangesIChangeTableBase.Columns.Add("Change", changeColumnBase);
            var commitIdColumnBase = new ColumnBase<ColumnMappingBase>("CommitId", "TEXT", sILHarmonyCoreChangeEntitySILHarmonyChangesIChangeTableBase);
            sILHarmonyCoreChangeEntitySILHarmonyChangesIChangeTableBase.Columns.Add("CommitId", commitIdColumnBase);
            var entityIdColumnBase = new ColumnBase<ColumnMappingBase>("EntityId", "TEXT", sILHarmonyCoreChangeEntitySILHarmonyChangesIChangeTableBase);
            sILHarmonyCoreChangeEntitySILHarmonyChangesIChangeTableBase.Columns.Add("EntityId", entityIdColumnBase);
            var indexColumnBase = new ColumnBase<ColumnMappingBase>("Index", "INTEGER", sILHarmonyCoreChangeEntitySILHarmonyChangesIChangeTableBase);
            sILHarmonyCoreChangeEntitySILHarmonyChangesIChangeTableBase.Columns.Add("Index", indexColumnBase);
            relationalModel.DefaultTables.Add("SIL.Harmony.Core.ChangeEntity<SIL.Harmony.Changes.IChange>", sILHarmonyCoreChangeEntitySILHarmonyChangesIChangeTableBase);
            var sILHarmonyCoreChangeEntitySILHarmonyChangesIChangeMappingBase = new TableMappingBase<ColumnMappingBase>(changeEntity, sILHarmonyCoreChangeEntitySILHarmonyChangesIChangeTableBase, true);
            sILHarmonyCoreChangeEntitySILHarmonyChangesIChangeTableBase.AddTypeMapping(sILHarmonyCoreChangeEntitySILHarmonyChangesIChangeMappingBase, false);
            defaultTableMappings11.Add(sILHarmonyCoreChangeEntitySILHarmonyChangesIChangeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commitIdColumnBase, changeEntity.FindProperty("CommitId")!, sILHarmonyCoreChangeEntitySILHarmonyChangesIChangeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)indexColumnBase, changeEntity.FindProperty("Index")!, sILHarmonyCoreChangeEntitySILHarmonyChangesIChangeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)changeColumnBase, changeEntity.FindProperty("Change")!, sILHarmonyCoreChangeEntitySILHarmonyChangesIChangeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)entityIdColumnBase, changeEntity.FindProperty("EntityId")!, sILHarmonyCoreChangeEntitySILHarmonyChangesIChangeMappingBase);

            var tableMappings11 = new List<TableMapping>();
            changeEntity.SetRuntimeAnnotation("Relational:TableMappings", tableMappings11);
            var changeEntitiesTable = new Table("ChangeEntities", null, relationalModel);
            var commitIdColumn = new Column("CommitId", "TEXT", changeEntitiesTable);
            changeEntitiesTable.Columns.Add("CommitId", commitIdColumn);
            var indexColumn = new Column("Index", "INTEGER", changeEntitiesTable);
            changeEntitiesTable.Columns.Add("Index", indexColumn);
            var changeColumn = new Column("Change", "jsonb", changeEntitiesTable)
            {
                IsNullable = true
            };
            changeEntitiesTable.Columns.Add("Change", changeColumn);
            var entityIdColumn = new Column("EntityId", "TEXT", changeEntitiesTable);
            changeEntitiesTable.Columns.Add("EntityId", entityIdColumn);
            var pK_ChangeEntities = new UniqueConstraint("PK_ChangeEntities", changeEntitiesTable, new[] { commitIdColumn, indexColumn });
            changeEntitiesTable.PrimaryKey = pK_ChangeEntities;
            var pK_ChangeEntitiesUc = RelationalModel.GetKey(this,
                "SIL.Harmony.Core.ChangeEntity<SIL.Harmony.Changes.IChange>",
                new[] { "CommitId", "Index" });
            pK_ChangeEntities.MappedKeys.Add(pK_ChangeEntitiesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ChangeEntitiesUc).Add(pK_ChangeEntities);
            changeEntitiesTable.UniqueConstraints.Add("PK_ChangeEntities", pK_ChangeEntities);
            relationalModel.Tables.Add(("ChangeEntities", null), changeEntitiesTable);
            var changeEntitiesTableMapping = new TableMapping(changeEntity, changeEntitiesTable, true);
            changeEntitiesTable.AddTypeMapping(changeEntitiesTableMapping, false);
            tableMappings11.Add(changeEntitiesTableMapping);
            RelationalModel.CreateColumnMapping(commitIdColumn, changeEntity.FindProperty("CommitId")!, changeEntitiesTableMapping);
            RelationalModel.CreateColumnMapping(indexColumn, changeEntity.FindProperty("Index")!, changeEntitiesTableMapping);
            RelationalModel.CreateColumnMapping(changeColumn, changeEntity.FindProperty("Change")!, changeEntitiesTableMapping);
            RelationalModel.CreateColumnMapping(entityIdColumn, changeEntity.FindProperty("EntityId")!, changeEntitiesTableMapping);

            var objectSnapshot = FindEntityType("SIL.Harmony.Db.ObjectSnapshot")!;

            var defaultTableMappings12 = new List<TableMappingBase<ColumnMappingBase>>();
            objectSnapshot.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings12);
            var sILHarmonyDbObjectSnapshotTableBase = new TableBase("SIL.Harmony.Db.ObjectSnapshot", null, relationalModel);
            var commitIdColumnBase0 = new ColumnBase<ColumnMappingBase>("CommitId", "TEXT", sILHarmonyDbObjectSnapshotTableBase);
            sILHarmonyDbObjectSnapshotTableBase.Columns.Add("CommitId", commitIdColumnBase0);
            var entityColumnBase = new ColumnBase<ColumnMappingBase>("Entity", "jsonb", sILHarmonyDbObjectSnapshotTableBase);
            sILHarmonyDbObjectSnapshotTableBase.Columns.Add("Entity", entityColumnBase);
            var entityIdColumnBase0 = new ColumnBase<ColumnMappingBase>("EntityId", "TEXT", sILHarmonyDbObjectSnapshotTableBase);
            sILHarmonyDbObjectSnapshotTableBase.Columns.Add("EntityId", entityIdColumnBase0);
            var entityIsDeletedColumnBase = new ColumnBase<ColumnMappingBase>("EntityIsDeleted", "INTEGER", sILHarmonyDbObjectSnapshotTableBase);
            sILHarmonyDbObjectSnapshotTableBase.Columns.Add("EntityIsDeleted", entityIsDeletedColumnBase);
            var idColumnBase10 = new ColumnBase<ColumnMappingBase>("Id", "TEXT", sILHarmonyDbObjectSnapshotTableBase);
            sILHarmonyDbObjectSnapshotTableBase.Columns.Add("Id", idColumnBase10);
            var isRootColumnBase = new ColumnBase<ColumnMappingBase>("IsRoot", "INTEGER", sILHarmonyDbObjectSnapshotTableBase);
            sILHarmonyDbObjectSnapshotTableBase.Columns.Add("IsRoot", isRootColumnBase);
            var referencesColumnBase = new ColumnBase<ColumnMappingBase>("References", "TEXT", sILHarmonyDbObjectSnapshotTableBase);
            sILHarmonyDbObjectSnapshotTableBase.Columns.Add("References", referencesColumnBase);
            var typeNameColumnBase = new ColumnBase<ColumnMappingBase>("TypeName", "TEXT", sILHarmonyDbObjectSnapshotTableBase);
            sILHarmonyDbObjectSnapshotTableBase.Columns.Add("TypeName", typeNameColumnBase);
            relationalModel.DefaultTables.Add("SIL.Harmony.Db.ObjectSnapshot", sILHarmonyDbObjectSnapshotTableBase);
            var sILHarmonyDbObjectSnapshotMappingBase = new TableMappingBase<ColumnMappingBase>(objectSnapshot, sILHarmonyDbObjectSnapshotTableBase, true);
            sILHarmonyDbObjectSnapshotTableBase.AddTypeMapping(sILHarmonyDbObjectSnapshotMappingBase, false);
            defaultTableMappings12.Add(sILHarmonyDbObjectSnapshotMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase10, objectSnapshot.FindProperty("Id")!, sILHarmonyDbObjectSnapshotMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)commitIdColumnBase0, objectSnapshot.FindProperty("CommitId")!, sILHarmonyDbObjectSnapshotMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)entityColumnBase, objectSnapshot.FindProperty("Entity")!, sILHarmonyDbObjectSnapshotMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)entityIdColumnBase0, objectSnapshot.FindProperty("EntityId")!, sILHarmonyDbObjectSnapshotMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)entityIsDeletedColumnBase, objectSnapshot.FindProperty("EntityIsDeleted")!, sILHarmonyDbObjectSnapshotMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)isRootColumnBase, objectSnapshot.FindProperty("IsRoot")!, sILHarmonyDbObjectSnapshotMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)referencesColumnBase, objectSnapshot.FindProperty("References")!, sILHarmonyDbObjectSnapshotMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeNameColumnBase, objectSnapshot.FindProperty("TypeName")!, sILHarmonyDbObjectSnapshotMappingBase);

            var tableMappings12 = new List<TableMapping>();
            objectSnapshot.SetRuntimeAnnotation("Relational:TableMappings", tableMappings12);
            var snapshotsTable = new Table("Snapshots", null, relationalModel);
            var idColumn10 = new Column("Id", "TEXT", snapshotsTable);
            snapshotsTable.Columns.Add("Id", idColumn10);
            var commitIdColumn0 = new Column("CommitId", "TEXT", snapshotsTable);
            snapshotsTable.Columns.Add("CommitId", commitIdColumn0);
            var entityColumn = new Column("Entity", "jsonb", snapshotsTable);
            snapshotsTable.Columns.Add("Entity", entityColumn);
            var entityIdColumn0 = new Column("EntityId", "TEXT", snapshotsTable);
            snapshotsTable.Columns.Add("EntityId", entityIdColumn0);
            var entityIsDeletedColumn = new Column("EntityIsDeleted", "INTEGER", snapshotsTable);
            snapshotsTable.Columns.Add("EntityIsDeleted", entityIsDeletedColumn);
            var isRootColumn = new Column("IsRoot", "INTEGER", snapshotsTable);
            snapshotsTable.Columns.Add("IsRoot", isRootColumn);
            var referencesColumn = new Column("References", "TEXT", snapshotsTable);
            snapshotsTable.Columns.Add("References", referencesColumn);
            var typeNameColumn = new Column("TypeName", "TEXT", snapshotsTable);
            snapshotsTable.Columns.Add("TypeName", typeNameColumn);
            var pK_Snapshots = new UniqueConstraint("PK_Snapshots", snapshotsTable, new[] { idColumn10 });
            snapshotsTable.PrimaryKey = pK_Snapshots;
            var pK_SnapshotsUc = RelationalModel.GetKey(this,
                "SIL.Harmony.Db.ObjectSnapshot",
                new[] { "Id" });
            pK_Snapshots.MappedKeys.Add(pK_SnapshotsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SnapshotsUc).Add(pK_Snapshots);
            snapshotsTable.UniqueConstraints.Add("PK_Snapshots", pK_Snapshots);
            var iX_Snapshots_CommitId_EntityId = new TableIndex(
            "IX_Snapshots_CommitId_EntityId", snapshotsTable, new[] { commitIdColumn0, entityIdColumn0 }, true);
            var iX_Snapshots_CommitId_EntityIdIx = RelationalModel.GetIndex(this,
                "SIL.Harmony.Db.ObjectSnapshot",
                new[] { "CommitId", "EntityId" });
            iX_Snapshots_CommitId_EntityId.MappedIndexes.Add(iX_Snapshots_CommitId_EntityIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Snapshots_CommitId_EntityIdIx).Add(iX_Snapshots_CommitId_EntityId);
            snapshotsTable.Indexes.Add("IX_Snapshots_CommitId_EntityId", iX_Snapshots_CommitId_EntityId);
            var iX_Snapshots_EntityId = new TableIndex(
            "IX_Snapshots_EntityId", snapshotsTable, new[] { entityIdColumn0 }, false);
            var iX_Snapshots_EntityIdIx = RelationalModel.GetIndex(this,
                "SIL.Harmony.Db.ObjectSnapshot",
                new[] { "EntityId" });
            iX_Snapshots_EntityId.MappedIndexes.Add(iX_Snapshots_EntityIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Snapshots_EntityIdIx).Add(iX_Snapshots_EntityId);
            snapshotsTable.Indexes.Add("IX_Snapshots_EntityId", iX_Snapshots_EntityId);
            relationalModel.Tables.Add(("Snapshots", null), snapshotsTable);
            var snapshotsTableMapping = new TableMapping(objectSnapshot, snapshotsTable, true);
            snapshotsTable.AddTypeMapping(snapshotsTableMapping, false);
            tableMappings12.Add(snapshotsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn10, objectSnapshot.FindProperty("Id")!, snapshotsTableMapping);
            RelationalModel.CreateColumnMapping(commitIdColumn0, objectSnapshot.FindProperty("CommitId")!, snapshotsTableMapping);
            RelationalModel.CreateColumnMapping(entityColumn, objectSnapshot.FindProperty("Entity")!, snapshotsTableMapping);
            RelationalModel.CreateColumnMapping(entityIdColumn0, objectSnapshot.FindProperty("EntityId")!, snapshotsTableMapping);
            RelationalModel.CreateColumnMapping(entityIsDeletedColumn, objectSnapshot.FindProperty("EntityIsDeleted")!, snapshotsTableMapping);
            RelationalModel.CreateColumnMapping(isRootColumn, objectSnapshot.FindProperty("IsRoot")!, snapshotsTableMapping);
            RelationalModel.CreateColumnMapping(referencesColumn, objectSnapshot.FindProperty("References")!, snapshotsTableMapping);
            RelationalModel.CreateColumnMapping(typeNameColumn, objectSnapshot.FindProperty("TypeName")!, snapshotsTableMapping);
            var fK_ChangeEntities_Commits_CommitId = new ForeignKeyConstraint(
                "FK_ChangeEntities_Commits_CommitId", changeEntitiesTable, commitsTable,
                new[] { commitIdColumn },
                commitsTable.FindUniqueConstraint("PK_Commits")!, ReferentialAction.Cascade);
            var fK_ChangeEntities_Commits_CommitIdFk = RelationalModel.GetForeignKey(this,
                "SIL.Harmony.Core.ChangeEntity<SIL.Harmony.Changes.IChange>",
                new[] { "CommitId" },
                "SIL.Harmony.Commit",
                new[] { "Id" });
            fK_ChangeEntities_Commits_CommitId.MappedForeignKeys.Add(fK_ChangeEntities_Commits_CommitIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ChangeEntities_Commits_CommitIdFk).Add(fK_ChangeEntities_Commits_CommitId);
            changeEntitiesTable.ForeignKeyConstraints.Add(fK_ChangeEntities_Commits_CommitId);
            commitsTable.ReferencingForeignKeyConstraints.Add(fK_ChangeEntities_Commits_CommitId);
            var fK_ComplexFormComponents_Entry_ComplexFormEntryId = new ForeignKeyConstraint(
                "FK_ComplexFormComponents_Entry_ComplexFormEntryId", complexFormComponentsTable, entryTable,
                new[] { complexFormEntryIdColumn },
                entryTable.FindUniqueConstraint("PK_Entry")!, ReferentialAction.Cascade);
            var fK_ComplexFormComponents_Entry_ComplexFormEntryIdFk = RelationalModel.GetForeignKey(this,
                "MiniLcm.Models.ComplexFormComponent",
                new[] { "ComplexFormEntryId" },
                "MiniLcm.Models.Entry",
                new[] { "Id" });
            fK_ComplexFormComponents_Entry_ComplexFormEntryId.MappedForeignKeys.Add(fK_ComplexFormComponents_Entry_ComplexFormEntryIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ComplexFormComponents_Entry_ComplexFormEntryIdFk).Add(fK_ComplexFormComponents_Entry_ComplexFormEntryId);
            complexFormComponentsTable.ForeignKeyConstraints.Add(fK_ComplexFormComponents_Entry_ComplexFormEntryId);
            entryTable.ReferencingForeignKeyConstraints.Add(fK_ComplexFormComponents_Entry_ComplexFormEntryId);
            var fK_ComplexFormComponents_Entry_ComponentEntryId = new ForeignKeyConstraint(
                "FK_ComplexFormComponents_Entry_ComponentEntryId", complexFormComponentsTable, entryTable,
                new[] { componentEntryIdColumn },
                entryTable.FindUniqueConstraint("PK_Entry")!, ReferentialAction.Cascade);
            var fK_ComplexFormComponents_Entry_ComponentEntryIdFk = RelationalModel.GetForeignKey(this,
                "MiniLcm.Models.ComplexFormComponent",
                new[] { "ComponentEntryId" },
                "MiniLcm.Models.Entry",
                new[] { "Id" });
            fK_ComplexFormComponents_Entry_ComponentEntryId.MappedForeignKeys.Add(fK_ComplexFormComponents_Entry_ComponentEntryIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ComplexFormComponents_Entry_ComponentEntryIdFk).Add(fK_ComplexFormComponents_Entry_ComponentEntryId);
            complexFormComponentsTable.ForeignKeyConstraints.Add(fK_ComplexFormComponents_Entry_ComponentEntryId);
            entryTable.ReferencingForeignKeyConstraints.Add(fK_ComplexFormComponents_Entry_ComponentEntryId);
            var fK_ComplexFormComponents_Sense_ComponentSenseId = new ForeignKeyConstraint(
                "FK_ComplexFormComponents_Sense_ComponentSenseId", complexFormComponentsTable, senseTable,
                new[] { componentSenseIdColumn },
                senseTable.FindUniqueConstraint("PK_Sense")!, ReferentialAction.Cascade);
            var fK_ComplexFormComponents_Sense_ComponentSenseIdFk = RelationalModel.GetForeignKey(this,
                "MiniLcm.Models.ComplexFormComponent",
                new[] { "ComponentSenseId" },
                "MiniLcm.Models.Sense",
                new[] { "Id" });
            fK_ComplexFormComponents_Sense_ComponentSenseId.MappedForeignKeys.Add(fK_ComplexFormComponents_Sense_ComponentSenseIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ComplexFormComponents_Sense_ComponentSenseIdFk).Add(fK_ComplexFormComponents_Sense_ComponentSenseId);
            complexFormComponentsTable.ForeignKeyConstraints.Add(fK_ComplexFormComponents_Sense_ComponentSenseId);
            senseTable.ReferencingForeignKeyConstraints.Add(fK_ComplexFormComponents_Sense_ComponentSenseId);
            var fK_ComplexFormComponents_Snapshots_SnapshotId = new ForeignKeyConstraint(
                "FK_ComplexFormComponents_Snapshots_SnapshotId", complexFormComponentsTable, snapshotsTable,
                new[] { snapshotIdColumn },
                snapshotsTable.FindUniqueConstraint("PK_Snapshots")!, ReferentialAction.SetNull);
            var fK_ComplexFormComponents_Snapshots_SnapshotIdFk = RelationalModel.GetForeignKey(this,
                "MiniLcm.Models.ComplexFormComponent",
                new[] { "SnapshotId" },
                "SIL.Harmony.Db.ObjectSnapshot",
                new[] { "Id" });
            fK_ComplexFormComponents_Snapshots_SnapshotId.MappedForeignKeys.Add(fK_ComplexFormComponents_Snapshots_SnapshotIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ComplexFormComponents_Snapshots_SnapshotIdFk).Add(fK_ComplexFormComponents_Snapshots_SnapshotId);
            complexFormComponentsTable.ForeignKeyConstraints.Add(fK_ComplexFormComponents_Snapshots_SnapshotId);
            snapshotsTable.ReferencingForeignKeyConstraints.Add(fK_ComplexFormComponents_Snapshots_SnapshotId);
            var fK_ComplexFormType_Snapshots_SnapshotId = new ForeignKeyConstraint(
                "FK_ComplexFormType_Snapshots_SnapshotId", complexFormTypeTable, snapshotsTable,
                new[] { snapshotIdColumn0 },
                snapshotsTable.FindUniqueConstraint("PK_Snapshots")!, ReferentialAction.SetNull);
            var fK_ComplexFormType_Snapshots_SnapshotIdFk = RelationalModel.GetForeignKey(this,
                "MiniLcm.Models.ComplexFormType",
                new[] { "SnapshotId" },
                "SIL.Harmony.Db.ObjectSnapshot",
                new[] { "Id" });
            fK_ComplexFormType_Snapshots_SnapshotId.MappedForeignKeys.Add(fK_ComplexFormType_Snapshots_SnapshotIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ComplexFormType_Snapshots_SnapshotIdFk).Add(fK_ComplexFormType_Snapshots_SnapshotId);
            complexFormTypeTable.ForeignKeyConstraints.Add(fK_ComplexFormType_Snapshots_SnapshotId);
            snapshotsTable.ReferencingForeignKeyConstraints.Add(fK_ComplexFormType_Snapshots_SnapshotId);
            var fK_Entry_Snapshots_SnapshotId = new ForeignKeyConstraint(
                "FK_Entry_Snapshots_SnapshotId", entryTable, snapshotsTable,
                new[] { snapshotIdColumn1 },
                snapshotsTable.FindUniqueConstraint("PK_Snapshots")!, ReferentialAction.SetNull);
            var fK_Entry_Snapshots_SnapshotIdFk = RelationalModel.GetForeignKey(this,
                "MiniLcm.Models.Entry",
                new[] { "SnapshotId" },
                "SIL.Harmony.Db.ObjectSnapshot",
                new[] { "Id" });
            fK_Entry_Snapshots_SnapshotId.MappedForeignKeys.Add(fK_Entry_Snapshots_SnapshotIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Entry_Snapshots_SnapshotIdFk).Add(fK_Entry_Snapshots_SnapshotId);
            entryTable.ForeignKeyConstraints.Add(fK_Entry_Snapshots_SnapshotId);
            snapshotsTable.ReferencingForeignKeyConstraints.Add(fK_Entry_Snapshots_SnapshotId);
            var fK_ExampleSentence_Sense_SenseId = new ForeignKeyConstraint(
                "FK_ExampleSentence_Sense_SenseId", exampleSentenceTable, senseTable,
                new[] { senseIdColumn },
                senseTable.FindUniqueConstraint("PK_Sense")!, ReferentialAction.Cascade);
            var fK_ExampleSentence_Sense_SenseIdFk = RelationalModel.GetForeignKey(this,
                "MiniLcm.Models.ExampleSentence",
                new[] { "SenseId" },
                "MiniLcm.Models.Sense",
                new[] { "Id" });
            fK_ExampleSentence_Sense_SenseId.MappedForeignKeys.Add(fK_ExampleSentence_Sense_SenseIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ExampleSentence_Sense_SenseIdFk).Add(fK_ExampleSentence_Sense_SenseId);
            exampleSentenceTable.ForeignKeyConstraints.Add(fK_ExampleSentence_Sense_SenseId);
            senseTable.ReferencingForeignKeyConstraints.Add(fK_ExampleSentence_Sense_SenseId);
            var fK_ExampleSentence_Snapshots_SnapshotId = new ForeignKeyConstraint(
                "FK_ExampleSentence_Snapshots_SnapshotId", exampleSentenceTable, snapshotsTable,
                new[] { snapshotIdColumn2 },
                snapshotsTable.FindUniqueConstraint("PK_Snapshots")!, ReferentialAction.SetNull);
            var fK_ExampleSentence_Snapshots_SnapshotIdFk = RelationalModel.GetForeignKey(this,
                "MiniLcm.Models.ExampleSentence",
                new[] { "SnapshotId" },
                "SIL.Harmony.Db.ObjectSnapshot",
                new[] { "Id" });
            fK_ExampleSentence_Snapshots_SnapshotId.MappedForeignKeys.Add(fK_ExampleSentence_Snapshots_SnapshotIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_ExampleSentence_Snapshots_SnapshotIdFk).Add(fK_ExampleSentence_Snapshots_SnapshotId);
            exampleSentenceTable.ForeignKeyConstraints.Add(fK_ExampleSentence_Snapshots_SnapshotId);
            snapshotsTable.ReferencingForeignKeyConstraints.Add(fK_ExampleSentence_Snapshots_SnapshotId);
            var fK_PartOfSpeech_Snapshots_SnapshotId = new ForeignKeyConstraint(
                "FK_PartOfSpeech_Snapshots_SnapshotId", partOfSpeechTable, snapshotsTable,
                new[] { snapshotIdColumn3 },
                snapshotsTable.FindUniqueConstraint("PK_Snapshots")!, ReferentialAction.SetNull);
            var fK_PartOfSpeech_Snapshots_SnapshotIdFk = RelationalModel.GetForeignKey(this,
                "MiniLcm.Models.PartOfSpeech",
                new[] { "SnapshotId" },
                "SIL.Harmony.Db.ObjectSnapshot",
                new[] { "Id" });
            fK_PartOfSpeech_Snapshots_SnapshotId.MappedForeignKeys.Add(fK_PartOfSpeech_Snapshots_SnapshotIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PartOfSpeech_Snapshots_SnapshotIdFk).Add(fK_PartOfSpeech_Snapshots_SnapshotId);
            partOfSpeechTable.ForeignKeyConstraints.Add(fK_PartOfSpeech_Snapshots_SnapshotId);
            snapshotsTable.ReferencingForeignKeyConstraints.Add(fK_PartOfSpeech_Snapshots_SnapshotId);
            var fK_Publication_Snapshots_SnapshotId = new ForeignKeyConstraint(
                "FK_Publication_Snapshots_SnapshotId", publicationTable, snapshotsTable,
                new[] { snapshotIdColumn4 },
                snapshotsTable.FindUniqueConstraint("PK_Snapshots")!, ReferentialAction.SetNull);
            var fK_Publication_Snapshots_SnapshotIdFk = RelationalModel.GetForeignKey(this,
                "MiniLcm.Models.Publication",
                new[] { "SnapshotId" },
                "SIL.Harmony.Db.ObjectSnapshot",
                new[] { "Id" });
            fK_Publication_Snapshots_SnapshotId.MappedForeignKeys.Add(fK_Publication_Snapshots_SnapshotIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Publication_Snapshots_SnapshotIdFk).Add(fK_Publication_Snapshots_SnapshotId);
            publicationTable.ForeignKeyConstraints.Add(fK_Publication_Snapshots_SnapshotId);
            snapshotsTable.ReferencingForeignKeyConstraints.Add(fK_Publication_Snapshots_SnapshotId);
            var fK_SemanticDomain_Snapshots_SnapshotId = new ForeignKeyConstraint(
                "FK_SemanticDomain_Snapshots_SnapshotId", semanticDomainTable, snapshotsTable,
                new[] { snapshotIdColumn5 },
                snapshotsTable.FindUniqueConstraint("PK_Snapshots")!, ReferentialAction.SetNull);
            var fK_SemanticDomain_Snapshots_SnapshotIdFk = RelationalModel.GetForeignKey(this,
                "MiniLcm.Models.SemanticDomain",
                new[] { "SnapshotId" },
                "SIL.Harmony.Db.ObjectSnapshot",
                new[] { "Id" });
            fK_SemanticDomain_Snapshots_SnapshotId.MappedForeignKeys.Add(fK_SemanticDomain_Snapshots_SnapshotIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_SemanticDomain_Snapshots_SnapshotIdFk).Add(fK_SemanticDomain_Snapshots_SnapshotId);
            semanticDomainTable.ForeignKeyConstraints.Add(fK_SemanticDomain_Snapshots_SnapshotId);
            snapshotsTable.ReferencingForeignKeyConstraints.Add(fK_SemanticDomain_Snapshots_SnapshotId);
            var fK_Sense_Entry_EntryId = new ForeignKeyConstraint(
                "FK_Sense_Entry_EntryId", senseTable, entryTable,
                new[] { entryIdColumn },
                entryTable.FindUniqueConstraint("PK_Entry")!, ReferentialAction.Cascade);
            var fK_Sense_Entry_EntryIdFk = RelationalModel.GetForeignKey(this,
                "MiniLcm.Models.Sense",
                new[] { "EntryId" },
                "MiniLcm.Models.Entry",
                new[] { "Id" });
            fK_Sense_Entry_EntryId.MappedForeignKeys.Add(fK_Sense_Entry_EntryIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Sense_Entry_EntryIdFk).Add(fK_Sense_Entry_EntryId);
            senseTable.ForeignKeyConstraints.Add(fK_Sense_Entry_EntryId);
            entryTable.ReferencingForeignKeyConstraints.Add(fK_Sense_Entry_EntryId);
            var fK_Sense_PartOfSpeech_PartOfSpeechId = new ForeignKeyConstraint(
                "FK_Sense_PartOfSpeech_PartOfSpeechId", senseTable, partOfSpeechTable,
                new[] { partOfSpeechIdColumn },
                partOfSpeechTable.FindUniqueConstraint("PK_PartOfSpeech")!, ReferentialAction.NoAction);
            var fK_Sense_PartOfSpeech_PartOfSpeechIdFk = RelationalModel.GetForeignKey(this,
                "MiniLcm.Models.Sense",
                new[] { "PartOfSpeechId" },
                "MiniLcm.Models.PartOfSpeech",
                new[] { "Id" });
            fK_Sense_PartOfSpeech_PartOfSpeechId.MappedForeignKeys.Add(fK_Sense_PartOfSpeech_PartOfSpeechIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Sense_PartOfSpeech_PartOfSpeechIdFk).Add(fK_Sense_PartOfSpeech_PartOfSpeechId);
            senseTable.ForeignKeyConstraints.Add(fK_Sense_PartOfSpeech_PartOfSpeechId);
            partOfSpeechTable.ReferencingForeignKeyConstraints.Add(fK_Sense_PartOfSpeech_PartOfSpeechId);
            var fK_Sense_Snapshots_SnapshotId = new ForeignKeyConstraint(
                "FK_Sense_Snapshots_SnapshotId", senseTable, snapshotsTable,
                new[] { snapshotIdColumn6 },
                snapshotsTable.FindUniqueConstraint("PK_Snapshots")!, ReferentialAction.SetNull);
            var fK_Sense_Snapshots_SnapshotIdFk = RelationalModel.GetForeignKey(this,
                "MiniLcm.Models.Sense",
                new[] { "SnapshotId" },
                "SIL.Harmony.Db.ObjectSnapshot",
                new[] { "Id" });
            fK_Sense_Snapshots_SnapshotId.MappedForeignKeys.Add(fK_Sense_Snapshots_SnapshotIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Sense_Snapshots_SnapshotIdFk).Add(fK_Sense_Snapshots_SnapshotId);
            senseTable.ForeignKeyConstraints.Add(fK_Sense_Snapshots_SnapshotId);
            snapshotsTable.ReferencingForeignKeyConstraints.Add(fK_Sense_Snapshots_SnapshotId);
            var fK_Snapshots_Commits_CommitId = new ForeignKeyConstraint(
                "FK_Snapshots_Commits_CommitId", snapshotsTable, commitsTable,
                new[] { commitIdColumn0 },
                commitsTable.FindUniqueConstraint("PK_Commits")!, ReferentialAction.Cascade);
            var fK_Snapshots_Commits_CommitIdFk = RelationalModel.GetForeignKey(this,
                "SIL.Harmony.Db.ObjectSnapshot",
                new[] { "CommitId" },
                "SIL.Harmony.Commit",
                new[] { "Id" });
            fK_Snapshots_Commits_CommitId.MappedForeignKeys.Add(fK_Snapshots_Commits_CommitIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Snapshots_Commits_CommitIdFk).Add(fK_Snapshots_Commits_CommitId);
            snapshotsTable.ForeignKeyConstraints.Add(fK_Snapshots_Commits_CommitId);
            commitsTable.ReferencingForeignKeyConstraints.Add(fK_Snapshots_Commits_CommitId);
            var fK_WritingSystem_Snapshots_SnapshotId = new ForeignKeyConstraint(
                "FK_WritingSystem_Snapshots_SnapshotId", writingSystemTable, snapshotsTable,
                new[] { snapshotIdColumn7 },
                snapshotsTable.FindUniqueConstraint("PK_Snapshots")!, ReferentialAction.SetNull);
            var fK_WritingSystem_Snapshots_SnapshotIdFk = RelationalModel.GetForeignKey(this,
                "MiniLcm.Models.WritingSystem",
                new[] { "SnapshotId" },
                "SIL.Harmony.Db.ObjectSnapshot",
                new[] { "Id" });
            fK_WritingSystem_Snapshots_SnapshotId.MappedForeignKeys.Add(fK_WritingSystem_Snapshots_SnapshotIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_WritingSystem_Snapshots_SnapshotIdFk).Add(fK_WritingSystem_Snapshots_SnapshotId);
            writingSystemTable.ForeignKeyConstraints.Add(fK_WritingSystem_Snapshots_SnapshotId);
            snapshotsTable.ReferencingForeignKeyConstraints.Add(fK_WritingSystem_Snapshots_SnapshotId);
            return relationalModel.MakeReadOnly();
        }
    }
}
