name: lexbox ui

# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#on
on:
  push:
    paths:
      - 'frontend/**'
      - '.github/workflows/lexbox-ui.yaml'
      - '.github/workflows/deploy.yaml'
    branches:
      - main
      - develop
  pull_request:
    paths:
      - 'frontend/**'
      - '.github/workflows/lexbox-ui.yaml'
      - '.github/workflows/deploy.yaml'
    branches:
      - main
      - develop

env:
  PROD_RELEASE: ${{github.ref == vars.PROD_BRANCH}}

jobs:
  publish-ui:
    runs-on: ubuntu-latest

    env:
      # https://docs.docker.com/develop/develop-images/build_enhancements/
      DOCKER_BUILDKIT: 1

    steps:
      - uses: actions/checkout@v3
      - name: Set Version
        id: setVersion
        # set version to date in vYYYY-MM-DD format
        run: |
          echo "VERSION=v$(date --rfc-3339=date)" >> ${GITHUB_ENV}

      - name: Docker meta
        id: meta
        if: ${{ !env.ACT }}
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/sillsdev/lexbox-ui
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,enable=${{ env.PROD_RELEASE }},value=latest
            type=raw,enable=${{ env.PROD_RELEASE }},value=${{ env.VERSION }}

      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/build-push-action@v4
        with:
          context: frontend
          build-args: |
            APP_VERSION=${{ env.VERSION }}
          push: ${{ !env.ACT }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  deploy-ui:
    uses: ./.github/workflows/deploy.yaml
#    if: ${{github.ref == vars.PROD_BRANCH}}
    if: ${{ false }}
    secrets: inherit
    needs: publish-ui
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v3
      - run: corepack enable
      - run: pnpm install
      - run: pnpm run build # The TS linter needs types generated by the build (.svelte-kit)
      - run: pnpm run lint
